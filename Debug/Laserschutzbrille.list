
Laserschutzbrille.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009208  08009208  00019208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800968c  0800968c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009694  08009694  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800969c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001e0  0800987c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0800987c  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017282  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d28  00000000  00000000  00037492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002477d  00000000  00000000  0003cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172d4  00000000  00000000  000612e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2174  00000000  00000000  000785b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a72d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c94  00000000  00000000  0015a780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091f0 	.word	0x080091f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080091f0 	.word	0x080091f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <__io_putchar+0x20>)
 8000f9e:	f004 ff55 	bl	8005e4c <HAL_UART_Transmit>
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000380 	.word	0x20000380

08000fb0 <readDiodes>:

float E_WTA;
float E_LTA;

void readDiodes (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
	//Define Photodiode Constants
	const double Aph = 2.1576e-6; //Photiodenfläche m^2
 8000fb6:	a382      	add	r3, pc, #520	; (adr r3, 80011c0 <readDiodes+0x210>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	const double Rph = 0.34; //Bei 532nm in A/W
 8000fc0:	a381      	add	r3, pc, #516	; (adr r3, 80011c8 <readDiodes+0x218>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	const double RT = 47e3; //Transimpedanz Verstärkeungsfaktor in Ohm
 8000fca:	a381      	add	r3, pc, #516	; (adr r3, 80011d0 <readDiodes+0x220>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double U_val;
	double I_val;
	double P_val;
	double E_val;
	uint32_t adc_raw[3];
	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); // start adc in DMA mode
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4619      	mov	r1, r3
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <readDiodes+0x1e8>)
 8000fdc:	f001 fc2e 	bl	800283c <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 f8a9 	bl	8002138 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1); // stop adc in DMA mode
 8000fe6:	486c      	ldr	r0, [pc, #432]	; (8001198 <readDiodes+0x1e8>)
 8000fe8:	f001 fcac 	bl	8002944 <HAL_ADC_Stop_DMA>
	//Get ADC LTA
	raw_val = adc_raw[0];
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
	U_val = raw_val * 3.35;
 8000ff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ff2:	f7ff fa87 	bl	8000504 <__aeabi_ui2d>
 8000ff6:	a364      	add	r3, pc, #400	; (adr r3, 8001188 <readDiodes+0x1d8>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fafc 	bl	80005f8 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	U_val /= 4096;
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b63      	ldr	r3, [pc, #396]	; (800119c <readDiodes+0x1ec>)
 800100e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001012:	f7ff fc1b 	bl	800084c <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	printf("<LTA>,%fV,",U_val);
 800101e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001022:	485f      	ldr	r0, [pc, #380]	; (80011a0 <readDiodes+0x1f0>)
 8001024:	f006 f81e 	bl	8007064 <iprintf>
	I_val = U_val/RT;
 8001028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800102c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001030:	f7ff fc0c 	bl	800084c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	e9c7 2308 	strd	r2, r3, [r7, #32]
	printf("%fuA,",I_val*1e6);
 800103c:	a354      	add	r3, pc, #336	; (adr r3, 8001190 <readDiodes+0x1e0>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001046:	f7ff fad7 	bl	80005f8 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4855      	ldr	r0, [pc, #340]	; (80011a4 <readDiodes+0x1f4>)
 8001050:	f006 f808 	bl	8007064 <iprintf>
	P_val = I_val / Rph;
 8001054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800105c:	f7ff fbf6 	bl	800084c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2306 	strd	r2, r3, [r7, #24]
	printf("%fuW,",P_val*1e6);
 8001068:	a349      	add	r3, pc, #292	; (adr r3, 8001190 <readDiodes+0x1e0>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001072:	f7ff fac1 	bl	80005f8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	484b      	ldr	r0, [pc, #300]	; (80011a8 <readDiodes+0x1f8>)
 800107c:	f005 fff2 	bl	8007064 <iprintf>
	E_val = P_val / Aph;
 8001080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001084:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
	E_LTA = E_val;
 8001094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001098:	f7ff fda6 	bl	8000be8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a43      	ldr	r2, [pc, #268]	; (80011ac <readDiodes+0x1fc>)
 80010a0:	6013      	str	r3, [r2, #0]
	printf("%fW/m2,",E_val);
 80010a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a6:	4842      	ldr	r0, [pc, #264]	; (80011b0 <readDiodes+0x200>)
 80010a8:	f005 ffdc 	bl	8007064 <iprintf>
	printf("%lu\n\r",raw_val);
 80010ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010ae:	4841      	ldr	r0, [pc, #260]	; (80011b4 <readDiodes+0x204>)
 80010b0:	f005 ffd8 	bl	8007064 <iprintf>
	//Get ADC WTA
	raw_val = adc_raw[1];
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
	U_val = raw_val * 3.35;
 80010b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010ba:	f7ff fa23 	bl	8000504 <__aeabi_ui2d>
 80010be:	a332      	add	r3, pc, #200	; (adr r3, 8001188 <readDiodes+0x1d8>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa98 	bl	80005f8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	U_val /= 4096;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <readDiodes+0x1ec>)
 80010d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010da:	f7ff fbb7 	bl	800084c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	printf("<WTA>,%fV,",U_val);
 80010e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <readDiodes+0x208>)
 80010ec:	f005 ffba 	bl	8007064 <iprintf>
	I_val = U_val/RT;
 80010f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 2308 	strd	r2, r3, [r7, #32]
	printf("%fuA,",I_val*1e6);
 8001104:	a322      	add	r3, pc, #136	; (adr r3, 8001190 <readDiodes+0x1e0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800110e:	f7ff fa73 	bl	80005f8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <readDiodes+0x1f4>)
 8001118:	f005 ffa4 	bl	8007064 <iprintf>
	P_val = I_val / Rph;
 800111c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001120:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001124:	f7ff fb92 	bl	800084c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	printf("%fuW,",P_val*1e6);
 8001130:	a317      	add	r3, pc, #92	; (adr r3, 8001190 <readDiodes+0x1e0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f7ff fa5d 	bl	80005f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <readDiodes+0x1f8>)
 8001144:	f005 ff8e 	bl	8007064 <iprintf>
	E_val = P_val / Aph;
 8001148:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800114c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001150:	f7ff fb7c 	bl	800084c <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	e9c7 2304 	strd	r2, r3, [r7, #16]
	E_WTA = E_val;
 800115c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001160:	f7ff fd42 	bl	8000be8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <readDiodes+0x20c>)
 8001168:	6013      	str	r3, [r2, #0]
	printf("%fW/m2,",E_val);
 800116a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <readDiodes+0x200>)
 8001170:	f005 ff78 	bl	8007064 <iprintf>
	printf("%lu\n\r",raw_val);
 8001174:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <readDiodes+0x204>)
 8001178:	f005 ff74 	bl	8007064 <iprintf>
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	; 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	cccccccd 	.word	0xcccccccd
 800118c:	400acccc 	.word	0x400acccc
 8001190:	00000000 	.word	0x00000000
 8001194:	412e8480 	.word	0x412e8480
 8001198:	200001fc 	.word	0x200001fc
 800119c:	40b00000 	.word	0x40b00000
 80011a0:	08009208 	.word	0x08009208
 80011a4:	08009214 	.word	0x08009214
 80011a8:	0800921c 	.word	0x0800921c
 80011ac:	20000408 	.word	0x20000408
 80011b0:	08009224 	.word	0x08009224
 80011b4:	0800922c 	.word	0x0800922c
 80011b8:	08009234 	.word	0x08009234
 80011bc:	20000404 	.word	0x20000404
 80011c0:	24e01ddd 	.word	0x24e01ddd
 80011c4:	3ec21969 	.word	0x3ec21969
 80011c8:	5c28f5c3 	.word	0x5c28f5c3
 80011cc:	3fd5c28f 	.word	0x3fd5c28f
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40e6f300 	.word	0x40e6f300

080011d8 <delay_us>:
uint32_t int_clock_cycles = 0; // Variabel integration CLock Cycles
uint32_t integration_time_us = 0; // Measured Integration Time


void delay_us (uint16_t us)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value a 0
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <delay_us+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);  // wait for the counter to reach the us input in the parameter
 80011ea:	bf00      	nop
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <delay_us+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3f9      	bcc.n	80011ec <delay_us+0x14>
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200002e8 	.word	0x200002e8

0800120c <spec_pulse_clock>:

void spec_pulse_clock(uint16_t pulses) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < pulses; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	81fb      	strh	r3, [r7, #14]
 800121a:	e016      	b.n	800124a <spec_pulse_clock+0x3e>
  {
	  HAL_GPIO_WritePin(SPEC_CLK_GPIO_Port, SPEC_CLK_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f003 faab 	bl	8004780 <HAL_GPIO_WritePin>
	  delay_us(delayTime);
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <spec_pulse_clock+0x50>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffd1 	bl	80011d8 <delay_us>
	  HAL_GPIO_WritePin(SPEC_CLK_GPIO_Port, SPEC_CLK_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f003 fa9e 	bl	8004780 <HAL_GPIO_WritePin>
  for (uint16_t i = 0; i < pulses; i++)
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	3301      	adds	r3, #1
 8001248:	81fb      	strh	r3, [r7, #14]
 800124a:	89fa      	ldrh	r2, [r7, #14]
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3e4      	bcc.n	800121c <spec_pulse_clock+0x10>
	  //delay_us(delayTime);
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000

08001260 <set_int_cycles_Spectrometer>:

/*
 * This functions optimizes the intgration time for the spec
*/
void set_int_cycles_Spectrometer(){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	//static uint32_t last_cycles;
	//Get Maximum and average of spectrum
	static uint32_t avg,max;
	max = 0;
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
	avg = 0;
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <set_int_cycles_Spectrometer+0x16c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SPEC_CHANNELS; ++i) {
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	e019      	b.n	80012ac <set_int_cycles_Spectrometer+0x4c>
		avg += spec_data[i];
 8001278:	4a55      	ldr	r2, [pc, #340]	; (80013d0 <set_int_cycles_Spectrometer+0x170>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001280:	4b52      	ldr	r3, [pc, #328]	; (80013cc <set_int_cycles_Spectrometer+0x16c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a51      	ldr	r2, [pc, #324]	; (80013cc <set_int_cycles_Spectrometer+0x16c>)
 8001288:	6013      	str	r3, [r2, #0]
		if(spec_data[i] > max){
 800128a:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <set_int_cycles_Spectrometer+0x170>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d905      	bls.n	80012a6 <set_int_cycles_Spectrometer+0x46>
			max = spec_data[i];
 800129a:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <set_int_cycles_Spectrometer+0x170>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	4a49      	ldr	r2, [pc, #292]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 80012a4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < SPEC_CHANNELS; ++i) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80012b2:	dbe1      	blt.n	8001278 <set_int_cycles_Spectrometer+0x18>
		}
	}
	avg /= SPEC_CHANNELS;
 80012b4:	4b45      	ldr	r3, [pc, #276]	; (80013cc <set_int_cycles_Spectrometer+0x16c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <set_int_cycles_Spectrometer+0x174>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	4a42      	ldr	r2, [pc, #264]	; (80013cc <set_int_cycles_Spectrometer+0x16c>)
 80012c2:	6013      	str	r3, [r2, #0]
	//Adjust according to max value should be in Range of 1500 till 2500
	if ((max > 2500)) {
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d94e      	bls.n	800136e <set_int_cycles_Spectrometer+0x10e>
		if ((int_clock_cycles - ctrl_p_stepsize*(max-2500)) < 0) {
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f915 	bl	8000504 <__aeabi_ui2d>
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f90c 	bl	8000504 <__aeabi_ui2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <set_int_cycles_Spectrometer+0x17c>)
 80012f2:	f7ff f981 	bl	80005f8 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7fe ffc3 	bl	8000288 <__aeabi_dsub>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	f7ff fbe3 	bl	8000adc <__aeabi_dcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <set_int_cycles_Spectrometer+0xc8>
			int_clock_cycles -= 10;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b0a      	subs	r3, #10
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 8001324:	6013      	str	r3, [r2, #0]
			int_clock_cycles -= ctrl_p_stepsize*(max-2500);
		}
	} else if ((max < 1500)) {
		int_clock_cycles += ctrl_p_stepsize*(1500-max);
	}
}
 8001326:	e04b      	b.n	80013c0 <set_int_cycles_Spectrometer+0x160>
			int_clock_cycles -= ctrl_p_stepsize*(max-2500);
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8e9 	bl	8000504 <__aeabi_ui2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8e0 	bl	8000504 <__aeabi_ui2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <set_int_cycles_Spectrometer+0x17c>)
 800134a:	f7ff f955 	bl	80005f8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7fe ff97 	bl	8000288 <__aeabi_dsub>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc21 	bl	8000ba8 <__aeabi_d2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	e028      	b.n	80013c0 <set_int_cycles_Spectrometer+0x160>
	} else if ((max < 1500)) {
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f240 52db 	movw	r2, #1499	; 0x5db
 8001376:	4293      	cmp	r3, r2
 8001378:	d822      	bhi.n	80013c0 <set_int_cycles_Spectrometer+0x160>
		int_clock_cycles += ctrl_p_stepsize*(1500-max);
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8c0 	bl	8000504 <__aeabi_ui2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <set_int_cycles_Spectrometer+0x168>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001390:	3304      	adds	r3, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8b6 	bl	8000504 <__aeabi_ui2d>
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <set_int_cycles_Spectrometer+0x17c>)
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7fe ff6f 	bl	800028c <__adddf3>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fbf7 	bl	8000ba8 <__aeabi_d2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <set_int_cycles_Spectrometer+0x178>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	20000894 	.word	0x20000894
 80013cc:	20000898 	.word	0x20000898
 80013d0:	2000040c 	.word	0x2000040c
 80013d4:	38e38e39 	.word	0x38e38e39
 80013d8:	2000088c 	.word	0x2000088c
 80013dc:	3ff80000 	.word	0x3ff80000

080013e0 <readSpectrometer>:

/*
 * This functions reads spectrometer data from SPEC_VIDEO
 * Look at the Timing Chart in the Datasheet for more info
*/
void readSpectrometer(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
  // Start clock cycle and set start pulse to signal start
  spec_pulse_clock(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff ff10 	bl	800120c <spec_pulse_clock>
  HAL_GPIO_WritePin(SPEC_ST_GPIO_Port, SPEC_ST_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2101      	movs	r1, #1
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <readSpectrometer+0x98>)
 80013f2:	f003 f9c5 	bl	8004780 <HAL_GPIO_WritePin>
  //pixel integration starts after three clock pulses
  spec_pulse_clock(3);
 80013f6:	2003      	movs	r0, #3
 80013f8:	f7ff ff08 	bl	800120c <spec_pulse_clock>
  //measure effective integration time
  __HAL_TIM_SET_COUNTER(&htim7,0);
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <readSpectrometer+0x9c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
  //Integrate pixels for a while
  //pulse_clock_timed(duration_micros);
  spec_pulse_clock(int_clock_cycles);
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <readSpectrometer+0xa0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fefe 	bl	800120c <spec_pulse_clock>
  //Set _ST_pin to low
  HAL_GPIO_WritePin(SPEC_ST_GPIO_Port, SPEC_ST_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <readSpectrometer+0x98>)
 8001416:	f003 f9b3 	bl	8004780 <HAL_GPIO_WritePin>
  //integration stops at pulse 48 th pulse after ST went low
  spec_pulse_clock(48);
 800141a:	2030      	movs	r0, #48	; 0x30
 800141c:	f7ff fef6 	bl	800120c <spec_pulse_clock>
  //stop measure eff intg time
  integration_time_us = __HAL_TIM_GET_COUNTER(&htim7);
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <readSpectrometer+0x9c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <readSpectrometer+0xa4>)
 8001428:	6013      	str	r3, [r2, #0]
  //pixel output is ready after last pulse #88 after ST wen low
  spec_pulse_clock(40);
 800142a:	2028      	movs	r0, #40	; 0x28
 800142c:	f7ff feee 	bl	800120c <spec_pulse_clock>
  //Read out the first sample to throw it away (high impedance input)
  //data[0] = szl_adc_readOneChannel(SPEC_VIDEO);
  //Read from SPEC_VIDEO
  uint32_t adc_raw[3];
  for(int i = 0; i < SPEC_CHANNELS; i++){
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e016      	b.n	8001464 <readSpectrometer+0x84>
	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); // start adc in DMA mode
 8001436:	463b      	mov	r3, r7
 8001438:	2203      	movs	r2, #3
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <readSpectrometer+0xa8>)
 800143e:	f001 f9fd 	bl	800283c <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fe78 	bl	8002138 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1); // start adc in DMA mode
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <readSpectrometer+0xa8>)
 800144a:	f001 fa7b 	bl	8002944 <HAL_ADC_Stop_DMA>
    spec_data[i] = adc_raw[2];
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	490e      	ldr	r1, [pc, #56]	; (800148c <readSpectrometer+0xac>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    spec_pulse_clock(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fed7 	bl	800120c <spec_pulse_clock>
  for(int i = 0; i < SPEC_CHANNELS; i++){
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800146a:	dbe4      	blt.n	8001436 <readSpectrometer+0x56>
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400
 800147c:	20000334 	.word	0x20000334
 8001480:	2000088c 	.word	0x2000088c
 8001484:	20000890 	.word	0x20000890
 8001488:	200001fc 	.word	0x200001fc
 800148c:	2000040c 	.word	0x2000040c

08001490 <printSpectrometerData>:

/*
 * The function below prints out data to the terminal or
 * processing plot
*/
void printSpectrometerData(){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  printf("<data>,");
 8001496:	4811      	ldr	r0, [pc, #68]	; (80014dc <printSpectrometerData+0x4c>)
 8001498:	f005 fde4 	bl	8007064 <iprintf>
  for (int i = 0; i < SPEC_CHANNELS; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	e00a      	b.n	80014b8 <printSpectrometerData+0x28>
    printf("%lu,",spec_data[i]);
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <printSpectrometerData+0x50>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	4619      	mov	r1, r3
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <printSpectrometerData+0x54>)
 80014ae:	f005 fdd9 	bl	8007064 <iprintf>
  for (int i = 0; i < SPEC_CHANNELS; i++){
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80014be:	dbf0      	blt.n	80014a2 <printSpectrometerData+0x12>
  }
  printf("\n\r");
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <printSpectrometerData+0x58>)
 80014c2:	f005 fdcf 	bl	8007064 <iprintf>
  printf("<int_time_us>,%lu\n\r",integration_time_us);
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <printSpectrometerData+0x5c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <printSpectrometerData+0x60>)
 80014ce:	f005 fdc9 	bl	8007064 <iprintf>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08009240 	.word	0x08009240
 80014e0:	2000040c 	.word	0x2000040c
 80014e4:	08009248 	.word	0x08009248
 80014e8:	08009250 	.word	0x08009250
 80014ec:	20000890 	.word	0x20000890
 80014f0:	08009254 	.word	0x08009254

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f8:	f000 fda9 	bl	800204e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fc:	f000 f83a 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001500:	f000 fa3c 	bl	800197c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001504:	f000 f9ec 	bl	80018e0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001508:	f000 fa1a 	bl	8001940 <MX_DMA_Init>
  MX_ADC1_Init();
 800150c:	f000 f894 	bl	8001638 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001510:	f000 f97a 	bl	8001808 <MX_TIM6_Init>
  MX_COMP1_Init();
 8001514:	f000 f918 	bl	8001748 <MX_COMP1_Init>
  MX_DAC1_Init();
 8001518:	f000 f944 	bl	80017a4 <MX_DAC1_Init>
  MX_TIM7_Init();
 800151c:	f000 f9aa 	bl	8001874 <MX_TIM7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <main+0x70>)
 8001522:	f004 fb2f 	bl	8005b84 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <main+0x74>)
 8001528:	f004 fb2c 	bl	8005b84 <HAL_TIM_Base_Start>
  //Start Comparator
  HAL_COMP_Start(&hcomp1);
 800152c:	480f      	ldr	r0, [pc, #60]	; (800156c <main+0x78>)
 800152e:	f002 fab7 	bl	8003aa0 <HAL_COMP_Start>
  //Start Comparator
	while (1) {
		//Blink LED
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2108      	movs	r1, #8
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <main+0x7c>)
 8001538:	f003 f922 	bl	8004780 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800153c:	20fa      	movs	r0, #250	; 0xfa
 800153e:	f000 fdfb 	bl	8002138 <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2108      	movs	r1, #8
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <main+0x7c>)
 8001548:	f003 f91a 	bl	8004780 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800154c:	20fa      	movs	r0, #250	; 0xfa
 800154e:	f000 fdf3 	bl	8002138 <HAL_Delay>


		//Update

		//Read Spectrometer
		readSpectrometer();
 8001552:	f7ff ff45 	bl	80013e0 <readSpectrometer>
		//Read Diodes
		readDiodes();
 8001556:	f7ff fd2b 	bl	8000fb0 <readDiodes>
		printSpectrometerData();
 800155a:	f7ff ff99 	bl	8001490 <printSpectrometerData>
		set_int_cycles_Spectrometer();
 800155e:	f7ff fe7f 	bl	8001260 <set_int_cycles_Spectrometer>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001562:	e7e6      	b.n	8001532 <main+0x3e>
 8001564:	200002e8 	.word	0x200002e8
 8001568:	20000334 	.word	0x20000334
 800156c:	200002a8 	.word	0x200002a8
 8001570:	48000400 	.word	0x48000400

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	; 0x58
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2244      	movs	r2, #68	; 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f005 f8fc 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001596:	f44f 7000 	mov.w	r0, #512	; 0x200
 800159a:	f003 f927 	bl	80047ec <HAL_PWREx_ControlVoltageScaling>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a4:	f000 fa4c 	bl	8001a40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015a8:	f003 f902 	bl	80047b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <SystemClock_Config+0xc0>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <SystemClock_Config+0xc0>)
 80015b4:	f023 0318 	bic.w	r3, r3, #24
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015bc:	2314      	movs	r3, #20
 80015be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80015dc:	2310      	movs	r3, #16
 80015de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015e0:	2307      	movs	r3, #7
 80015e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f951 	bl	8004898 <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fa20 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2303      	movs	r3, #3
 8001606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	2101      	movs	r1, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fd5d 	bl	80050d8 <HAL_RCC_ClockConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001624:	f000 fa0c 	bl	8001a40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001628:	f004 f952 	bl	80058d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800162c:	bf00      	nop
 800162e:	3758      	adds	r7, #88	; 0x58
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800164e:	4b39      	ldr	r3, [pc, #228]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001650:	4a39      	ldr	r2, [pc, #228]	; (8001738 <MX_ADC1_Init+0x100>)
 8001652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001656:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <MX_ADC1_Init+0xfc>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <MX_ADC1_Init+0xfc>)
 800166a:	2201      	movs	r2, #1
 800166c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001670:	2204      	movs	r2, #4
 8001672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001676:	2200      	movs	r2, #0
 8001678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <MX_ADC1_Init+0xfc>)
 800167c:	2201      	movs	r2, #1
 800167e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001682:	2203      	movs	r2, #3
 8001684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001690:	2200      	movs	r2, #0
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001696:	2200      	movs	r2, #0
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_ADC1_Init+0xfc>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_ADC1_Init+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_ADC1_Init+0xfc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b0:	4820      	ldr	r0, [pc, #128]	; (8001734 <MX_ADC1_Init+0xfc>)
 80016b2:	f000 ff7b 	bl	80025ac <HAL_ADC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80016bc:	f000 f9c0 	bl	8001a40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_ADC1_Init+0x104>)
 80016c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c4:	2306      	movs	r3, #6
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80016c8:	2307      	movs	r3, #7
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016cc:	237f      	movs	r3, #127	; 0x7f
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016d0:	2304      	movs	r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4815      	ldr	r0, [pc, #84]	; (8001734 <MX_ADC1_Init+0xfc>)
 80016de:	f001 f9b1 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80016e8:	f000 f9aa 	bl	8001a40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_ADC1_Init+0x108>)
 80016ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016f0:	230c      	movs	r3, #12
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	480e      	ldr	r0, [pc, #56]	; (8001734 <MX_ADC1_Init+0xfc>)
 80016fa:	f001 f9a3 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001704:	f000 f99c 	bl	8001a40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_ADC1_Init+0x10c>)
 800170a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800170c:	2312      	movs	r3, #18
 800170e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	4619      	mov	r1, r3
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001716:	f001 f995 	bl	8002a44 <HAL_ADC_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001720:	f000 f98e 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001724:	217f      	movs	r1, #127	; 0x7f
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <MX_ADC1_Init+0xfc>)
 8001728:	f001 ffaa 	bl	8003680 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200001fc 	.word	0x200001fc
 8001738:	50040000 	.word	0x50040000
 800173c:	21800100 	.word	0x21800100
 8001740:	25b00200 	.word	0x25b00200
 8001744:	2a000400 	.word	0x2a000400

08001748 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_COMP1_Init+0x54>)
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <MX_COMP1_Init+0x58>)
 8001750:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_COMP1_Init+0x54>)
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO3;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_COMP1_Init+0x54>)
 800175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_COMP1_Init+0x54>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_COMP1_Init+0x54>)
 8001768:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800176c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_COMP1_Init+0x54>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_MEDIUMSPEED;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_COMP1_Init+0x54>)
 8001776:	2204      	movs	r2, #4
 8001778:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_COMP1_Init+0x54>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_COMP1_Init+0x54>)
 8001782:	2211      	movs	r2, #17
 8001784:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_COMP1_Init+0x54>)
 8001788:	f002 f898 	bl	80038bc <HAL_COMP_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8001792:	f000 f955 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002a8 	.word	0x200002a8
 80017a0:	40010200 	.word	0x40010200

080017a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2224      	movs	r2, #36	; 0x24
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 ffe5 	bl	8006780 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_DAC1_Init+0x5c>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_DAC1_Init+0x60>)
 80017ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <MX_DAC1_Init+0x5c>)
 80017be:	f002 fb02 	bl	8003dc6 <HAL_DAC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017c8:	f000 f93a 	bl	8001a40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80017d4:	2302      	movs	r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_DAC1_Init+0x5c>)
 80017e8:	f002 fb0f 	bl	8003e0a <HAL_DAC_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80017f2:	f000 f925 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002d4 	.word	0x200002d4
 8001804:	40007400 	.word	0x40007400

08001808 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_TIM6_Init+0x64>)
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_TIM6_Init+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_TIM6_Init+0x64>)
 8001820:	221f      	movs	r2, #31
 8001822:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_TIM6_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_TIM6_Init+0x64>)
 800182c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001830:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_TIM6_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <MX_TIM6_Init+0x64>)
 800183a:	f004 f94b 	bl	8005ad4 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001844:	f000 f8fc 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_TIM6_Init+0x64>)
 8001856:	f004 fa45 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001860:	f000 f8ee 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200002e8 	.word	0x200002e8
 8001870:	40001000 	.word	0x40001000

08001874 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_TIM7_Init+0x64>)
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <MX_TIM7_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_TIM7_Init+0x64>)
 800188c:	221f      	movs	r2, #31
 800188e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_TIM7_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_TIM7_Init+0x64>)
 8001898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800189c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_TIM7_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <MX_TIM7_Init+0x64>)
 80018a6:	f004 f915 	bl	8005ad4 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018b0:	f000 f8c6 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_TIM7_Init+0x64>)
 80018c2:	f004 fa0f 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 f8b8 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000334 	.word	0x20000334
 80018dc:	40001400 	.word	0x40001400

080018e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART2_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001924:	f004 fa44 	bl	8005db0 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f000 f887 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000380 	.word	0x20000380
 800193c:	40004400 	.word	0x40004400

08001940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_DMA_Init+0x38>)
 8001948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <MX_DMA_Init+0x38>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6493      	str	r3, [r2, #72]	; 0x48
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_DMA_Init+0x38>)
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	200b      	movs	r0, #11
 8001964:	f002 f9f9 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001968:	200b      	movs	r0, #11
 800196a:	f002 fa12 	bl	8003d92 <HAL_NVIC_EnableIRQ>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_GPIO_Init+0xbc>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <MX_GPIO_Init+0xbc>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_GPIO_Init+0xbc>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_ST_Pin|LD3_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2109      	movs	r1, #9
 80019de:	4817      	ldr	r0, [pc, #92]	; (8001a3c <MX_GPIO_Init+0xc0>)
 80019e0:	f002 fece 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_CLK_GPIO_Port, SPEC_CLK_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f002 fec7 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPEC_ST_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPEC_ST_Pin|LD3_Pin;
 80019f2:	2309      	movs	r3, #9
 80019f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_GPIO_Init+0xc0>)
 8001a0a:	f002 fd4f 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_CLK_Pin */
  GPIO_InitStruct.Pin = SPEC_CLK_Pin;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f002 fd3f 	bl	80044ac <HAL_GPIO_Init>

}
 8001a2e:	bf00      	nop
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a48:	e7fe      	b.n	8001a48 <Error_Handler+0x8>
	...

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x44>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x44>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_MspInit+0x44>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x44>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x44>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b09e      	sub	sp, #120	; 0x78
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	2254      	movs	r2, #84	; 0x54
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fe63 	bl	8006780 <memset>
  if(hadc->Instance==ADC1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <HAL_ADC_MspInit+0x118>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d16e      	bne.n	8001ba2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001aca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ace:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001adc:	2307      	movs	r3, #7
 8001ade:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fcf6 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001afe:	f7ff ff9f 	bl	8001a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_ADC_MspInit+0x11c>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = WTA_ADC_Pin|LTA_ADC_Pin|SPEC_VIDEO_Pin;
 8001b32:	2338      	movs	r3, #56	; 0x38
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b36:	230b      	movs	r3, #11
 8001b38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f002 fcb0 	bl	80044ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_ADC_MspInit+0x124>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b86:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b88:	f002 fa5a 	bl	8004040 <HAL_DMA_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001b92:	f7ff ff55 	bl	8001a40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_ADC_MspInit+0x120>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3778      	adds	r7, #120	; 0x78
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	50040000 	.word	0x50040000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20000260 	.word	0x20000260
 8001bb8:	40020008 	.word	0x40020008

08001bbc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_COMP_MspInit+0x90>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d131      	bne.n	8001c42 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_COMP_MspInit+0x94>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_COMP_MspInit+0x94>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_COMP_MspInit+0x94>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    PA6     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = WTA_COMP_Pin;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(WTA_COMP_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f002 fc4e 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_COMP1;
 8001c20:	2306      	movs	r3, #6
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2e:	f002 fc3d 	bl	80044ac <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2040      	movs	r0, #64	; 0x40
 8001c38:	f002 f88f 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001c3c:	2040      	movs	r0, #64	; 0x40
 8001c3e:	f002 f8a8 	bl	8003d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40010200 	.word	0x40010200
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_DAC_MspInit+0x38>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10b      	bne.n	8001c7e <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_DAC_MspInit+0x3c>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_DAC_MspInit+0x3c>)
 8001c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_DAC_MspInit+0x3c>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40007400 	.word	0x40007400
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001cbe:	e010      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_TIM_Base_MspInit+0x64>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_TIM_Base_MspInit+0x60>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40001000 	.word	0x40001000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40001400 	.word	0x40001400

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09e      	sub	sp, #120	; 0x78
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	2254      	movs	r2, #84	; 0x54
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 fd2f 	bl	8006780 <memset>
  if(huart->Instance==USART2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <HAL_UART_MspInit+0xcc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d148      	bne.n	8001dbe <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fbd3 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d44:	f7ff fe7c 	bl	8001a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6593      	str	r3, [r2, #88]	; 0x58
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0xd0>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f002 fb89 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001dac:	2303      	movs	r3, #3
 8001dae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001db4:	4619      	mov	r1, r3
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f002 fb77 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3778      	adds	r7, #120	; 0x78
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f96c 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA1_Channel1_IRQHandler+0x10>)
 8001e2a:	f002 fa5f 	bl	80042ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000260 	.word	0x20000260

08001e38 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 21 and 22.
  */
void COMP_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <COMP_IRQHandler+0x10>)
 8001e3e:	f001 fe79 	bl	8003b34 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */


  /* USER CODE END COMP_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002a8 	.word	0x200002a8

08001e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
	return 1;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_kill>:

int _kill(int pid, int sig)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e66:	f004 fc61 	bl	800672c <__errno>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2216      	movs	r2, #22
 8001e6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_exit>:

void _exit (int status)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ffe7 	bl	8001e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8e:	e7fe      	b.n	8001e8e <_exit+0x12>

08001e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e00a      	b.n	8001eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea2:	f3af 8000 	nop.w
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf0      	blt.n	8001ea2 <_read+0x12>
	}

return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e009      	b.n	8001ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f851 	bl	8000f8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dbf1      	blt.n	8001edc <_write+0x12>
	}
	return len;
 8001ef8:	687b      	ldr	r3, [r7, #4]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_close>:

int _close(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	return -1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_isatty>:

int _isatty(int file)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
	return 1;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f004 fbc6 	bl	800672c <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <_sbrk+0x64>)
 8001fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20010000 	.word	0x20010000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	2000089c 	.word	0x2000089c
 8001fd4:	200008b8 	.word	0x200008b8

08001fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <SystemInit+0x20>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <SystemInit+0x20>)
 8001fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002000:	f7ff ffea 	bl	8001fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <LoopForever+0x6>)
  ldr r1, =_edata
 8002006:	490d      	ldr	r1, [pc, #52]	; (800203c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <LoopForever+0xe>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800201c:	4c0a      	ldr	r4, [pc, #40]	; (8002048 <LoopForever+0x16>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202a:	f004 fb85 	bl	8006738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800202e:	f7ff fa61 	bl	80014f4 <main>

08002032 <LoopForever>:

LoopForever:
    b LoopForever
 8002032:	e7fe      	b.n	8002032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002040:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 8002044:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002048:	200008b4 	.word	0x200008b4

0800204c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_IRQHandler>

0800204e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f001 fe73 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f80e 	bl	8002080 <HAL_InitTick>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	71fb      	strb	r3, [r7, #7]
 800206e:	e001      	b.n	8002074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002070:	f7ff fcec 	bl	8001a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002074:	79fb      	ldrb	r3, [r7, #7]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_InitTick+0x6c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d023      	beq.n	80020dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_InitTick+0x70>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_InitTick+0x6c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fe7f 	bl	8003dae <HAL_SYSTICK_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d809      	bhi.n	80020d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f001 fe49 	bl	8003d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_InitTick+0x74>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e007      	b.n	80020e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e004      	b.n	80020e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e001      	b.n	80020e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000000c 	.word	0x2000000c
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c
 800211c:	200008a0 	.word	0x200008a0

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200008a0 	.word	0x200008a0

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c

08002180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <LL_ADC_SetOffset+0x44>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	4313      	orrs	r3, r2
 8002218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	03fff000 	.word	0x03fff000

08002230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3330      	adds	r3, #48	; 0x30
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	211f      	movs	r1, #31
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	f003 011f 	and.w	r1, r3, #31
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	431a      	orrs	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3314      	adds	r3, #20
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	0e5b      	lsrs	r3, r3, #25
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	0d1b      	lsrs	r3, r3, #20
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2107      	movs	r1, #7
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	401a      	ands	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	0d1b      	lsrs	r3, r3, #20
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0318 	and.w	r3, r3, #24
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800238c:	40d9      	lsrs	r1, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	400b      	ands	r3, r1
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	0007ffff 	.word	0x0007ffff

080023b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6093      	str	r3, [r2, #8]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e8:	d101      	bne.n	80023ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800240c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002438:	d101      	bne.n	800243e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002488:	f043 0202 	orr.w	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <LL_ADC_IsEnabled+0x18>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <LL_ADC_IsEnabled+0x1a>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d101      	bne.n	80024da <LL_ADC_IsDisableOngoing+0x18>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_IsDisableOngoing+0x1a>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	f043 0210 	orr.w	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d101      	bne.n	8002550 <LL_ADC_REG_IsConversionOngoing+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800256e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d101      	bne.n	800259e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12c      	b.n	8002820 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fa5d 	bl	8001a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fef1 	bl	80023d4 <LL_ADC_IsDeepPowerDownEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fed7 	bl	80023b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff0c 	bl	8002424 <LL_ADC_IsInternalRegulatorEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fef0 	bl	80023fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_ADC_Init+0x27c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	4a82      	ldr	r2, [pc, #520]	; (800282c <HAL_ADC_Init+0x280>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002630:	e002      	b.n	8002638 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff feee 	bl	8002424 <LL_ADC_IsInternalRegulatorEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff62 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 8002674:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80c5 	bne.w	800280e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80c1 	bne.w	800280e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002694:	f043 0202 	orr.w	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fefb 	bl	800249c <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ac:	4860      	ldr	r0, [pc, #384]	; (8002830 <HAL_ADC_Init+0x284>)
 80026ae:	f7ff fef5 	bl	800249c <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	485d      	ldr	r0, [pc, #372]	; (8002834 <HAL_ADC_Init+0x288>)
 80026c0:	f7ff fd5e 	bl	8002180 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_ADC_Init+0x28c>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff feff 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 800273a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff20 	bl	8002586 <LL_ADC_INJ_IsConversionOngoing>
 8002746:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13a      	bne.n	80027ca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002758:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002760:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002784:	2b01      	cmp	r3, #1
 8002786:	d118      	bne.n	80027ba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	e007      	b.n	80027ca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10c      	bne.n	80027ec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f023 010f 	bic.w	r1, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ea:	e007      	b.n	80027fc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020f 	bic.w	r2, r2, #15
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
 800280c:	e007      	b.n	800281e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800281e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000004 	.word	0x20000004
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	50040000 	.word	0x50040000
 8002834:	50040300 	.word	0x50040300
 8002838:	fff0c007 	.word	0xfff0c007

0800283c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fe73 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d167      	bne.n	8002928 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADC_Start_DMA+0x2a>
 8002862:	2302      	movs	r3, #2
 8002864:	e063      	b.n	800292e <HAL_ADC_Start_DMA+0xf2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fd84 	bl	800337c <ADC_Enable>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14f      	bne.n	800291e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	f023 0206 	bic.w	r2, r3, #6
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_ADC_Start_DMA+0xfc>)
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_ADC_Start_DMA+0x100>)
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_ADC_Start_DMA+0x104>)
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	221c      	movs	r2, #28
 80028d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3340      	adds	r3, #64	; 0x40
 8002904:	4619      	mov	r1, r3
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f001 fc51 	bl	80041b0 <HAL_DMA_Start_IT>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fde6 	bl	80024e8 <LL_ADC_REG_StartConversion>
 800291c:	e006      	b.n	800292c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002926:	e001      	b.n	800292c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002928:	2302      	movs	r3, #2
 800292a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	080034ff 	.word	0x080034ff
 800293c:	080035d7 	.word	0x080035d7
 8002940:	080035f3 	.word	0x080035f3

08002944 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADC_Stop_DMA+0x16>
 8002956:	2302      	movs	r3, #2
 8002958:	e051      	b.n	80029fe <HAL_ADC_Stop_DMA+0xba>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002962:	2103      	movs	r1, #3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fc4d 	bl	8003204 <ADC_ConversionStop>
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d13f      	bne.n	80029f4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d10f      	bne.n	80029b2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fc6a 	bl	8004270 <HAL_DMA_Abort>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0210 	bic.w	r2, r2, #16
 80029c0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fd39 	bl	8003440 <ADC_Disable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e002      	b.n	80029da <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fd33 	bl	8003440 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0b6      	sub	sp, #216	; 0xd8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x22>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e3b9      	b.n	80031da <HAL_ADC_ConfigChannel+0x796>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fd60 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 839e 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d824      	bhi.n	8002ad2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	3b02      	subs	r3, #2
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d81b      	bhi.n	8002aca <HAL_ADC_ConfigChannel+0x86>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_ADC_ConfigChannel+0x54>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002ab1 	.word	0x08002ab1
 8002aa0:	08002ab9 	.word	0x08002ab9
 8002aa4:	08002ac1 	.word	0x08002ac1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	220c      	movs	r2, #12
 8002aac:	605a      	str	r2, [r3, #4]
          break;
 8002aae:	e011      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2212      	movs	r2, #18
 8002ab4:	605a      	str	r2, [r3, #4]
          break;
 8002ab6:	e00d      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2218      	movs	r2, #24
 8002abc:	605a      	str	r2, [r3, #4]
          break;
 8002abe:	e009      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac6:	605a      	str	r2, [r3, #4]
          break;
 8002ac8:	e004      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2206      	movs	r2, #6
 8002ace:	605a      	str	r2, [r3, #4]
          break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ad2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f7ff fbe9 	bl	80022b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd24 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 8002af0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fd44 	bl	8002586 <LL_ADC_INJ_IsConversionOngoing>
 8002afe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 81a6 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 81a1 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7ff fbf4 	bl	8002310 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00a      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6919      	ldr	r1, [r3, #16]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b5a:	f7ff fb45 	bl	80021e8 <LL_ADC_SetOffset>
 8002b5e:	e17b      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fb62 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x148>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fb57 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_ConfigChannel+0x186>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb4c 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x19e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	e018      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1d0>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e004      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb1b 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff faff 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x20e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff faf4 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	e01e      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x24c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fae9 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e004      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x264>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	e018      	b.n	8002cda <HAL_ADC_ConfigChannel+0x296>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e004      	b.n	8002cda <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fab8 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fa9c 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x2d4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2102      	movs	r1, #2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fa91 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	e01e      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x312>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fa86 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x32a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	e016      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x358>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e004      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa57 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2103      	movs	r1, #3
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fa3b 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x396>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2103      	movs	r1, #3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fa30 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	e017      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x3c6>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2103      	movs	r1, #3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fa25 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x3de>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0e9b      	lsrs	r3, r3, #26
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	e011      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x402>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e003      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d106      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fa02 	bl	800225c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fb1d 	bl	800249c <LL_ADC_IsEnabled>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 813f 	bne.w	80030e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7ff fa76 	bl	8002368 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a8e      	ldr	r2, [pc, #568]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	f040 8130 	bne.w	80030e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x46c>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e019      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x4a0>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	bf94      	ite	ls
 8002ede:	2301      	movls	r3, #1
 8002ee0:	2300      	movhi	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d079      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4c0>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f02:	e015      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x4ec>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	069b      	lsls	r3, r3, #26
 8002f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x50c>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	e017      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x53c>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e003      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	ea42 0103 	orr.w	r1, r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x562>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	051b      	lsls	r3, r3, #20
 8002fa4:	e018      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x594>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e003      	b.n	8002fca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	e080      	b.n	80030de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x5b4>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff6:	e015      	b.n	8003024 <HAL_ADC_ConfigChannel+0x5e0>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	069b      	lsls	r3, r3, #26
 8003020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x600>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	3301      	adds	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	e017      	b.n	8003074 <HAL_ADC_ConfigChannel+0x630>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	61fb      	str	r3, [r7, #28]
  return result;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	ea42 0103 	orr.w	r1, r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x65c>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	3b1e      	subs	r3, #30
 8003098:	051b      	lsls	r3, r3, #20
 800309a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309e:	e01d      	b.n	80030dc <HAL_ADC_ConfigChannel+0x698>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	613b      	str	r3, [r7, #16]
  return result;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e005      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x684>
 80030bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 021f 	and.w	r2, r3, #31
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	3b1e      	subs	r3, #30
 80030d6:	051b      	lsls	r3, r3, #20
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030dc:	430b      	orrs	r3, r1
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7ff f914 	bl	8002310 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_ADC_ConfigChannel+0x7a0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06c      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f4:	483c      	ldr	r0, [pc, #240]	; (80031e8 <HAL_ADC_ConfigChannel+0x7a4>)
 80030f6:	f7ff f869 	bl	80021cc <LL_ADC_GetCommonPathInternalCh>
 80030fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <HAL_ADC_ConfigChannel+0x7a8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d127      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800310c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d121      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a35      	ldr	r2, [pc, #212]	; (80031f0 <HAL_ADC_ConfigChannel+0x7ac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d157      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800311e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003122:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003126:	4619      	mov	r1, r3
 8003128:	482f      	ldr	r0, [pc, #188]	; (80031e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800312a:	f7ff f83c 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800312e:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3b01      	subs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003156:	e03a      	b.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_ADC_ConfigChannel+0x7b8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d113      	bne.n	800318a <HAL_ADC_ConfigChannel+0x746>
 8003162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d12a      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003180:	4619      	mov	r1, r3
 8003182:	4819      	ldr	r0, [pc, #100]	; (80031e8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003184:	f7ff f80f 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003188:	e021      	b.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_ADC_ConfigChannel+0x7bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d11c      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_ADC_ConfigChannel+0x7ac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d111      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031b2:	4619      	mov	r1, r3
 80031b4:	480c      	ldr	r0, [pc, #48]	; (80031e8 <HAL_ADC_ConfigChannel+0x7a4>)
 80031b6:	f7fe fff6 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
 80031ba:	e008      	b.n	80031ce <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	37d8      	adds	r7, #216	; 0xd8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	80080000 	.word	0x80080000
 80031e8:	50040300 	.word	0x50040300
 80031ec:	c7520000 	.word	0xc7520000
 80031f0:	50040000 	.word	0x50040000
 80031f4:	20000004 	.word	0x20000004
 80031f8:	053e2d63 	.word	0x053e2d63
 80031fc:	cb840000 	.word	0xcb840000
 8003200:	80000001 	.word	0x80000001

08003204 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f98c 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 8003220:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f9ad 	bl	8002586 <LL_ADC_INJ_IsConversionOngoing>
 800322c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8098 	beq.w	800336c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02a      	beq.n	80032a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7e5b      	ldrb	r3, [r3, #25]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d126      	bne.n	80032a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7e1b      	ldrb	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d122      	bne.n	80032a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800325a:	2301      	movs	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800325e:	e014      	b.n	800328a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4a45      	ldr	r2, [pc, #276]	; (8003378 <ADC_ConversionStop+0x174>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d90d      	bls.n	8003284 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e074      	b.n	800336e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d1e3      	bne.n	8003260 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d014      	beq.n	80032d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f944 	bl	8002538 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f901 	bl	80024c2 <LL_ADC_IsDisableOngoing>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f920 	bl	8002510 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d014      	beq.n	8003300 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f953 	bl	8002586 <LL_ADC_INJ_IsConversionOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f8e9 	bl	80024c2 <LL_ADC_IsDisableOngoing>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f92f 	bl	800255e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d005      	beq.n	8003312 <ADC_ConversionStop+0x10e>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d105      	bne.n	8003318 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800330c:	230c      	movs	r3, #12
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e005      	b.n	800331e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003312:	2308      	movs	r3, #8
 8003314:	617b      	str	r3, [r7, #20]
        break;
 8003316:	e002      	b.n	800331e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003318:	2304      	movs	r3, #4
 800331a:	617b      	str	r3, [r7, #20]
        break;
 800331c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800331e:	f7fe feff 	bl	8002120 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003324:	e01b      	b.n	800335e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003326:	f7fe fefb 	bl	8002120 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d914      	bls.n	800335e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e007      	b.n	800336e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1dc      	bne.n	8003326 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	a33fffff 	.word	0xa33fffff

0800337c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f887 	bl	800249c <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d14d      	bne.n	8003430 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <ADC_Enable+0xc0>)
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e039      	b.n	8003432 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f842 	bl	800244c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033c8:	f7fe feaa 	bl	8002120 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ce:	e028      	b.n	8003422 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f861 	bl	800249c <LL_ADC_IsEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f831 	bl	800244c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ea:	f7fe fe99 	bl	8002120 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d914      	bls.n	8003422 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00d      	beq.n	8003422 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f043 0210 	orr.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d1cf      	bne.n	80033d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	8000003f 	.word	0x8000003f

08003440 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f838 	bl	80024c2 <LL_ADC_IsDisableOngoing>
 8003452:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f81f 	bl	800249c <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d047      	beq.n	80034f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d144      	bne.n	80034f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030d 	and.w	r3, r3, #13
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fff9 	bl	8002474 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2203      	movs	r2, #3
 8003488:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800348a:	f7fe fe49 	bl	8002120 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003490:	e029      	b.n	80034e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0210 	orr.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e023      	b.n	80034f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ae:	f7fe fe37 	bl	8002120 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d914      	bls.n	80034e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0210 	orr.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e007      	b.n	80034f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1dc      	bne.n	80034ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d14b      	bne.n	80035b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe feab 	bl	8002292 <LL_ADC_REG_IsTriggerSourceSWStart>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d032      	beq.n	80035a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12b      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d11f      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
 8003574:	e018      	b.n	80035a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fa2c 	bl	8002a06 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ae:	e00e      	b.n	80035ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fa36 	bl	8002a2e <HAL_ADC_ErrorCallback>
}
 80035c2:	e004      	b.n	80035ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fa18 	bl	8002a1a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fa08 	bl	8002a2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <LL_ADC_StartCalibration>:
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_IsCalibrationOnGoing>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800366c:	d101      	bne.n	8003672 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_ADCEx_Calibration_Start+0x1c>
 8003698:	2302      	movs	r3, #2
 800369a:	e04d      	b.n	8003738 <HAL_ADCEx_Calibration_Start+0xb8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fecb 	bl	8003440 <ADC_Disable>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d136      	bne.n	8003722 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036bc:	f023 0302 	bic.w	r3, r3, #2
 80036c0:	f043 0202 	orr.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ffa9 	bl	8003626 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036d4:	e014      	b.n	8003700 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3301      	adds	r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80036e2:	d30d      	bcc.n	8003700 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f023 0312 	bic.w	r3, r3, #18
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e01b      	b.n	8003738 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ffa7 	bl	8003658 <LL_ADC_IsCalibrationOnGoing>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e2      	bne.n	80036d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
 8003720:	e005      	b.n	800372e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0210 	orr.w	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <LL_EXTI_EnableIT_0_31+0x20>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4904      	ldr	r1, [pc, #16]	; (8003760 <LL_EXTI_EnableIT_0_31+0x20>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40010400 	.word	0x40010400

08003764 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <LL_EXTI_DisableIT_0_31+0x24>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	43db      	mvns	r3, r3
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <LL_EXTI_DisableIT_0_31+0x24>)
 8003776:	4013      	ands	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010400 	.word	0x40010400

0800378c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40010400 	.word	0x40010400

080037b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	43db      	mvns	r3, r3
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010400 	.word	0x40010400

080037d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	43db      	mvns	r3, r3
 800380c:	4904      	ldr	r1, [pc, #16]	; (8003820 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800380e:	4013      	ands	r3, r2
 8003810:	608b      	str	r3, [r1, #8]

}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010400 	.word	0x40010400

08003824 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4904      	ldr	r1, [pc, #16]	; (8003844 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40010400 	.word	0x40010400

08003848 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	43db      	mvns	r3, r3
 8003858:	4904      	ldr	r1, [pc, #16]	; (800386c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800385a:	4013      	ands	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010400 	.word	0x40010400

08003870 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4013      	ands	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d101      	bne.n	800388a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40010400 	.word	0x40010400

0800389c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6153      	str	r3, [r2, #20]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e0d1      	b.n	8003a7c <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038e6:	d102      	bne.n	80038ee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e0c6      	b.n	8003a7c <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <HAL_COMP_Init+0x1cc>)
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <HAL_COMP_Init+0x1cc>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6613      	str	r3, [r2, #96]	; 0x60
 8003914:	4b5c      	ldr	r3, [pc, #368]	; (8003a88 <HAL_COMP_Init+0x1cc>)
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fe f94b 	bl	8001bbc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003930:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
#if defined (COMP_CSR_INMESEL)
#if defined (COMP_CSR_WINMODE)
    MODIFY_REG(hcomp->Instance->CSR,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_COMP_Init+0x1d0>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	430b      	orrs	r3, r1
 8003968:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003972:	d106      	bne.n	8003982 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_COMP_Init+0x1d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a45      	ldr	r2, [pc, #276]	; (8003a90 <HAL_COMP_Init+0x1d4>)
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e005      	b.n	800398e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003982:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <HAL_COMP_Init+0x1d4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a42      	ldr	r2, [pc, #264]	; (8003a90 <HAL_COMP_Init+0x1d4>)
 8003988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800398c:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_COMP_Init+0x10e>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <HAL_COMP_Init+0x1d8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_COMP_Init+0x1dc>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80039bc:	e002      	b.n	80039c4 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f9      	bne.n	80039be <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a33      	ldr	r2, [pc, #204]	; (8003a9c <HAL_COMP_Init+0x1e0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d102      	bne.n	80039da <HAL_COMP_Init+0x11e>
 80039d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039d8:	e001      	b.n	80039de <HAL_COMP_Init+0x122>
 80039da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039de:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d037      	beq.n	8003a5c <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80039f8:	6938      	ldr	r0, [r7, #16]
 80039fa:	f7ff feed 	bl	80037d8 <LL_EXTI_EnableRisingTrig_0_31>
 80039fe:	e002      	b.n	8003a06 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003a00:	6938      	ldr	r0, [r7, #16]
 8003a02:	f7ff fefb 	bl	80037fc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003a12:	6938      	ldr	r0, [r7, #16]
 8003a14:	f7ff ff06 	bl	8003824 <LL_EXTI_EnableFallingTrig_0_31>
 8003a18:	e002      	b.n	8003a20 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003a1a:	6938      	ldr	r0, [r7, #16]
 8003a1c:	f7ff ff14 	bl	8003848 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003a20:	6938      	ldr	r0, [r7, #16]
 8003a22:	f7ff ff3b 	bl	800389c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f7ff feaa 	bl	800378c <LL_EXTI_EnableEvent_0_31>
 8003a38:	e002      	b.n	8003a40 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003a3a:	6938      	ldr	r0, [r7, #16]
 8003a3c:	f7ff feb8 	bl	80037b0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003a4c:	6938      	ldr	r0, [r7, #16]
 8003a4e:	f7ff fe77 	bl	8003740 <LL_EXTI_EnableIT_0_31>
 8003a52:	e009      	b.n	8003a68 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f7ff fe85 	bl	8003764 <LL_EXTI_DisableIT_0_31>
 8003a5a:	e005      	b.n	8003a68 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003a5c:	6938      	ldr	r0, [r7, #16]
 8003a5e:	f7ff fea7 	bl	80037b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003a62:	6938      	ldr	r0, [r7, #16]
 8003a64:	f7ff fe7e 	bl	8003764 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	f9207c03 	.word	0xf9207c03
 8003a90:	40010204 	.word	0x40010204
 8003a94:	20000004 	.word	0x20000004
 8003a98:	053e2d63 	.word	0x053e2d63
 8003a9c:	40010200 	.word	0x40010200

08003aa0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e030      	b.n	8003b1e <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aca:	d102      	bne.n	8003ad2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e025      	b.n	8003b1e <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d11d      	bne.n	8003b1a <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_COMP_Start+0x8c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <HAL_COMP_Start+0x90>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	3301      	adds	r3, #1
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b0a:	e002      	b.n	8003b12 <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <HAL_COMP_Start+0x6c>
 8003b18:	e001      	b.n	8003b1e <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	20000004 	.word	0x20000004
 8003b30:	053e2d63 	.word	0x053e2d63

08003b34 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <HAL_COMP_IRQHandler+0x54>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d102      	bne.n	8003b4c <HAL_COMP_IRQHandler+0x18>
 8003b46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b4a:	e001      	b.n	8003b50 <HAL_COMP_IRQHandler+0x1c>
 8003b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff fe8c 	bl	8003870 <LL_EXTI_IsActiveFlag_0_31>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_COMP_IRQHandler+0x58>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8003b6a:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 8003b6e:	f7ff fe95 	bl	800389c <LL_EXTI_ClearFlag_0_31>
 8003b72:	e002      	b.n	8003b7a <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fe91 	bl	800389c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f808 	bl	8003b90 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40010200 	.word	0x40010200
 8003b8c:	40010204 	.word	0x40010204

08003b90 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	; (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	210f      	movs	r1, #15
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d6c:	f7ff ff3e 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	6978      	ldr	r0, [r7, #20]
 8003d78:	f7ff ff8e 	bl	8003c98 <NVIC_EncodePriority>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff5d 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff31 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffa2 	bl	8003d00 <SysTick_Config>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e014      	b.n	8003e02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	791b      	ldrb	r3, [r3, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fd ff33 	bl	8001c54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b088      	sub	sp, #32
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	795b      	ldrb	r3, [r3, #5]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_DAC_ConfigChannel+0x1c>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e107      	b.n	8004036 <HAL_DAC_ConfigChannel+0x22c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d174      	bne.n	8003f24 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003e3a:	f7fe f971 	bl	8002120 <HAL_GetTick>
 8003e3e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d134      	bne.n	8003eb0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e46:	e011      	b.n	8003e6c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e48:	f7fe f96a 	bl	8002120 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d90a      	bls.n	8003e6c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f043 0208 	orr.w	r2, r3, #8
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2203      	movs	r2, #3
 8003e66:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0e4      	b.n	8004036 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe f95c 	bl	8002138 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	6992      	ldr	r2, [r2, #24]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
 8003e8a:	e01e      	b.n	8003eca <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e8c:	f7fe f948 	bl	8002120 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d90a      	bls.n	8003eb0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f043 0208 	orr.w	r2, r3, #8
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0c2      	b.n	8004036 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	dbe8      	blt.n	8003e8c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fe f93c 	bl	8002138 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	6992      	ldr	r2, [r2, #24]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	ea02 0103 	and.w	r1, r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	21ff      	movs	r1, #255	; 0xff
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	ea02 0103 	and.w	r1, r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d11d      	bne.n	8003f68 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	221f      	movs	r2, #31
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	400a      	ands	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	22c0      	movs	r2, #192	; 0xc0
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e098      	b.n	8004184 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <HAL_DMA_Init+0x150>)
 800405a:	429a      	cmp	r2, r3
 800405c:	d80f      	bhi.n	800407e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_DMA_Init+0x154>)
 8004066:	4413      	add	r3, r2
 8004068:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <HAL_DMA_Init+0x158>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	009a      	lsls	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a48      	ldr	r2, [pc, #288]	; (800419c <HAL_DMA_Init+0x15c>)
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
 800407c:	e00e      	b.n	800409c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <HAL_DMA_Init+0x160>)
 8004086:	4413      	add	r3, r2
 8004088:	4a43      	ldr	r2, [pc, #268]	; (8004198 <HAL_DMA_Init+0x158>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a42      	ldr	r2, [pc, #264]	; (80041a4 <HAL_DMA_Init+0x164>)
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f6:	d039      	beq.n	800416c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <HAL_DMA_Init+0x15c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d11a      	bne.n	8004138 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_DMA_Init+0x168>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 031c 	and.w	r3, r3, #28
 800410e:	210f      	movs	r1, #15
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	4924      	ldr	r1, [pc, #144]	; (80041a8 <HAL_DMA_Init+0x168>)
 8004118:	4013      	ands	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_DMA_Init+0x168>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	f003 031c 	and.w	r3, r3, #28
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	491d      	ldr	r1, [pc, #116]	; (80041a8 <HAL_DMA_Init+0x168>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	e019      	b.n	800416c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <HAL_DMA_Init+0x16c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	f003 031c 	and.w	r3, r3, #28
 8004144:	210f      	movs	r1, #15
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	4917      	ldr	r1, [pc, #92]	; (80041ac <HAL_DMA_Init+0x16c>)
 800414e:	4013      	ands	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <HAL_DMA_Init+0x16c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f003 031c 	and.w	r3, r3, #28
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	4911      	ldr	r1, [pc, #68]	; (80041ac <HAL_DMA_Init+0x16c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40020407 	.word	0x40020407
 8004194:	bffdfff8 	.word	0xbffdfff8
 8004198:	cccccccd 	.word	0xcccccccd
 800419c:	40020000 	.word	0x40020000
 80041a0:	bffdfbf8 	.word	0xbffdfbf8
 80041a4:	40020400 	.word	0x40020400
 80041a8:	400200a8 	.word	0x400200a8
 80041ac:	400204a8 	.word	0x400204a8

080041b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_DMA_Start_IT+0x20>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e04b      	b.n	8004268 <HAL_DMA_Start_IT+0xb8>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d13a      	bne.n	800425a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f91e 	bl	800444a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 020e 	orr.w	r2, r2, #14
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e00f      	b.n	8004248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0204 	bic.w	r2, r2, #4
 8004236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 020a 	orr.w	r2, r2, #10
 8004246:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e005      	b.n	8004266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d008      	beq.n	800429a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e022      	b.n	80042e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 020e 	bic.w	r2, r2, #14
 80042a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f003 021c 	and.w	r2, r3, #28
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f202 	lsl.w	r2, r1, r2
 80042cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f003 031c 	and.w	r3, r3, #28
 800430c:	2204      	movs	r2, #4
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d026      	beq.n	8004366 <HAL_DMA_IRQHandler+0x7a>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2104      	movs	r1, #4
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d071      	beq.n	8004440 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004364:	e06c      	b.n	8004440 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f003 031c 	and.w	r3, r3, #28
 800436e:	2202      	movs	r2, #2
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02e      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xec>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d029      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 020a 	bic.w	r2, r2, #10
 80043a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f003 021c 	and.w	r2, r3, #28
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2102      	movs	r1, #2
 80043b8:	fa01 f202 	lsl.w	r2, r1, r2
 80043bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d038      	beq.n	8004440 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043d6:	e033      	b.n	8004440 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f003 031c 	and.w	r3, r3, #28
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02a      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d025      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 020e 	bic.w	r2, r2, #14
 8004404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f003 021c 	and.w	r2, r3, #28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004440:	bf00      	nop
 8004442:	bf00      	nop
}
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d108      	bne.n	800448e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448c:	e007      	b.n	800449e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	e148      	b.n	800474e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 813a 	beq.w	8004748 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d005      	beq.n	80044ec <HAL_GPIO_Init+0x40>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d130      	bne.n	800454e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004522:	2201      	movs	r2, #1
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0201 	and.w	r2, r3, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d017      	beq.n	800458a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d123      	bne.n	80045de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	08da      	lsrs	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3208      	adds	r2, #8
 80045d8:	6939      	ldr	r1, [r7, #16]
 80045da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0203 	and.w	r2, r3, #3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8094 	beq.w	8004748 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004620:	4b52      	ldr	r3, [pc, #328]	; (800476c <HAL_GPIO_Init+0x2c0>)
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	4a51      	ldr	r2, [pc, #324]	; (800476c <HAL_GPIO_Init+0x2c0>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6613      	str	r3, [r2, #96]	; 0x60
 800462c:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_GPIO_Init+0x2c0>)
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004638:	4a4d      	ldr	r2, [pc, #308]	; (8004770 <HAL_GPIO_Init+0x2c4>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	3302      	adds	r3, #2
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	220f      	movs	r2, #15
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004662:	d00d      	beq.n	8004680 <HAL_GPIO_Init+0x1d4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a43      	ldr	r2, [pc, #268]	; (8004774 <HAL_GPIO_Init+0x2c8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <HAL_GPIO_Init+0x1d0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a42      	ldr	r2, [pc, #264]	; (8004778 <HAL_GPIO_Init+0x2cc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_GPIO_Init+0x1cc>
 8004674:	2302      	movs	r3, #2
 8004676:	e004      	b.n	8004682 <HAL_GPIO_Init+0x1d6>
 8004678:	2307      	movs	r3, #7
 800467a:	e002      	b.n	8004682 <HAL_GPIO_Init+0x1d6>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_GPIO_Init+0x1d6>
 8004680:	2300      	movs	r3, #0
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	f002 0203 	and.w	r2, r2, #3
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	4093      	lsls	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004692:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_GPIO_Init+0x2c4>)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a0:	4b36      	ldr	r3, [pc, #216]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046c4:	4a2d      	ldr	r2, [pc, #180]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ee:	4a23      	ldr	r2, [pc, #140]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3301      	adds	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f aeaf 	bne.w	80044bc <HAL_GPIO_Init+0x10>
  }
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40021000 	.word	0x40021000
 8004770:	40010000 	.word	0x40010000
 8004774:	48000400 	.word	0x48000400
 8004778:	48000800 	.word	0x48000800
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004790:	787b      	ldrb	r3, [r7, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800479c:	e002      	b.n	80047a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000

080047ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fa:	d130      	bne.n	800485e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047fc:	4b23      	ldr	r3, [pc, #140]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d038      	beq.n	800487c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004812:	4a1e      	ldr	r2, [pc, #120]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004818:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2232      	movs	r2, #50	; 0x32
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0c9b      	lsrs	r3, r3, #18
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004830:	e002      	b.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b01      	subs	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004838:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d102      	bne.n	800484c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f2      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d110      	bne.n	800487c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d007      	beq.n	800487c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004874:	4a05      	ldr	r2, [pc, #20]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800487a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40007000 	.word	0x40007000
 8004890:	20000004 	.word	0x20000004
 8004894:	431bde83 	.word	0x431bde83

08004898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f000 bc10 	b.w	80050cc <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ac:	4b96      	ldr	r3, [pc, #600]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b6:	4b94      	ldr	r3, [pc, #592]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80e4 	beq.w	8004a96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_RCC_OscConfig+0x4c>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	f040 808b 	bne.w	80049f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	f040 8087 	bne.w	80049f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048e4:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_OscConfig+0x64>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e3e7      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	4b81      	ldr	r3, [pc, #516]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_RCC_OscConfig+0x7e>
 800490c:	4b7e      	ldr	r3, [pc, #504]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004914:	e005      	b.n	8004922 <HAL_RCC_OscConfig+0x8a>
 8004916:	4b7c      	ldr	r3, [pc, #496]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	4293      	cmp	r3, r2
 8004924:	d223      	bcs.n	800496e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fd7a 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e3c8      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493a:	4b73      	ldr	r3, [pc, #460]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a72      	ldr	r2, [pc, #456]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	496d      	ldr	r1, [pc, #436]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004958:	4b6b      	ldr	r3, [pc, #428]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	4968      	ldr	r1, [pc, #416]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e025      	b.n	80049ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800496e:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a65      	ldr	r2, [pc, #404]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b63      	ldr	r3, [pc, #396]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	4960      	ldr	r1, [pc, #384]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800498c:	4b5e      	ldr	r3, [pc, #376]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	495b      	ldr	r1, [pc, #364]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fd3a 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e388      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ba:	f000 fc6f 	bl	800529c <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	4950      	ldr	r1, [pc, #320]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <HAL_RCC_OscConfig+0x278>)
 80049d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049da:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fb4e 	bl	8002080 <HAL_InitTick>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d052      	beq.n	8004a94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	e36c      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d032      	beq.n	8004a60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049fa:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a42      	ldr	r2, [pc, #264]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a06:	f7fd fb8b 	bl	8002120 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a0e:	f7fd fb87 	bl	8002120 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e355      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a20:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a2c:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a32:	f043 0308 	orr.w	r3, r3, #8
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4930      	ldr	r1, [pc, #192]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a4a:	4b2f      	ldr	r3, [pc, #188]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	492b      	ldr	r1, [pc, #172]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
 8004a5e:	e01a      	b.n	8004a96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a60:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fb58 	bl	8002120 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a74:	f7fd fb54 	bl	8002120 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e322      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1dc>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d073      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x21c>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d10e      	bne.n	8004acc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d10b      	bne.n	8004acc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d063      	beq.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d15f      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e2ff      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e025      	b.n	8004b30 <HAL_RCC_OscConfig+0x298>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aec:	d114      	bne.n	8004b18 <HAL_RCC_OscConfig+0x280>
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a02      	ldr	r2, [pc, #8]	; (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e013      	b.n	8004b30 <HAL_RCC_OscConfig+0x298>
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	08009268 	.word	0x08009268
 8004b10:	20000004 	.word	0x20000004
 8004b14:	20000008 	.word	0x20000008
 8004b18:	4ba0      	ldr	r3, [pc, #640]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a9f      	ldr	r2, [pc, #636]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a9c      	ldr	r2, [pc, #624]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd faf2 	bl	8002120 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fd faee 	bl	8002120 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e2bc      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b52:	4b92      	ldr	r3, [pc, #584]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x2a8>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fade 	bl	8002120 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fd fada 	bl	8002120 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e2a8      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x2d0>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d060      	beq.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x310>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d119      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d116      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba8:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x328>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e285      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	4973      	ldr	r1, [pc, #460]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd4:	e040      	b.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d023      	beq.n	8004c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bde:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd fa99 	bl	8002120 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fa95 	bl	8002120 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e263      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	4b65      	ldr	r3, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	495f      	ldr	r1, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
 8004c24:	e018      	b.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b5d      	ldr	r3, [pc, #372]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a5c      	ldr	r2, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd fa75 	bl	8002120 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fa71 	bl	8002120 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e23f      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c4c:	4b53      	ldr	r3, [pc, #332]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d03c      	beq.n	8004cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01c      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6c:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c72:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd fa50 	bl	8002120 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fd fa4c 	bl	8002120 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e21a      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c96:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ef      	beq.n	8004c84 <HAL_RCC_OscConfig+0x3ec>
 8004ca4:	e01b      	b.n	8004cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cac:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb6:	f7fd fa33 	bl	8002120 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbe:	f7fd fa2f 	bl	8002120 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e1fd      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ef      	bne.n	8004cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a6 	beq.w	8004e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6593      	str	r3, [r2, #88]	; 0x58
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d14:	2301      	movs	r3, #1
 8004d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCC_OscConfig+0x508>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d118      	bne.n	8004d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_OscConfig+0x508>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_RCC_OscConfig+0x508>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d30:	f7fd f9f6 	bl	8002120 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d38:	f7fd f9f2 	bl	8002120 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1c0      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <HAL_RCC_OscConfig+0x508>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d108      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4d8>
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d6e:	e029      	b.n	8004dc4 <HAL_RCC_OscConfig+0x52c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d115      	bne.n	8004da4 <HAL_RCC_OscConfig+0x50c>
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	4a07      	ldr	r2, [pc, #28]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	4a03      	ldr	r2, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d98:	e014      	b.n	8004dc4 <HAL_RCC_OscConfig+0x52c>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40007000 	.word	0x40007000
 8004da4:	4b9a      	ldr	r3, [pc, #616]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	4a99      	ldr	r2, [pc, #612]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db4:	4b96      	ldr	r3, [pc, #600]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a95      	ldr	r2, [pc, #596]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd f9a8 	bl	8002120 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fd f9a4 	bl	8002120 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e170      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dea:	4b89      	ldr	r3, [pc, #548]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ed      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x53c>
 8004df8:	e015      	b.n	8004e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fd f991 	bl	8002120 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fd f98d 	bl	8002120 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e159      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e18:	4b7d      	ldr	r3, [pc, #500]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ed      	bne.n	8004e02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e26:	7ffb      	ldrb	r3, [r7, #31]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2c:	4b78      	ldr	r3, [pc, #480]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a77      	ldr	r2, [pc, #476]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d03c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01c      	beq.n	8004e86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e4c:	4b70      	ldr	r3, [pc, #448]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e52:	4a6f      	ldr	r2, [pc, #444]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fd f960 	bl	8002120 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e64:	f7fd f95c 	bl	8002120 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e12a      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e76:	4b66      	ldr	r3, [pc, #408]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ef      	beq.n	8004e64 <HAL_RCC_OscConfig+0x5cc>
 8004e84:	e01b      	b.n	8004ebe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e8c:	4a60      	ldr	r2, [pc, #384]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fd f943 	bl	8002120 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9e:	f7fd f93f 	bl	8002120 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e10d      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eb0:	4b57      	ldr	r3, [pc, #348]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ef      	bne.n	8004e9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8101 	beq.w	80050ca <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f040 80c9 	bne.w	8005064 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ed2:	4b4f      	ldr	r3, [pc, #316]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0203 	and.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d12c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d123      	bne.n	8004f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d11b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d113      	bne.n	8004f40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d109      	bne.n	8004f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d06b      	beq.n	8005018 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d062      	beq.n	800500c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f46:	4b32      	ldr	r3, [pc, #200]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e0ba      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f56:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f62:	f7fd f8dd 	bl	8002120 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd f8d9 	bl	8002120 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e0a7      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_RCC_OscConfig+0x77c>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fa2:	0212      	lsls	r2, r2, #8
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004faa:	0852      	lsrs	r2, r2, #1
 8004fac:	3a01      	subs	r2, #1
 8004fae:	0552      	lsls	r2, r2, #21
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fb6:	0852      	lsrs	r2, r2, #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	0652      	lsls	r2, r2, #25
 8004fbc:	4311      	orrs	r1, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc2:	06d2      	lsls	r2, r2, #27
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	4912      	ldr	r1, [pc, #72]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8004fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fe4:	f7fd f89c 	bl	8002120 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd f898 	bl	8002120 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e066      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_RCC_OscConfig+0x778>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800500a:	e05e      	b.n	80050ca <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e05d      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
 8005010:	40021000 	.word	0x40021000
 8005014:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005018:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d152      	bne.n	80050ca <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 800502a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a27      	ldr	r2, [pc, #156]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800503a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800503c:	f7fd f870 	bl	8002120 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd f86c 	bl	8002120 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e03a      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005056:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x7ac>
 8005062:	e032      	b.n	80050ca <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d02d      	beq.n	80050c6 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005074:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 8005094:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd f83f 	bl	8002120 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fd f83b 	bl	8002120 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e009      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x83c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <HAL_RCC_OscConfig+0x80e>
 80050c4:	e001      	b.n	80050ca <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0c8      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050ec:	4b66      	ldr	r3, [pc, #408]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d910      	bls.n	800511c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0207 	bic.w	r2, r3, #7
 8005102:	4961      	ldr	r1, [pc, #388]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b5f      	ldr	r3, [pc, #380]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0b0      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d04c      	beq.n	80051c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d107      	bne.n	8005140 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005130:	4b56      	ldr	r3, [pc, #344]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d121      	bne.n	8005180 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e09e      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d107      	bne.n	8005158 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d115      	bne.n	8005180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e092      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e086      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e07e      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005180:	4b42      	ldr	r3, [pc, #264]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 0203 	bic.w	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	493f      	ldr	r1, [pc, #252]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005192:	f7fc ffc5 	bl	8002120 <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519a:	f7fc ffc1 	bl	8002120 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e066      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b0:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 020c 	and.w	r2, r3, #12
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	429a      	cmp	r2, r3
 80051c0:	d1eb      	bne.n	800519a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ce:	4b2f      	ldr	r3, [pc, #188]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	492c      	ldr	r1, [pc, #176]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e0:	4b29      	ldr	r3, [pc, #164]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d210      	bcs.n	8005210 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b26      	ldr	r3, [pc, #152]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 0207 	bic.w	r2, r3, #7
 80051f6:	4924      	ldr	r1, [pc, #144]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b22      	ldr	r3, [pc, #136]	; (8005288 <HAL_RCC_ClockConfig+0x1b0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e036      	b.n	800527e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4918      	ldr	r1, [pc, #96]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523a:	4b14      	ldr	r3, [pc, #80]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4910      	ldr	r1, [pc, #64]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800524e:	f000 f825 	bl	800529c <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_RCC_ClockConfig+0x1b4>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	490c      	ldr	r1, [pc, #48]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800526e:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc ff04 	bl	8002080 <HAL_InitTick>
 8005278:	4603      	mov	r3, r0
 800527a:	72fb      	strb	r3, [r7, #11]

  return status;
 800527c:	7afb      	ldrb	r3, [r7, #11]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	08009268 	.word	0x08009268
 8005294:	20000004 	.word	0x20000004
 8005298:	20000008 	.word	0x20000008

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x34>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d121      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d11e      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052d0:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e005      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052ec:	4b2d      	ldr	r3, [pc, #180]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d102      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005314:	4b25      	ldr	r3, [pc, #148]	; (80053ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e004      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d101      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005320:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d134      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d003      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0xa6>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d003      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0xac>
 8005340:	e005      	b.n	800534e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005344:	617b      	str	r3, [r7, #20]
      break;
 8005346:	e005      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800534a:	617b      	str	r3, [r7, #20]
      break;
 800534c:	e002      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	617b      	str	r3, [r7, #20]
      break;
 8005352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005354:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	3301      	adds	r3, #1
 8005360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	fb03 f202 	mul.w	r2, r3, r2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	0e5b      	lsrs	r3, r3, #25
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	3301      	adds	r3, #1
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005394:	69bb      	ldr	r3, [r7, #24]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3724      	adds	r7, #36	; 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	08009280 	.word	0x08009280
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	007a1200 	.word	0x007a1200

080053b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000004 	.word	0x20000004

080053cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d0:	f7ff fff0 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	08009278 	.word	0x08009278

080053f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053fc:	f7ff ffda 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0adb      	lsrs	r3, r3, #11
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	08009278 	.word	0x08009278

08005424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005430:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800543c:	f7ff f9c8 	bl	80047d0 <HAL_PWREx_GetVoltageRange>
 8005440:	6178      	str	r0, [r7, #20]
 8005442:	e014      	b.n	800546e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6593      	str	r3, [r2, #88]	; 0x58
 8005450:	4b22      	ldr	r3, [pc, #136]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800545c:	f7ff f9b8 	bl	80047d0 <HAL_PWREx_GetVoltageRange>
 8005460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	d10b      	bne.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d919      	bls.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2ba0      	cmp	r3, #160	; 0xa0
 8005480:	d902      	bls.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005482:	2302      	movs	r3, #2
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e013      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005488:	2301      	movs	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e010      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d902      	bls.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005494:	2303      	movs	r3, #3
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e00a      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d102      	bne.n	80054a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054a0:	2302      	movs	r3, #2
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e004      	b.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d101      	bne.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054ac:	2301      	movs	r3, #1
 80054ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 0207 	bic.w	r2, r3, #7
 80054b8:	4909      	ldr	r1, [pc, #36]	; (80054e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d001      	beq.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40021000 	.word	0x40021000
 80054e0:	40022000 	.word	0x40022000

080054e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ec:	2300      	movs	r3, #0
 80054ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f0:	2300      	movs	r3, #0
 80054f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d031      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005508:	d01a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800550a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800550e:	d814      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005518:	d10f      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800551a:	4b5d      	ldr	r3, [pc, #372]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	4a5c      	ldr	r2, [pc, #368]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005526:	e00c      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f9de 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005538:	e003      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	74fb      	strb	r3, [r7, #19]
      break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005548:	4b51      	ldr	r3, [pc, #324]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	494e      	ldr	r1, [pc, #312]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800555e:	e001      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 809e 	beq.w	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005572:	2300      	movs	r3, #0
 8005574:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005576:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	4b40      	ldr	r3, [pc, #256]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
 8005598:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055a8:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a39      	ldr	r2, [pc, #228]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b4:	f7fc fdb4 	bl	8002120 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ba:	e009      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055bc:	f7fc fdb0 	bl	8002120 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d902      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	74fb      	strb	r3, [r7, #19]
        break;
 80055ce:	e005      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055d0:	4b30      	ldr	r3, [pc, #192]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ef      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d15a      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d019      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005608:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005610:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800562a:	4a19      	ldr	r2, [pc, #100]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d016      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fc fd70 	bl	8002120 <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005642:	e00b      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f7fc fd6c 	bl	8002120 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d902      	bls.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	74fb      	strb	r3, [r7, #19]
            break;
 800565a:	e006      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0ec      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	4904      	ldr	r1, [pc, #16]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005686:	e009      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800569c:	7c7b      	ldrb	r3, [r7, #17]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a2:	4b8a      	ldr	r3, [pc, #552]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	4a89      	ldr	r2, [pc, #548]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ba:	4b84      	ldr	r3, [pc, #528]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f023 0203 	bic.w	r2, r3, #3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4980      	ldr	r1, [pc, #512]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056dc:	4b7b      	ldr	r3, [pc, #492]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 020c 	bic.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	4978      	ldr	r1, [pc, #480]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056fe:	4b73      	ldr	r3, [pc, #460]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	496f      	ldr	r1, [pc, #444]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005720:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	4967      	ldr	r1, [pc, #412]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005742:	4b62      	ldr	r3, [pc, #392]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	495e      	ldr	r1, [pc, #376]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005764:	4b59      	ldr	r3, [pc, #356]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	4956      	ldr	r1, [pc, #344]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	494d      	ldr	r1, [pc, #308]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d028      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a8:	4b48      	ldr	r3, [pc, #288]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4945      	ldr	r1, [pc, #276]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b40      	ldr	r3, [pc, #256]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a3f      	ldr	r2, [pc, #252]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
 80057d4:	e011      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057de:	d10c      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	2101      	movs	r1, #1
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f882 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d028      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005806:	4b31      	ldr	r3, [pc, #196]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	492d      	ldr	r1, [pc, #180]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005824:	d106      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005826:	4b29      	ldr	r3, [pc, #164]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4a28      	ldr	r2, [pc, #160]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800582c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005830:	60d3      	str	r3, [r2, #12]
 8005832:	e011      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583c:	d10c      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f853 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01c      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	4916      	ldr	r1, [pc, #88]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005882:	d10c      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f830 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058aa:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b8:	4904      	ldr	r1, [pc, #16]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a04      	ldr	r2, [pc, #16]	; (80058ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	6013      	str	r3, [r2, #0]
}
 80058e0:	bf00      	nop
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000

080058f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058fe:	4b74      	ldr	r3, [pc, #464]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800590a:	4b71      	ldr	r3, [pc, #452]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0203 	and.w	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d10d      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
       ||
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005922:	4b6b      	ldr	r3, [pc, #428]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
       ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d047      	beq.n	80059c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	e044      	b.n	80059c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d018      	beq.n	8005976 <RCCEx_PLLSAI1_Config+0x86>
 8005944:	2b03      	cmp	r3, #3
 8005946:	d825      	bhi.n	8005994 <RCCEx_PLLSAI1_Config+0xa4>
 8005948:	2b01      	cmp	r3, #1
 800594a:	d002      	beq.n	8005952 <RCCEx_PLLSAI1_Config+0x62>
 800594c:	2b02      	cmp	r3, #2
 800594e:	d009      	beq.n	8005964 <RCCEx_PLLSAI1_Config+0x74>
 8005950:	e020      	b.n	8005994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005952:	4b5f      	ldr	r3, [pc, #380]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005962:	e01a      	b.n	800599a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005964:	4b5a      	ldr	r3, [pc, #360]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	2b00      	cmp	r3, #0
 800596e:	d116      	bne.n	800599e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005974:	e013      	b.n	800599e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005976:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10f      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005982:	4b53      	ldr	r3, [pc, #332]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005992:	e006      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      break;
 8005998:	e004      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059aa:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	430b      	orrs	r3, r1
 80059c0:	4943      	ldr	r1, [pc, #268]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d17c      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059cc:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3f      	ldr	r2, [pc, #252]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d8:	f7fc fba2 	bl	8002120 <HAL_GetTick>
 80059dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059de:	e009      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e0:	f7fc fb9e 	bl	8002120 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d902      	bls.n	80059f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	73fb      	strb	r3, [r7, #15]
        break;
 80059f2:	e005      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ef      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d15f      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6892      	ldr	r2, [r2, #8]
 8005a1c:	0211      	lsls	r1, r2, #8
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	06d2      	lsls	r2, r2, #27
 8005a24:	430a      	orrs	r2, r1
 8005a26:	492a      	ldr	r1, [pc, #168]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	610b      	str	r3, [r1, #16]
 8005a2c:	e027      	b.n	8005a7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d112      	bne.n	8005a5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a34:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6892      	ldr	r2, [r2, #8]
 8005a44:	0211      	lsls	r1, r2, #8
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6912      	ldr	r2, [r2, #16]
 8005a4a:	0852      	lsrs	r2, r2, #1
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	0552      	lsls	r2, r2, #21
 8005a50:	430a      	orrs	r2, r1
 8005a52:	491f      	ldr	r1, [pc, #124]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
 8005a58:	e011      	b.n	8005a7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6892      	ldr	r2, [r2, #8]
 8005a6a:	0211      	lsls	r1, r2, #8
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6952      	ldr	r2, [r2, #20]
 8005a70:	0852      	lsrs	r2, r2, #1
 8005a72:	3a01      	subs	r2, #1
 8005a74:	0652      	lsls	r2, r2, #25
 8005a76:	430a      	orrs	r2, r1
 8005a78:	4915      	ldr	r1, [pc, #84]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8a:	f7fc fb49 	bl	8002120 <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a90:	e009      	b.n	8005aa6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a92:	f7fc fb45 	bl	8002120 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d902      	bls.n	8005aa6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	73fb      	strb	r3, [r7, #15]
          break;
 8005aa4:	e005      	b.n	8005ab2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0ef      	beq.n	8005a92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	4903      	ldr	r1, [pc, #12]	; (8005ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e049      	b.n	8005b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc f8ca 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 f882 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e033      	b.n	8005c04 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <HAL_TIM_Base_Start+0x8c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_TIM_Base_Start+0x3e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb6:	d004      	beq.n	8005bc2 <HAL_TIM_Base_Start+0x3e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <HAL_TIM_Base_Start+0x90>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d115      	bne.n	8005bee <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <HAL_TIM_Base_Start+0x94>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d015      	beq.n	8005c00 <HAL_TIM_Base_Start+0x7c>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bda:	d011      	beq.n	8005c00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	e008      	b.n	8005c00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e000      	b.n	8005c02 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40014000 	.word	0x40014000
 8005c18:	00010007 	.word	0x00010007

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <TIM_Base_SetConfig+0xbc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0x20>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d108      	bne.n	8005c4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <TIM_Base_SetConfig+0xbc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_Base_SetConfig+0x52>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0x52>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <TIM_Base_SetConfig+0xc0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0x52>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <TIM_Base_SetConfig+0xc4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a0c      	ldr	r2, [pc, #48]	; (8005cd8 <TIM_Base_SetConfig+0xbc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d007      	beq.n	8005cbc <TIM_Base_SetConfig+0xa0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a0b      	ldr	r2, [pc, #44]	; (8005cdc <TIM_Base_SetConfig+0xc0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_Base_SetConfig+0xa0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <TIM_Base_SetConfig+0xc4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e04f      	b.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10c      	bne.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40014000 	.word	0x40014000

08005db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e040      	b.n	8005e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fb ff92 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2224      	movs	r2, #36	; 0x24
 8005ddc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8c0 	bl	8005f74 <UART_SetConfig>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e022      	b.n	8005e44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fae0 	bl	80063cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb67 	bl	8006510 <UART_CheckIdleState>
 8005e42:	4603      	mov	r3, r0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	f040 8082 	bne.w	8005f6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_Transmit+0x26>
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e07a      	b.n	8005f6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_UART_Transmit+0x38>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e073      	b.n	8005f6c <HAL_UART_Transmit+0x120>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2221      	movs	r2, #33	; 0x21
 8005e98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e9a:	f7fc f941 	bl	8002120 <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d108      	bne.n	8005ecc <HAL_UART_Transmit+0x80>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e003      	b.n	8005ed4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005edc:	e02d      	b.n	8005f3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2180      	movs	r1, #128	; 0x80
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fb5a 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e039      	b.n	8005f6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	3302      	adds	r3, #2
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	e008      	b.n	8005f28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1cb      	bne.n	8005ede <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2140      	movs	r1, #64	; 0x40
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fb26 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e005      	b.n	8005f6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b08a      	sub	sp, #40	; 0x28
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4bb4      	ldr	r3, [pc, #720]	; (8006274 <UART_SetConfig+0x300>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4aa9      	ldr	r2, [pc, #676]	; (8006278 <UART_SetConfig+0x304>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4aa0      	ldr	r2, [pc, #640]	; (800627c <UART_SetConfig+0x308>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d126      	bne.n	800604c <UART_SetConfig+0xd8>
 8005ffe:	4ba0      	ldr	r3, [pc, #640]	; (8006280 <UART_SetConfig+0x30c>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b03      	cmp	r3, #3
 800600a:	d81b      	bhi.n	8006044 <UART_SetConfig+0xd0>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0xa0>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006025 	.word	0x08006025
 8006018:	08006035 	.word	0x08006035
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800603d 	.word	0x0800603d
 8006024:	2301      	movs	r3, #1
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602a:	e080      	b.n	800612e <UART_SetConfig+0x1ba>
 800602c:	2302      	movs	r3, #2
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e07c      	b.n	800612e <UART_SetConfig+0x1ba>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e078      	b.n	800612e <UART_SetConfig+0x1ba>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006042:	e074      	b.n	800612e <UART_SetConfig+0x1ba>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604a:	e070      	b.n	800612e <UART_SetConfig+0x1ba>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a8c      	ldr	r2, [pc, #560]	; (8006284 <UART_SetConfig+0x310>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d138      	bne.n	80060c8 <UART_SetConfig+0x154>
 8006056:	4b8a      	ldr	r3, [pc, #552]	; (8006280 <UART_SetConfig+0x30c>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f003 030c 	and.w	r3, r3, #12
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d82d      	bhi.n	80060c0 <UART_SetConfig+0x14c>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0xf8>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	080060a1 	.word	0x080060a1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060c1 	.word	0x080060c1
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a6:	e042      	b.n	800612e <UART_SetConfig+0x1ba>
 80060a8:	2302      	movs	r3, #2
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ae:	e03e      	b.n	800612e <UART_SetConfig+0x1ba>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e03a      	b.n	800612e <UART_SetConfig+0x1ba>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e036      	b.n	800612e <UART_SetConfig+0x1ba>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e032      	b.n	800612e <UART_SetConfig+0x1ba>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a6a      	ldr	r2, [pc, #424]	; (8006278 <UART_SetConfig+0x304>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d12a      	bne.n	8006128 <UART_SetConfig+0x1b4>
 80060d2:	4b6b      	ldr	r3, [pc, #428]	; (8006280 <UART_SetConfig+0x30c>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e0:	d01a      	beq.n	8006118 <UART_SetConfig+0x1a4>
 80060e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e6:	d81b      	bhi.n	8006120 <UART_SetConfig+0x1ac>
 80060e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ec:	d00c      	beq.n	8006108 <UART_SetConfig+0x194>
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d815      	bhi.n	8006120 <UART_SetConfig+0x1ac>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <UART_SetConfig+0x18c>
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fc:	d008      	beq.n	8006110 <UART_SetConfig+0x19c>
 80060fe:	e00f      	b.n	8006120 <UART_SetConfig+0x1ac>
 8006100:	2300      	movs	r3, #0
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006106:	e012      	b.n	800612e <UART_SetConfig+0x1ba>
 8006108:	2302      	movs	r3, #2
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610e:	e00e      	b.n	800612e <UART_SetConfig+0x1ba>
 8006110:	2304      	movs	r3, #4
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006116:	e00a      	b.n	800612e <UART_SetConfig+0x1ba>
 8006118:	2308      	movs	r3, #8
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611e:	e006      	b.n	800612e <UART_SetConfig+0x1ba>
 8006120:	2310      	movs	r3, #16
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006126:	e002      	b.n	800612e <UART_SetConfig+0x1ba>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a51      	ldr	r2, [pc, #324]	; (8006278 <UART_SetConfig+0x304>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d17a      	bne.n	800622e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800613c:	2b08      	cmp	r3, #8
 800613e:	d824      	bhi.n	800618a <UART_SetConfig+0x216>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0x1d4>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	0800616d 	.word	0x0800616d
 800614c:	0800618b 	.word	0x0800618b
 8006150:	08006175 	.word	0x08006175
 8006154:	0800618b 	.word	0x0800618b
 8006158:	0800617b 	.word	0x0800617b
 800615c:	0800618b 	.word	0x0800618b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800618b 	.word	0x0800618b
 8006168:	08006183 	.word	0x08006183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800616c:	f7ff f92e 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8006170:	61f8      	str	r0, [r7, #28]
        break;
 8006172:	e010      	b.n	8006196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006174:	4b44      	ldr	r3, [pc, #272]	; (8006288 <UART_SetConfig+0x314>)
 8006176:	61fb      	str	r3, [r7, #28]
        break;
 8006178:	e00d      	b.n	8006196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800617a:	f7ff f88f 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800617e:	61f8      	str	r0, [r7, #28]
        break;
 8006180:	e009      	b.n	8006196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006186:	61fb      	str	r3, [r7, #28]
        break;
 8006188:	e005      	b.n	8006196 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8107 	beq.w	80063ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d305      	bcc.n	80061ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d903      	bls.n	80061c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061c0:	e0f4      	b.n	80063ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2200      	movs	r2, #0
 80061c6:	461c      	mov	r4, r3
 80061c8:	4615      	mov	r5, r2
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	022b      	lsls	r3, r5, #8
 80061d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061d8:	0222      	lsls	r2, r4, #8
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	6849      	ldr	r1, [r1, #4]
 80061de:	0849      	lsrs	r1, r1, #1
 80061e0:	2000      	movs	r0, #0
 80061e2:	4688      	mov	r8, r1
 80061e4:	4681      	mov	r9, r0
 80061e6:	eb12 0a08 	adds.w	sl, r2, r8
 80061ea:	eb43 0b09 	adc.w	fp, r3, r9
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fc:	4650      	mov	r0, sl
 80061fe:	4659      	mov	r1, fp
 8006200:	f7fa fd42 	bl	8000c88 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4613      	mov	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006212:	d308      	bcc.n	8006226 <UART_SetConfig+0x2b2>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d204      	bcs.n	8006226 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	60da      	str	r2, [r3, #12]
 8006224:	e0c2      	b.n	80063ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800622c:	e0be      	b.n	80063ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006236:	d16a      	bne.n	800630e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800623c:	2b08      	cmp	r3, #8
 800623e:	d834      	bhi.n	80062aa <UART_SetConfig+0x336>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x2d4>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800626d 	.word	0x0800626d
 800624c:	0800628d 	.word	0x0800628d
 8006250:	08006295 	.word	0x08006295
 8006254:	080062ab 	.word	0x080062ab
 8006258:	0800629b 	.word	0x0800629b
 800625c:	080062ab 	.word	0x080062ab
 8006260:	080062ab 	.word	0x080062ab
 8006264:	080062ab 	.word	0x080062ab
 8006268:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7ff f8ae 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8006270:	61f8      	str	r0, [r7, #28]
        break;
 8006272:	e020      	b.n	80062b6 <UART_SetConfig+0x342>
 8006274:	efff69f3 	.word	0xefff69f3
 8006278:	40008000 	.word	0x40008000
 800627c:	40013800 	.word	0x40013800
 8006280:	40021000 	.word	0x40021000
 8006284:	40004400 	.word	0x40004400
 8006288:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7ff f8b4 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 8006290:	61f8      	str	r0, [r7, #28]
        break;
 8006292:	e010      	b.n	80062b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <UART_SetConfig+0x454>)
 8006296:	61fb      	str	r3, [r7, #28]
        break;
 8006298:	e00d      	b.n	80062b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fe ffff 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800629e:	61f8      	str	r0, [r7, #28]
        break;
 80062a0:	e009      	b.n	80062b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	61fb      	str	r3, [r7, #28]
        break;
 80062a8:	e005      	b.n	80062b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d077      	beq.n	80063ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	005a      	lsls	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	441a      	add	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b0f      	cmp	r3, #15
 80062d6:	d916      	bls.n	8006306 <UART_SetConfig+0x392>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062de:	d212      	bcs.n	8006306 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f023 030f 	bic.w	r3, r3, #15
 80062e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	8afb      	ldrh	r3, [r7, #22]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	8afa      	ldrh	r2, [r7, #22]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e052      	b.n	80063ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800630c:	e04e      	b.n	80063ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800630e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006312:	2b08      	cmp	r3, #8
 8006314:	d827      	bhi.n	8006366 <UART_SetConfig+0x3f2>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x3a8>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	08006367 	.word	0x08006367
 800632c:	08006357 	.word	0x08006357
 8006330:	08006367 	.word	0x08006367
 8006334:	08006367 	.word	0x08006367
 8006338:	08006367 	.word	0x08006367
 800633c:	0800635f 	.word	0x0800635f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7ff f844 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8006344:	61f8      	str	r0, [r7, #28]
        break;
 8006346:	e014      	b.n	8006372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7ff f856 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 800634c:	61f8      	str	r0, [r7, #28]
        break;
 800634e:	e010      	b.n	8006372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <UART_SetConfig+0x454>)
 8006352:	61fb      	str	r3, [r7, #28]
        break;
 8006354:	e00d      	b.n	8006372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006356:	f7fe ffa1 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800635a:	61f8      	str	r0, [r7, #28]
        break;
 800635c:	e009      	b.n	8006372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006362:	61fb      	str	r3, [r7, #28]
        break;
 8006364:	e005      	b.n	8006372 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006370:	bf00      	nop
    }

    if (pclk != 0U)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d019      	beq.n	80063ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	085a      	lsrs	r2, r3, #1
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	441a      	add	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	d909      	bls.n	80063a6 <UART_SetConfig+0x432>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d205      	bcs.n	80063a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60da      	str	r2, [r3, #12]
 80063a4:	e002      	b.n	80063ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3728      	adds	r7, #40	; 0x28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	00f42400 	.word	0x00f42400

080063cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ca:	d10a      	bne.n	80064e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006520:	f7fb fdfe 	bl	8002120 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d10e      	bne.n	8006552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f82d 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e023      	b.n	800659a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b04      	cmp	r3, #4
 800655e:	d10e      	bne.n	800657e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f817 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e00d      	b.n	800659a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b09c      	sub	sp, #112	; 0x70
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	4613      	mov	r3, r2
 80065b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b2:	e0a5      	b.n	8006700 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	f000 80a1 	beq.w	8006700 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065be:	f7fb fdaf 	bl	8002120 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d302      	bcc.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80065ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d13e      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e8:	667b      	str	r3, [r7, #100]	; 0x64
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	663b      	str	r3, [r7, #96]	; 0x60
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006626:	64ba      	str	r2, [r7, #72]	; 0x48
 8006628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800662c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e067      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d04f      	beq.n	8006700 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800666a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666e:	d147      	bne.n	8006700 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006678:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800668e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800669e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066cc:	623a      	str	r2, [r7, #32]
 80066ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	6a3a      	ldr	r2, [r7, #32]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e010      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4013      	ands	r3, r2
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	429a      	cmp	r2, r3
 800670e:	bf0c      	ite	eq
 8006710:	2301      	moveq	r3, #1
 8006712:	2300      	movne	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	429a      	cmp	r2, r3
 800671c:	f43f af4a 	beq.w	80065b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3770      	adds	r7, #112	; 0x70
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <__errno>:
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <__errno+0x8>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000010 	.word	0x20000010

08006738 <__libc_init_array>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4d0d      	ldr	r5, [pc, #52]	; (8006770 <__libc_init_array+0x38>)
 800673c:	4c0d      	ldr	r4, [pc, #52]	; (8006774 <__libc_init_array+0x3c>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	2600      	movs	r6, #0
 8006744:	42a6      	cmp	r6, r4
 8006746:	d109      	bne.n	800675c <__libc_init_array+0x24>
 8006748:	4d0b      	ldr	r5, [pc, #44]	; (8006778 <__libc_init_array+0x40>)
 800674a:	4c0c      	ldr	r4, [pc, #48]	; (800677c <__libc_init_array+0x44>)
 800674c:	f002 fd50 	bl	80091f0 <_init>
 8006750:	1b64      	subs	r4, r4, r5
 8006752:	10a4      	asrs	r4, r4, #2
 8006754:	2600      	movs	r6, #0
 8006756:	42a6      	cmp	r6, r4
 8006758:	d105      	bne.n	8006766 <__libc_init_array+0x2e>
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006760:	4798      	blx	r3
 8006762:	3601      	adds	r6, #1
 8006764:	e7ee      	b.n	8006744 <__libc_init_array+0xc>
 8006766:	f855 3b04 	ldr.w	r3, [r5], #4
 800676a:	4798      	blx	r3
 800676c:	3601      	adds	r6, #1
 800676e:	e7f2      	b.n	8006756 <__libc_init_array+0x1e>
 8006770:	08009694 	.word	0x08009694
 8006774:	08009694 	.word	0x08009694
 8006778:	08009694 	.word	0x08009694
 800677c:	08009698 	.word	0x08009698

08006780 <memset>:
 8006780:	4402      	add	r2, r0
 8006782:	4603      	mov	r3, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <__cvt>:
 8006790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	ec55 4b10 	vmov	r4, r5, d0
 8006798:	2d00      	cmp	r5, #0
 800679a:	460e      	mov	r6, r1
 800679c:	4619      	mov	r1, r3
 800679e:	462b      	mov	r3, r5
 80067a0:	bfbb      	ittet	lt
 80067a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067a6:	461d      	movlt	r5, r3
 80067a8:	2300      	movge	r3, #0
 80067aa:	232d      	movlt	r3, #45	; 0x2d
 80067ac:	700b      	strb	r3, [r1, #0]
 80067ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067b4:	4691      	mov	r9, r2
 80067b6:	f023 0820 	bic.w	r8, r3, #32
 80067ba:	bfbc      	itt	lt
 80067bc:	4622      	movlt	r2, r4
 80067be:	4614      	movlt	r4, r2
 80067c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c4:	d005      	beq.n	80067d2 <__cvt+0x42>
 80067c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067ca:	d100      	bne.n	80067ce <__cvt+0x3e>
 80067cc:	3601      	adds	r6, #1
 80067ce:	2102      	movs	r1, #2
 80067d0:	e000      	b.n	80067d4 <__cvt+0x44>
 80067d2:	2103      	movs	r1, #3
 80067d4:	ab03      	add	r3, sp, #12
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	ab02      	add	r3, sp, #8
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	ec45 4b10 	vmov	d0, r4, r5
 80067e0:	4653      	mov	r3, sl
 80067e2:	4632      	mov	r2, r6
 80067e4:	f000 fce4 	bl	80071b0 <_dtoa_r>
 80067e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067ec:	4607      	mov	r7, r0
 80067ee:	d102      	bne.n	80067f6 <__cvt+0x66>
 80067f0:	f019 0f01 	tst.w	r9, #1
 80067f4:	d022      	beq.n	800683c <__cvt+0xac>
 80067f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067fa:	eb07 0906 	add.w	r9, r7, r6
 80067fe:	d110      	bne.n	8006822 <__cvt+0x92>
 8006800:	783b      	ldrb	r3, [r7, #0]
 8006802:	2b30      	cmp	r3, #48	; 0x30
 8006804:	d10a      	bne.n	800681c <__cvt+0x8c>
 8006806:	2200      	movs	r2, #0
 8006808:	2300      	movs	r3, #0
 800680a:	4620      	mov	r0, r4
 800680c:	4629      	mov	r1, r5
 800680e:	f7fa f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006812:	b918      	cbnz	r0, 800681c <__cvt+0x8c>
 8006814:	f1c6 0601 	rsb	r6, r6, #1
 8006818:	f8ca 6000 	str.w	r6, [sl]
 800681c:	f8da 3000 	ldr.w	r3, [sl]
 8006820:	4499      	add	r9, r3
 8006822:	2200      	movs	r2, #0
 8006824:	2300      	movs	r3, #0
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f7fa f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800682e:	b108      	cbz	r0, 8006834 <__cvt+0xa4>
 8006830:	f8cd 900c 	str.w	r9, [sp, #12]
 8006834:	2230      	movs	r2, #48	; 0x30
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	454b      	cmp	r3, r9
 800683a:	d307      	bcc.n	800684c <__cvt+0xbc>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006840:	1bdb      	subs	r3, r3, r7
 8006842:	4638      	mov	r0, r7
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	b004      	add	sp, #16
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	9103      	str	r1, [sp, #12]
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e7f0      	b.n	8006836 <__cvt+0xa6>

08006854 <__exponent>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	4603      	mov	r3, r0
 8006858:	2900      	cmp	r1, #0
 800685a:	bfb8      	it	lt
 800685c:	4249      	neglt	r1, r1
 800685e:	f803 2b02 	strb.w	r2, [r3], #2
 8006862:	bfb4      	ite	lt
 8006864:	222d      	movlt	r2, #45	; 0x2d
 8006866:	222b      	movge	r2, #43	; 0x2b
 8006868:	2909      	cmp	r1, #9
 800686a:	7042      	strb	r2, [r0, #1]
 800686c:	dd2a      	ble.n	80068c4 <__exponent+0x70>
 800686e:	f10d 0407 	add.w	r4, sp, #7
 8006872:	46a4      	mov	ip, r4
 8006874:	270a      	movs	r7, #10
 8006876:	46a6      	mov	lr, r4
 8006878:	460a      	mov	r2, r1
 800687a:	fb91 f6f7 	sdiv	r6, r1, r7
 800687e:	fb07 1516 	mls	r5, r7, r6, r1
 8006882:	3530      	adds	r5, #48	; 0x30
 8006884:	2a63      	cmp	r2, #99	; 0x63
 8006886:	f104 34ff 	add.w	r4, r4, #4294967295
 800688a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800688e:	4631      	mov	r1, r6
 8006890:	dcf1      	bgt.n	8006876 <__exponent+0x22>
 8006892:	3130      	adds	r1, #48	; 0x30
 8006894:	f1ae 0502 	sub.w	r5, lr, #2
 8006898:	f804 1c01 	strb.w	r1, [r4, #-1]
 800689c:	1c44      	adds	r4, r0, #1
 800689e:	4629      	mov	r1, r5
 80068a0:	4561      	cmp	r1, ip
 80068a2:	d30a      	bcc.n	80068ba <__exponent+0x66>
 80068a4:	f10d 0209 	add.w	r2, sp, #9
 80068a8:	eba2 020e 	sub.w	r2, r2, lr
 80068ac:	4565      	cmp	r5, ip
 80068ae:	bf88      	it	hi
 80068b0:	2200      	movhi	r2, #0
 80068b2:	4413      	add	r3, r2
 80068b4:	1a18      	subs	r0, r3, r0
 80068b6:	b003      	add	sp, #12
 80068b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068c2:	e7ed      	b.n	80068a0 <__exponent+0x4c>
 80068c4:	2330      	movs	r3, #48	; 0x30
 80068c6:	3130      	adds	r1, #48	; 0x30
 80068c8:	7083      	strb	r3, [r0, #2]
 80068ca:	70c1      	strb	r1, [r0, #3]
 80068cc:	1d03      	adds	r3, r0, #4
 80068ce:	e7f1      	b.n	80068b4 <__exponent+0x60>

080068d0 <_printf_float>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	ed2d 8b02 	vpush	{d8}
 80068d8:	b08d      	sub	sp, #52	; 0x34
 80068da:	460c      	mov	r4, r1
 80068dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068e0:	4616      	mov	r6, r2
 80068e2:	461f      	mov	r7, r3
 80068e4:	4605      	mov	r5, r0
 80068e6:	f001 fb47 	bl	8007f78 <_localeconv_r>
 80068ea:	f8d0 a000 	ldr.w	sl, [r0]
 80068ee:	4650      	mov	r0, sl
 80068f0:	f7f9 fc6e 	bl	80001d0 <strlen>
 80068f4:	2300      	movs	r3, #0
 80068f6:	930a      	str	r3, [sp, #40]	; 0x28
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006900:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006904:	3307      	adds	r3, #7
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	f8c8 2000 	str.w	r2, [r8]
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800691a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800691e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	f8cd 8018 	str.w	r8, [sp, #24]
 8006928:	ee08 0a10 	vmov	s16, r0
 800692c:	4b9f      	ldr	r3, [pc, #636]	; (8006bac <_printf_float+0x2dc>)
 800692e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	f7fa f8f9 	bl	8000b2c <__aeabi_dcmpun>
 800693a:	bb88      	cbnz	r0, 80069a0 <_printf_float+0xd0>
 800693c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006940:	4b9a      	ldr	r3, [pc, #616]	; (8006bac <_printf_float+0x2dc>)
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	f7fa f8d3 	bl	8000af0 <__aeabi_dcmple>
 800694a:	bb48      	cbnz	r0, 80069a0 <_printf_float+0xd0>
 800694c:	2200      	movs	r2, #0
 800694e:	2300      	movs	r3, #0
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7fa f8c2 	bl	8000adc <__aeabi_dcmplt>
 8006958:	b110      	cbz	r0, 8006960 <_printf_float+0x90>
 800695a:	232d      	movs	r3, #45	; 0x2d
 800695c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006960:	4b93      	ldr	r3, [pc, #588]	; (8006bb0 <_printf_float+0x2e0>)
 8006962:	4894      	ldr	r0, [pc, #592]	; (8006bb4 <_printf_float+0x2e4>)
 8006964:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006968:	bf94      	ite	ls
 800696a:	4698      	movls	r8, r3
 800696c:	4680      	movhi	r8, r0
 800696e:	2303      	movs	r3, #3
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	f023 0204 	bic.w	r2, r3, #4
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	f04f 0900 	mov.w	r9, #0
 800697e:	9700      	str	r7, [sp, #0]
 8006980:	4633      	mov	r3, r6
 8006982:	aa0b      	add	r2, sp, #44	; 0x2c
 8006984:	4621      	mov	r1, r4
 8006986:	4628      	mov	r0, r5
 8006988:	f000 f9d8 	bl	8006d3c <_printf_common>
 800698c:	3001      	adds	r0, #1
 800698e:	f040 8090 	bne.w	8006ab2 <_printf_float+0x1e2>
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
 8006996:	b00d      	add	sp, #52	; 0x34
 8006998:	ecbd 8b02 	vpop	{d8}
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	4649      	mov	r1, r9
 80069a8:	f7fa f8c0 	bl	8000b2c <__aeabi_dcmpun>
 80069ac:	b140      	cbz	r0, 80069c0 <_printf_float+0xf0>
 80069ae:	464b      	mov	r3, r9
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfbc      	itt	lt
 80069b4:	232d      	movlt	r3, #45	; 0x2d
 80069b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ba:	487f      	ldr	r0, [pc, #508]	; (8006bb8 <_printf_float+0x2e8>)
 80069bc:	4b7f      	ldr	r3, [pc, #508]	; (8006bbc <_printf_float+0x2ec>)
 80069be:	e7d1      	b.n	8006964 <_printf_float+0x94>
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069c6:	9206      	str	r2, [sp, #24]
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	d13f      	bne.n	8006a4c <_printf_float+0x17c>
 80069cc:	2306      	movs	r3, #6
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	9b05      	ldr	r3, [sp, #20]
 80069d2:	6861      	ldr	r1, [r4, #4]
 80069d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069d8:	2300      	movs	r3, #0
 80069da:	9303      	str	r3, [sp, #12]
 80069dc:	ab0a      	add	r3, sp, #40	; 0x28
 80069de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069e2:	ab09      	add	r3, sp, #36	; 0x24
 80069e4:	ec49 8b10 	vmov	d0, r8, r9
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7ff fecd 	bl	8006790 <__cvt>
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069fa:	2b47      	cmp	r3, #71	; 0x47
 80069fc:	4680      	mov	r8, r0
 80069fe:	d108      	bne.n	8006a12 <_printf_float+0x142>
 8006a00:	1cc8      	adds	r0, r1, #3
 8006a02:	db02      	blt.n	8006a0a <_printf_float+0x13a>
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	4299      	cmp	r1, r3
 8006a08:	dd41      	ble.n	8006a8e <_printf_float+0x1be>
 8006a0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a0e:	fa5f fb8b 	uxtb.w	fp, fp
 8006a12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a16:	d820      	bhi.n	8006a5a <_printf_float+0x18a>
 8006a18:	3901      	subs	r1, #1
 8006a1a:	465a      	mov	r2, fp
 8006a1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a20:	9109      	str	r1, [sp, #36]	; 0x24
 8006a22:	f7ff ff17 	bl	8006854 <__exponent>
 8006a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a28:	1813      	adds	r3, r2, r0
 8006a2a:	2a01      	cmp	r2, #1
 8006a2c:	4681      	mov	r9, r0
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	dc02      	bgt.n	8006a38 <_printf_float+0x168>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	07d2      	lsls	r2, r2, #31
 8006a36:	d501      	bpl.n	8006a3c <_printf_float+0x16c>
 8006a38:	3301      	adds	r3, #1
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d09c      	beq.n	800697e <_printf_float+0xae>
 8006a44:	232d      	movs	r3, #45	; 0x2d
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4a:	e798      	b.n	800697e <_printf_float+0xae>
 8006a4c:	9a06      	ldr	r2, [sp, #24]
 8006a4e:	2a47      	cmp	r2, #71	; 0x47
 8006a50:	d1be      	bne.n	80069d0 <_printf_float+0x100>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1bc      	bne.n	80069d0 <_printf_float+0x100>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7b9      	b.n	80069ce <_printf_float+0xfe>
 8006a5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a5e:	d118      	bne.n	8006a92 <_printf_float+0x1c2>
 8006a60:	2900      	cmp	r1, #0
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	dd0b      	ble.n	8006a7e <_printf_float+0x1ae>
 8006a66:	6121      	str	r1, [r4, #16]
 8006a68:	b913      	cbnz	r3, 8006a70 <_printf_float+0x1a0>
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	07d0      	lsls	r0, r2, #31
 8006a6e:	d502      	bpl.n	8006a76 <_printf_float+0x1a6>
 8006a70:	3301      	adds	r3, #1
 8006a72:	440b      	add	r3, r1
 8006a74:	6123      	str	r3, [r4, #16]
 8006a76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a78:	f04f 0900 	mov.w	r9, #0
 8006a7c:	e7de      	b.n	8006a3c <_printf_float+0x16c>
 8006a7e:	b913      	cbnz	r3, 8006a86 <_printf_float+0x1b6>
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	07d2      	lsls	r2, r2, #31
 8006a84:	d501      	bpl.n	8006a8a <_printf_float+0x1ba>
 8006a86:	3302      	adds	r3, #2
 8006a88:	e7f4      	b.n	8006a74 <_printf_float+0x1a4>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7f2      	b.n	8006a74 <_printf_float+0x1a4>
 8006a8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a94:	4299      	cmp	r1, r3
 8006a96:	db05      	blt.n	8006aa4 <_printf_float+0x1d4>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	6121      	str	r1, [r4, #16]
 8006a9c:	07d8      	lsls	r0, r3, #31
 8006a9e:	d5ea      	bpl.n	8006a76 <_printf_float+0x1a6>
 8006aa0:	1c4b      	adds	r3, r1, #1
 8006aa2:	e7e7      	b.n	8006a74 <_printf_float+0x1a4>
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	bfd4      	ite	le
 8006aa8:	f1c1 0202 	rsble	r2, r1, #2
 8006aac:	2201      	movgt	r2, #1
 8006aae:	4413      	add	r3, r2
 8006ab0:	e7e0      	b.n	8006a74 <_printf_float+0x1a4>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	055a      	lsls	r2, r3, #21
 8006ab6:	d407      	bmi.n	8006ac8 <_printf_float+0x1f8>
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	4642      	mov	r2, r8
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d12c      	bne.n	8006b20 <_printf_float+0x250>
 8006ac6:	e764      	b.n	8006992 <_printf_float+0xc2>
 8006ac8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006acc:	f240 80e0 	bls.w	8006c90 <_printf_float+0x3c0>
 8006ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f7f9 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d034      	beq.n	8006b4a <_printf_float+0x27a>
 8006ae0:	4a37      	ldr	r2, [pc, #220]	; (8006bc0 <_printf_float+0x2f0>)
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	f43f af51 	beq.w	8006992 <_printf_float+0xc2>
 8006af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af4:	429a      	cmp	r2, r3
 8006af6:	db02      	blt.n	8006afe <_printf_float+0x22e>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07d8      	lsls	r0, r3, #31
 8006afc:	d510      	bpl.n	8006b20 <_printf_float+0x250>
 8006afe:	ee18 3a10 	vmov	r3, s16
 8006b02:	4652      	mov	r2, sl
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af41 	beq.w	8006992 <_printf_float+0xc2>
 8006b10:	f04f 0800 	mov.w	r8, #0
 8006b14:	f104 091a 	add.w	r9, r4, #26
 8006b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4543      	cmp	r3, r8
 8006b1e:	dc09      	bgt.n	8006b34 <_printf_float+0x264>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	079b      	lsls	r3, r3, #30
 8006b24:	f100 8105 	bmi.w	8006d32 <_printf_float+0x462>
 8006b28:	68e0      	ldr	r0, [r4, #12]
 8006b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2c:	4298      	cmp	r0, r3
 8006b2e:	bfb8      	it	lt
 8006b30:	4618      	movlt	r0, r3
 8006b32:	e730      	b.n	8006996 <_printf_float+0xc6>
 8006b34:	2301      	movs	r3, #1
 8006b36:	464a      	mov	r2, r9
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af27 	beq.w	8006992 <_printf_float+0xc2>
 8006b44:	f108 0801 	add.w	r8, r8, #1
 8006b48:	e7e6      	b.n	8006b18 <_printf_float+0x248>
 8006b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dc39      	bgt.n	8006bc4 <_printf_float+0x2f4>
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <_printf_float+0x2f0>)
 8006b52:	2301      	movs	r3, #1
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f43f af19 	beq.w	8006992 <_printf_float+0xc2>
 8006b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b64:	4313      	orrs	r3, r2
 8006b66:	d102      	bne.n	8006b6e <_printf_float+0x29e>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	07d9      	lsls	r1, r3, #31
 8006b6c:	d5d8      	bpl.n	8006b20 <_printf_float+0x250>
 8006b6e:	ee18 3a10 	vmov	r3, s16
 8006b72:	4652      	mov	r2, sl
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f af09 	beq.w	8006992 <_printf_float+0xc2>
 8006b80:	f04f 0900 	mov.w	r9, #0
 8006b84:	f104 0a1a 	add.w	sl, r4, #26
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	425b      	negs	r3, r3
 8006b8c:	454b      	cmp	r3, r9
 8006b8e:	dc01      	bgt.n	8006b94 <_printf_float+0x2c4>
 8006b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b92:	e792      	b.n	8006aba <_printf_float+0x1ea>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4652      	mov	r2, sl
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	47b8      	blx	r7
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f43f aef7 	beq.w	8006992 <_printf_float+0xc2>
 8006ba4:	f109 0901 	add.w	r9, r9, #1
 8006ba8:	e7ee      	b.n	8006b88 <_printf_float+0x2b8>
 8006baa:	bf00      	nop
 8006bac:	7fefffff 	.word	0x7fefffff
 8006bb0:	080092b4 	.word	0x080092b4
 8006bb4:	080092b8 	.word	0x080092b8
 8006bb8:	080092c0 	.word	0x080092c0
 8006bbc:	080092bc 	.word	0x080092bc
 8006bc0:	080092c4 	.word	0x080092c4
 8006bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	bfa8      	it	ge
 8006bcc:	461a      	movge	r2, r3
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	4691      	mov	r9, r2
 8006bd2:	dc37      	bgt.n	8006c44 <_printf_float+0x374>
 8006bd4:	f04f 0b00 	mov.w	fp, #0
 8006bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bdc:	f104 021a 	add.w	r2, r4, #26
 8006be0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	eba3 0309 	sub.w	r3, r3, r9
 8006be8:	455b      	cmp	r3, fp
 8006bea:	dc33      	bgt.n	8006c54 <_printf_float+0x384>
 8006bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	db3b      	blt.n	8006c6c <_printf_float+0x39c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07da      	lsls	r2, r3, #31
 8006bf8:	d438      	bmi.n	8006c6c <_printf_float+0x39c>
 8006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfc:	9a05      	ldr	r2, [sp, #20]
 8006bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c00:	1a9a      	subs	r2, r3, r2
 8006c02:	eba3 0901 	sub.w	r9, r3, r1
 8006c06:	4591      	cmp	r9, r2
 8006c08:	bfa8      	it	ge
 8006c0a:	4691      	movge	r9, r2
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	dc35      	bgt.n	8006c7e <_printf_float+0x3ae>
 8006c12:	f04f 0800 	mov.w	r8, #0
 8006c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c1a:	f104 0a1a 	add.w	sl, r4, #26
 8006c1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	eba3 0309 	sub.w	r3, r3, r9
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	f77f af79 	ble.w	8006b20 <_printf_float+0x250>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4652      	mov	r2, sl
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f aeaa 	beq.w	8006992 <_printf_float+0xc2>
 8006c3e:	f108 0801 	add.w	r8, r8, #1
 8006c42:	e7ec      	b.n	8006c1e <_printf_float+0x34e>
 8006c44:	4613      	mov	r3, r2
 8006c46:	4631      	mov	r1, r6
 8006c48:	4642      	mov	r2, r8
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d1c0      	bne.n	8006bd4 <_printf_float+0x304>
 8006c52:	e69e      	b.n	8006992 <_printf_float+0xc2>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	9205      	str	r2, [sp, #20]
 8006c5c:	47b8      	blx	r7
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f43f ae97 	beq.w	8006992 <_printf_float+0xc2>
 8006c64:	9a05      	ldr	r2, [sp, #20]
 8006c66:	f10b 0b01 	add.w	fp, fp, #1
 8006c6a:	e7b9      	b.n	8006be0 <_printf_float+0x310>
 8006c6c:	ee18 3a10 	vmov	r3, s16
 8006c70:	4652      	mov	r2, sl
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d1be      	bne.n	8006bfa <_printf_float+0x32a>
 8006c7c:	e689      	b.n	8006992 <_printf_float+0xc2>
 8006c7e:	9a05      	ldr	r2, [sp, #20]
 8006c80:	464b      	mov	r3, r9
 8006c82:	4442      	add	r2, r8
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d1c1      	bne.n	8006c12 <_printf_float+0x342>
 8006c8e:	e680      	b.n	8006992 <_printf_float+0xc2>
 8006c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c92:	2a01      	cmp	r2, #1
 8006c94:	dc01      	bgt.n	8006c9a <_printf_float+0x3ca>
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d538      	bpl.n	8006d0c <_printf_float+0x43c>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f43f ae74 	beq.w	8006992 <_printf_float+0xc2>
 8006caa:	ee18 3a10 	vmov	r3, s16
 8006cae:	4652      	mov	r2, sl
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f43f ae6b 	beq.w	8006992 <_printf_float+0xc2>
 8006cbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f7f9 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc8:	b9d8      	cbnz	r0, 8006d02 <_printf_float+0x432>
 8006cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ccc:	f108 0201 	add.w	r2, r8, #1
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d10e      	bne.n	8006cfa <_printf_float+0x42a>
 8006cdc:	e659      	b.n	8006992 <_printf_float+0xc2>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae52 	beq.w	8006992 <_printf_float+0xc2>
 8006cee:	f108 0801 	add.w	r8, r8, #1
 8006cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	4543      	cmp	r3, r8
 8006cf8:	dcf1      	bgt.n	8006cde <_printf_float+0x40e>
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d00:	e6dc      	b.n	8006abc <_printf_float+0x1ec>
 8006d02:	f04f 0800 	mov.w	r8, #0
 8006d06:	f104 0a1a 	add.w	sl, r4, #26
 8006d0a:	e7f2      	b.n	8006cf2 <_printf_float+0x422>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4642      	mov	r2, r8
 8006d10:	e7df      	b.n	8006cd2 <_printf_float+0x402>
 8006d12:	2301      	movs	r3, #1
 8006d14:	464a      	mov	r2, r9
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f ae38 	beq.w	8006992 <_printf_float+0xc2>
 8006d22:	f108 0801 	add.w	r8, r8, #1
 8006d26:	68e3      	ldr	r3, [r4, #12]
 8006d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d2a:	1a5b      	subs	r3, r3, r1
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	dcf0      	bgt.n	8006d12 <_printf_float+0x442>
 8006d30:	e6fa      	b.n	8006b28 <_printf_float+0x258>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	f104 0919 	add.w	r9, r4, #25
 8006d3a:	e7f4      	b.n	8006d26 <_printf_float+0x456>

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4699      	mov	r9, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d88:	1e13      	subs	r3, r2, #0
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	68e5      	ldr	r5, [r4, #12]
 8006da6:	6832      	ldr	r2, [r6, #0]
 8006da8:	f003 0306 	and.w	r3, r3, #6
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	bf08      	it	eq
 8006db0:	1aad      	subeq	r5, r5, r2
 8006db2:	68a3      	ldr	r3, [r4, #8]
 8006db4:	6922      	ldr	r2, [r4, #16]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c0      	blx	r8
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	; 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e20:	2f78      	cmp	r7, #120	; 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	; 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d8 	beq.w	8006fea <_printf_i+0x1d2>
 8006e3a:	2f58      	cmp	r7, #88	; 0x58
 8006e3c:	f000 80a3 	beq.w	8006f86 <_printf_i+0x16e>
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fd1 	.word	0x08006fd1
 8006e88:	08006ef5 	.word	0x08006ef5
 8006e8c:	08006fb3 	.word	0x08006fb3
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006ff3 	.word	0x08006ff3
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006ef5 	.word	0x08006ef5
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006fbb 	.word	0x08006fbb
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0a3      	b.n	800700c <_printf_i+0x1f4>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	6829      	ldr	r1, [r5, #0]
 8006ec8:	0606      	lsls	r6, r0, #24
 8006eca:	f101 0304 	add.w	r3, r1, #4
 8006ece:	d50a      	bpl.n	8006ee6 <_printf_i+0xce>
 8006ed0:	680e      	ldr	r6, [r1, #0]
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	da03      	bge.n	8006ee0 <_printf_i+0xc8>
 8006ed8:	232d      	movs	r3, #45	; 0x2d
 8006eda:	4276      	negs	r6, r6
 8006edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee0:	485e      	ldr	r0, [pc, #376]	; (800705c <_printf_i+0x244>)
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	e019      	b.n	8006f1a <_printf_i+0x102>
 8006ee6:	680e      	ldr	r6, [r1, #0]
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eee:	bf18      	it	ne
 8006ef0:	b236      	sxthne	r6, r6
 8006ef2:	e7ef      	b.n	8006ed4 <_printf_i+0xbc>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	1d19      	adds	r1, r3, #4
 8006efa:	6029      	str	r1, [r5, #0]
 8006efc:	0601      	lsls	r1, r0, #24
 8006efe:	d501      	bpl.n	8006f04 <_printf_i+0xec>
 8006f00:	681e      	ldr	r6, [r3, #0]
 8006f02:	e002      	b.n	8006f0a <_printf_i+0xf2>
 8006f04:	0646      	lsls	r6, r0, #25
 8006f06:	d5fb      	bpl.n	8006f00 <_printf_i+0xe8>
 8006f08:	881e      	ldrh	r6, [r3, #0]
 8006f0a:	4854      	ldr	r0, [pc, #336]	; (800705c <_printf_i+0x244>)
 8006f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0e:	bf0c      	ite	eq
 8006f10:	2308      	moveq	r3, #8
 8006f12:	230a      	movne	r3, #10
 8006f14:	2100      	movs	r1, #0
 8006f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f1a:	6865      	ldr	r5, [r4, #4]
 8006f1c:	60a5      	str	r5, [r4, #8]
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	bfa2      	ittt	ge
 8006f22:	6821      	ldrge	r1, [r4, #0]
 8006f24:	f021 0104 	bicge.w	r1, r1, #4
 8006f28:	6021      	strge	r1, [r4, #0]
 8006f2a:	b90e      	cbnz	r6, 8006f30 <_printf_i+0x118>
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	d04d      	beq.n	8006fcc <_printf_i+0x1b4>
 8006f30:	4615      	mov	r5, r2
 8006f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f36:	fb03 6711 	mls	r7, r3, r1, r6
 8006f3a:	5dc7      	ldrb	r7, [r0, r7]
 8006f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f40:	4637      	mov	r7, r6
 8006f42:	42bb      	cmp	r3, r7
 8006f44:	460e      	mov	r6, r1
 8006f46:	d9f4      	bls.n	8006f32 <_printf_i+0x11a>
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d10b      	bne.n	8006f64 <_printf_i+0x14c>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	07de      	lsls	r6, r3, #31
 8006f50:	d508      	bpl.n	8006f64 <_printf_i+0x14c>
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	6861      	ldr	r1, [r4, #4]
 8006f56:	4299      	cmp	r1, r3
 8006f58:	bfde      	ittt	le
 8006f5a:	2330      	movle	r3, #48	; 0x30
 8006f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f64:	1b52      	subs	r2, r2, r5
 8006f66:	6122      	str	r2, [r4, #16]
 8006f68:	f8cd a000 	str.w	sl, [sp]
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	aa03      	add	r2, sp, #12
 8006f70:	4621      	mov	r1, r4
 8006f72:	4640      	mov	r0, r8
 8006f74:	f7ff fee2 	bl	8006d3c <_printf_common>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d14c      	bne.n	8007016 <_printf_i+0x1fe>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	b004      	add	sp, #16
 8006f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f86:	4835      	ldr	r0, [pc, #212]	; (800705c <_printf_i+0x244>)
 8006f88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f8c:	6829      	ldr	r1, [r5, #0]
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f94:	6029      	str	r1, [r5, #0]
 8006f96:	061d      	lsls	r5, r3, #24
 8006f98:	d514      	bpl.n	8006fc4 <_printf_i+0x1ac>
 8006f9a:	07df      	lsls	r7, r3, #31
 8006f9c:	bf44      	itt	mi
 8006f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa2:	6023      	strmi	r3, [r4, #0]
 8006fa4:	b91e      	cbnz	r6, 8006fae <_printf_i+0x196>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f023 0320 	bic.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	2310      	movs	r3, #16
 8006fb0:	e7b0      	b.n	8006f14 <_printf_i+0xfc>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	f043 0320 	orr.w	r3, r3, #32
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	2378      	movs	r3, #120	; 0x78
 8006fbc:	4828      	ldr	r0, [pc, #160]	; (8007060 <_printf_i+0x248>)
 8006fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fc2:	e7e3      	b.n	8006f8c <_printf_i+0x174>
 8006fc4:	0659      	lsls	r1, r3, #25
 8006fc6:	bf48      	it	mi
 8006fc8:	b2b6      	uxthmi	r6, r6
 8006fca:	e7e6      	b.n	8006f9a <_printf_i+0x182>
 8006fcc:	4615      	mov	r5, r2
 8006fce:	e7bb      	b.n	8006f48 <_printf_i+0x130>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	6826      	ldr	r6, [r4, #0]
 8006fd4:	6961      	ldr	r1, [r4, #20]
 8006fd6:	1d18      	adds	r0, r3, #4
 8006fd8:	6028      	str	r0, [r5, #0]
 8006fda:	0635      	lsls	r5, r6, #24
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	d501      	bpl.n	8006fe4 <_printf_i+0x1cc>
 8006fe0:	6019      	str	r1, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <_printf_i+0x1d2>
 8006fe4:	0670      	lsls	r0, r6, #25
 8006fe6:	d5fb      	bpl.n	8006fe0 <_printf_i+0x1c8>
 8006fe8:	8019      	strh	r1, [r3, #0]
 8006fea:	2300      	movs	r3, #0
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	4615      	mov	r5, r2
 8006ff0:	e7ba      	b.n	8006f68 <_printf_i+0x150>
 8006ff2:	682b      	ldr	r3, [r5, #0]
 8006ff4:	1d1a      	adds	r2, r3, #4
 8006ff6:	602a      	str	r2, [r5, #0]
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	6862      	ldr	r2, [r4, #4]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4628      	mov	r0, r5
 8007000:	f7f9 f8ee 	bl	80001e0 <memchr>
 8007004:	b108      	cbz	r0, 800700a <_printf_i+0x1f2>
 8007006:	1b40      	subs	r0, r0, r5
 8007008:	6060      	str	r0, [r4, #4]
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	2300      	movs	r3, #0
 8007010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007014:	e7a8      	b.n	8006f68 <_printf_i+0x150>
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	462a      	mov	r2, r5
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	47d0      	blx	sl
 8007020:	3001      	adds	r0, #1
 8007022:	d0ab      	beq.n	8006f7c <_printf_i+0x164>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	079b      	lsls	r3, r3, #30
 8007028:	d413      	bmi.n	8007052 <_printf_i+0x23a>
 800702a:	68e0      	ldr	r0, [r4, #12]
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	4298      	cmp	r0, r3
 8007030:	bfb8      	it	lt
 8007032:	4618      	movlt	r0, r3
 8007034:	e7a4      	b.n	8006f80 <_printf_i+0x168>
 8007036:	2301      	movs	r3, #1
 8007038:	4632      	mov	r2, r6
 800703a:	4649      	mov	r1, r9
 800703c:	4640      	mov	r0, r8
 800703e:	47d0      	blx	sl
 8007040:	3001      	adds	r0, #1
 8007042:	d09b      	beq.n	8006f7c <_printf_i+0x164>
 8007044:	3501      	adds	r5, #1
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	9903      	ldr	r1, [sp, #12]
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	42ab      	cmp	r3, r5
 800704e:	dcf2      	bgt.n	8007036 <_printf_i+0x21e>
 8007050:	e7eb      	b.n	800702a <_printf_i+0x212>
 8007052:	2500      	movs	r5, #0
 8007054:	f104 0619 	add.w	r6, r4, #25
 8007058:	e7f5      	b.n	8007046 <_printf_i+0x22e>
 800705a:	bf00      	nop
 800705c:	080092c6 	.word	0x080092c6
 8007060:	080092d7 	.word	0x080092d7

08007064 <iprintf>:
 8007064:	b40f      	push	{r0, r1, r2, r3}
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <iprintf+0x2c>)
 8007068:	b513      	push	{r0, r1, r4, lr}
 800706a:	681c      	ldr	r4, [r3, #0]
 800706c:	b124      	cbz	r4, 8007078 <iprintf+0x14>
 800706e:	69a3      	ldr	r3, [r4, #24]
 8007070:	b913      	cbnz	r3, 8007078 <iprintf+0x14>
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fee2 	bl	8007e3c <__sinit>
 8007078:	ab05      	add	r3, sp, #20
 800707a:	9a04      	ldr	r2, [sp, #16]
 800707c:	68a1      	ldr	r1, [r4, #8]
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	4620      	mov	r0, r4
 8007082:	f001 fc3b 	bl	80088fc <_vfiprintf_r>
 8007086:	b002      	add	sp, #8
 8007088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708c:	b004      	add	sp, #16
 800708e:	4770      	bx	lr
 8007090:	20000010 	.word	0x20000010

08007094 <quorem>:
 8007094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	6903      	ldr	r3, [r0, #16]
 800709a:	690c      	ldr	r4, [r1, #16]
 800709c:	42a3      	cmp	r3, r4
 800709e:	4607      	mov	r7, r0
 80070a0:	f2c0 8081 	blt.w	80071a6 <quorem+0x112>
 80070a4:	3c01      	subs	r4, #1
 80070a6:	f101 0814 	add.w	r8, r1, #20
 80070aa:	f100 0514 	add.w	r5, r0, #20
 80070ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070bc:	3301      	adds	r3, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80070cc:	d331      	bcc.n	8007132 <quorem+0x9e>
 80070ce:	f04f 0e00 	mov.w	lr, #0
 80070d2:	4640      	mov	r0, r8
 80070d4:	46ac      	mov	ip, r5
 80070d6:	46f2      	mov	sl, lr
 80070d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80070dc:	b293      	uxth	r3, r2
 80070de:	fb06 e303 	mla	r3, r6, r3, lr
 80070e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	ebaa 0303 	sub.w	r3, sl, r3
 80070ec:	f8dc a000 	ldr.w	sl, [ip]
 80070f0:	0c12      	lsrs	r2, r2, #16
 80070f2:	fa13 f38a 	uxtah	r3, r3, sl
 80070f6:	fb06 e202 	mla	r2, r6, r2, lr
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007102:	b292      	uxth	r2, r2
 8007104:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800710c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007110:	4581      	cmp	r9, r0
 8007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007116:	f84c 3b04 	str.w	r3, [ip], #4
 800711a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800711e:	d2db      	bcs.n	80070d8 <quorem+0x44>
 8007120:	f855 300b 	ldr.w	r3, [r5, fp]
 8007124:	b92b      	cbnz	r3, 8007132 <quorem+0x9e>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	3b04      	subs	r3, #4
 800712a:	429d      	cmp	r5, r3
 800712c:	461a      	mov	r2, r3
 800712e:	d32e      	bcc.n	800718e <quorem+0xfa>
 8007130:	613c      	str	r4, [r7, #16]
 8007132:	4638      	mov	r0, r7
 8007134:	f001 f9c0 	bl	80084b8 <__mcmp>
 8007138:	2800      	cmp	r0, #0
 800713a:	db24      	blt.n	8007186 <quorem+0xf2>
 800713c:	3601      	adds	r6, #1
 800713e:	4628      	mov	r0, r5
 8007140:	f04f 0c00 	mov.w	ip, #0
 8007144:	f858 2b04 	ldr.w	r2, [r8], #4
 8007148:	f8d0 e000 	ldr.w	lr, [r0]
 800714c:	b293      	uxth	r3, r2
 800714e:	ebac 0303 	sub.w	r3, ip, r3
 8007152:	0c12      	lsrs	r2, r2, #16
 8007154:	fa13 f38e 	uxtah	r3, r3, lr
 8007158:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800715c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007160:	b29b      	uxth	r3, r3
 8007162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007166:	45c1      	cmp	r9, r8
 8007168:	f840 3b04 	str.w	r3, [r0], #4
 800716c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007170:	d2e8      	bcs.n	8007144 <quorem+0xb0>
 8007172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800717a:	b922      	cbnz	r2, 8007186 <quorem+0xf2>
 800717c:	3b04      	subs	r3, #4
 800717e:	429d      	cmp	r5, r3
 8007180:	461a      	mov	r2, r3
 8007182:	d30a      	bcc.n	800719a <quorem+0x106>
 8007184:	613c      	str	r4, [r7, #16]
 8007186:	4630      	mov	r0, r6
 8007188:	b003      	add	sp, #12
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	3b04      	subs	r3, #4
 8007192:	2a00      	cmp	r2, #0
 8007194:	d1cc      	bne.n	8007130 <quorem+0x9c>
 8007196:	3c01      	subs	r4, #1
 8007198:	e7c7      	b.n	800712a <quorem+0x96>
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	3b04      	subs	r3, #4
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d1f0      	bne.n	8007184 <quorem+0xf0>
 80071a2:	3c01      	subs	r4, #1
 80071a4:	e7eb      	b.n	800717e <quorem+0xea>
 80071a6:	2000      	movs	r0, #0
 80071a8:	e7ee      	b.n	8007188 <quorem+0xf4>
 80071aa:	0000      	movs	r0, r0
 80071ac:	0000      	movs	r0, r0
	...

080071b0 <_dtoa_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	ed2d 8b04 	vpush	{d8-d9}
 80071b8:	ec57 6b10 	vmov	r6, r7, d0
 80071bc:	b093      	sub	sp, #76	; 0x4c
 80071be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071c4:	9106      	str	r1, [sp, #24]
 80071c6:	ee10 aa10 	vmov	sl, s0
 80071ca:	4604      	mov	r4, r0
 80071cc:	9209      	str	r2, [sp, #36]	; 0x24
 80071ce:	930c      	str	r3, [sp, #48]	; 0x30
 80071d0:	46bb      	mov	fp, r7
 80071d2:	b975      	cbnz	r5, 80071f2 <_dtoa_r+0x42>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f000 fed7 	bl	8007f88 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	6260      	str	r0, [r4, #36]	; 0x24
 80071de:	b920      	cbnz	r0, 80071ea <_dtoa_r+0x3a>
 80071e0:	4ba7      	ldr	r3, [pc, #668]	; (8007480 <_dtoa_r+0x2d0>)
 80071e2:	21ea      	movs	r1, #234	; 0xea
 80071e4:	48a7      	ldr	r0, [pc, #668]	; (8007484 <_dtoa_r+0x2d4>)
 80071e6:	f001 fddf 	bl	8008da8 <__assert_func>
 80071ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071ee:	6005      	str	r5, [r0, #0]
 80071f0:	60c5      	str	r5, [r0, #12]
 80071f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	b151      	cbz	r1, 800720e <_dtoa_r+0x5e>
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	604a      	str	r2, [r1, #4]
 80071fc:	2301      	movs	r3, #1
 80071fe:	4093      	lsls	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
 8007202:	4620      	mov	r0, r4
 8007204:	f000 ff16 	bl	8008034 <_Bfree>
 8007208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	1e3b      	subs	r3, r7, #0
 8007210:	bfaa      	itet	ge
 8007212:	2300      	movge	r3, #0
 8007214:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007218:	f8c8 3000 	strge.w	r3, [r8]
 800721c:	4b9a      	ldr	r3, [pc, #616]	; (8007488 <_dtoa_r+0x2d8>)
 800721e:	bfbc      	itt	lt
 8007220:	2201      	movlt	r2, #1
 8007222:	f8c8 2000 	strlt.w	r2, [r8]
 8007226:	ea33 030b 	bics.w	r3, r3, fp
 800722a:	d11b      	bne.n	8007264 <_dtoa_r+0xb4>
 800722c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800722e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007238:	4333      	orrs	r3, r6
 800723a:	f000 8592 	beq.w	8007d62 <_dtoa_r+0xbb2>
 800723e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007240:	b963      	cbnz	r3, 800725c <_dtoa_r+0xac>
 8007242:	4b92      	ldr	r3, [pc, #584]	; (800748c <_dtoa_r+0x2dc>)
 8007244:	e022      	b.n	800728c <_dtoa_r+0xdc>
 8007246:	4b92      	ldr	r3, [pc, #584]	; (8007490 <_dtoa_r+0x2e0>)
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	3308      	adds	r3, #8
 800724c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	9801      	ldr	r0, [sp, #4]
 8007252:	b013      	add	sp, #76	; 0x4c
 8007254:	ecbd 8b04 	vpop	{d8-d9}
 8007258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725c:	4b8b      	ldr	r3, [pc, #556]	; (800748c <_dtoa_r+0x2dc>)
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	3303      	adds	r3, #3
 8007262:	e7f3      	b.n	800724c <_dtoa_r+0x9c>
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	4650      	mov	r0, sl
 800726a:	4659      	mov	r1, fp
 800726c:	f7f9 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007270:	ec4b ab19 	vmov	d9, sl, fp
 8007274:	4680      	mov	r8, r0
 8007276:	b158      	cbz	r0, 8007290 <_dtoa_r+0xe0>
 8007278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800727a:	2301      	movs	r3, #1
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 856b 	beq.w	8007d5c <_dtoa_r+0xbac>
 8007286:	4883      	ldr	r0, [pc, #524]	; (8007494 <_dtoa_r+0x2e4>)
 8007288:	6018      	str	r0, [r3, #0]
 800728a:	1e43      	subs	r3, r0, #1
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	e7df      	b.n	8007250 <_dtoa_r+0xa0>
 8007290:	ec4b ab10 	vmov	d0, sl, fp
 8007294:	aa10      	add	r2, sp, #64	; 0x40
 8007296:	a911      	add	r1, sp, #68	; 0x44
 8007298:	4620      	mov	r0, r4
 800729a:	f001 f9b3 	bl	8008604 <__d2b>
 800729e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80072a2:	ee08 0a10 	vmov	s16, r0
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	f000 8084 	beq.w	80073b4 <_dtoa_r+0x204>
 80072ac:	ee19 3a90 	vmov	r3, s19
 80072b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072b8:	4656      	mov	r6, sl
 80072ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80072c6:	4b74      	ldr	r3, [pc, #464]	; (8007498 <_dtoa_r+0x2e8>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f8 ffdb 	bl	8000288 <__aeabi_dsub>
 80072d2:	a365      	add	r3, pc, #404	; (adr r3, 8007468 <_dtoa_r+0x2b8>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	a364      	add	r3, pc, #400	; (adr r3, 8007470 <_dtoa_r+0x2c0>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f7f8 ffd3 	bl	800028c <__adddf3>
 80072e6:	4606      	mov	r6, r0
 80072e8:	4628      	mov	r0, r5
 80072ea:	460f      	mov	r7, r1
 80072ec:	f7f9 f91a 	bl	8000524 <__aeabi_i2d>
 80072f0:	a361      	add	r3, pc, #388	; (adr r3, 8007478 <_dtoa_r+0x2c8>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f8 ffc3 	bl	800028c <__adddf3>
 8007306:	4606      	mov	r6, r0
 8007308:	460f      	mov	r7, r1
 800730a:	f7f9 fc25 	bl	8000b58 <__aeabi_d2iz>
 800730e:	2200      	movs	r2, #0
 8007310:	9000      	str	r0, [sp, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	f7f9 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800731c:	b150      	cbz	r0, 8007334 <_dtoa_r+0x184>
 800731e:	9800      	ldr	r0, [sp, #0]
 8007320:	f7f9 f900 	bl	8000524 <__aeabi_i2d>
 8007324:	4632      	mov	r2, r6
 8007326:	463b      	mov	r3, r7
 8007328:	f7f9 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800732c:	b910      	cbnz	r0, 8007334 <_dtoa_r+0x184>
 800732e:	9b00      	ldr	r3, [sp, #0]
 8007330:	3b01      	subs	r3, #1
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b16      	cmp	r3, #22
 8007338:	d85a      	bhi.n	80073f0 <_dtoa_r+0x240>
 800733a:	9a00      	ldr	r2, [sp, #0]
 800733c:	4b57      	ldr	r3, [pc, #348]	; (800749c <_dtoa_r+0x2ec>)
 800733e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	ec51 0b19 	vmov	r0, r1, d9
 800734a:	f7f9 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d050      	beq.n	80073f4 <_dtoa_r+0x244>
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	3b01      	subs	r3, #1
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	930b      	str	r3, [sp, #44]	; 0x2c
 800735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800735e:	1b5d      	subs	r5, r3, r5
 8007360:	1e6b      	subs	r3, r5, #1
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	bf45      	ittet	mi
 8007366:	f1c5 0301 	rsbmi	r3, r5, #1
 800736a:	9304      	strmi	r3, [sp, #16]
 800736c:	2300      	movpl	r3, #0
 800736e:	2300      	movmi	r3, #0
 8007370:	bf4c      	ite	mi
 8007372:	9305      	strmi	r3, [sp, #20]
 8007374:	9304      	strpl	r3, [sp, #16]
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db3d      	blt.n	80073f8 <_dtoa_r+0x248>
 800737c:	9b05      	ldr	r3, [sp, #20]
 800737e:	9a00      	ldr	r2, [sp, #0]
 8007380:	920a      	str	r2, [sp, #40]	; 0x28
 8007382:	4413      	add	r3, r2
 8007384:	9305      	str	r3, [sp, #20]
 8007386:	2300      	movs	r3, #0
 8007388:	9307      	str	r3, [sp, #28]
 800738a:	9b06      	ldr	r3, [sp, #24]
 800738c:	2b09      	cmp	r3, #9
 800738e:	f200 8089 	bhi.w	80074a4 <_dtoa_r+0x2f4>
 8007392:	2b05      	cmp	r3, #5
 8007394:	bfc4      	itt	gt
 8007396:	3b04      	subgt	r3, #4
 8007398:	9306      	strgt	r3, [sp, #24]
 800739a:	9b06      	ldr	r3, [sp, #24]
 800739c:	f1a3 0302 	sub.w	r3, r3, #2
 80073a0:	bfcc      	ite	gt
 80073a2:	2500      	movgt	r5, #0
 80073a4:	2501      	movle	r5, #1
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	f200 8087 	bhi.w	80074ba <_dtoa_r+0x30a>
 80073ac:	e8df f003 	tbb	[pc, r3]
 80073b0:	59383a2d 	.word	0x59383a2d
 80073b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073b8:	441d      	add	r5, r3
 80073ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073be:	2b20      	cmp	r3, #32
 80073c0:	bfc1      	itttt	gt
 80073c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80073ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073d2:	bfda      	itte	le
 80073d4:	f1c3 0320 	rsble	r3, r3, #32
 80073d8:	fa06 f003 	lslle.w	r0, r6, r3
 80073dc:	4318      	orrgt	r0, r3
 80073de:	f7f9 f891 	bl	8000504 <__aeabi_ui2d>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4606      	mov	r6, r0
 80073e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073ea:	3d01      	subs	r5, #1
 80073ec:	930e      	str	r3, [sp, #56]	; 0x38
 80073ee:	e76a      	b.n	80072c6 <_dtoa_r+0x116>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e7b2      	b.n	800735a <_dtoa_r+0x1aa>
 80073f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80073f6:	e7b1      	b.n	800735c <_dtoa_r+0x1ac>
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	9a00      	ldr	r2, [sp, #0]
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	4253      	negs	r3, r2
 8007402:	9307      	str	r3, [sp, #28]
 8007404:	2300      	movs	r3, #0
 8007406:	930a      	str	r3, [sp, #40]	; 0x28
 8007408:	e7bf      	b.n	800738a <_dtoa_r+0x1da>
 800740a:	2300      	movs	r3, #0
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc55      	bgt.n	80074c0 <_dtoa_r+0x310>
 8007414:	2301      	movs	r3, #1
 8007416:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800741a:	461a      	mov	r2, r3
 800741c:	9209      	str	r2, [sp, #36]	; 0x24
 800741e:	e00c      	b.n	800743a <_dtoa_r+0x28a>
 8007420:	2301      	movs	r3, #1
 8007422:	e7f3      	b.n	800740c <_dtoa_r+0x25c>
 8007424:	2300      	movs	r3, #0
 8007426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007428:	9308      	str	r3, [sp, #32]
 800742a:	9b00      	ldr	r3, [sp, #0]
 800742c:	4413      	add	r3, r2
 800742e:	9302      	str	r3, [sp, #8]
 8007430:	3301      	adds	r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	9303      	str	r3, [sp, #12]
 8007436:	bfb8      	it	lt
 8007438:	2301      	movlt	r3, #1
 800743a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800743c:	2200      	movs	r2, #0
 800743e:	6042      	str	r2, [r0, #4]
 8007440:	2204      	movs	r2, #4
 8007442:	f102 0614 	add.w	r6, r2, #20
 8007446:	429e      	cmp	r6, r3
 8007448:	6841      	ldr	r1, [r0, #4]
 800744a:	d93d      	bls.n	80074c8 <_dtoa_r+0x318>
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fdb1 	bl	8007fb4 <_Balloc>
 8007452:	9001      	str	r0, [sp, #4]
 8007454:	2800      	cmp	r0, #0
 8007456:	d13b      	bne.n	80074d0 <_dtoa_r+0x320>
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <_dtoa_r+0x2f0>)
 800745a:	4602      	mov	r2, r0
 800745c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007460:	e6c0      	b.n	80071e4 <_dtoa_r+0x34>
 8007462:	2301      	movs	r3, #1
 8007464:	e7df      	b.n	8007426 <_dtoa_r+0x276>
 8007466:	bf00      	nop
 8007468:	636f4361 	.word	0x636f4361
 800746c:	3fd287a7 	.word	0x3fd287a7
 8007470:	8b60c8b3 	.word	0x8b60c8b3
 8007474:	3fc68a28 	.word	0x3fc68a28
 8007478:	509f79fb 	.word	0x509f79fb
 800747c:	3fd34413 	.word	0x3fd34413
 8007480:	080092f5 	.word	0x080092f5
 8007484:	0800930c 	.word	0x0800930c
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	080092f1 	.word	0x080092f1
 8007490:	080092e8 	.word	0x080092e8
 8007494:	080092c5 	.word	0x080092c5
 8007498:	3ff80000 	.word	0x3ff80000
 800749c:	08009460 	.word	0x08009460
 80074a0:	08009367 	.word	0x08009367
 80074a4:	2501      	movs	r5, #1
 80074a6:	2300      	movs	r3, #0
 80074a8:	9306      	str	r3, [sp, #24]
 80074aa:	9508      	str	r5, [sp, #32]
 80074ac:	f04f 33ff 	mov.w	r3, #4294967295
 80074b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2312      	movs	r3, #18
 80074b8:	e7b0      	b.n	800741c <_dtoa_r+0x26c>
 80074ba:	2301      	movs	r3, #1
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	e7f5      	b.n	80074ac <_dtoa_r+0x2fc>
 80074c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074c6:	e7b8      	b.n	800743a <_dtoa_r+0x28a>
 80074c8:	3101      	adds	r1, #1
 80074ca:	6041      	str	r1, [r0, #4]
 80074cc:	0052      	lsls	r2, r2, #1
 80074ce:	e7b8      	b.n	8007442 <_dtoa_r+0x292>
 80074d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d2:	9a01      	ldr	r2, [sp, #4]
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	2b0e      	cmp	r3, #14
 80074da:	f200 809d 	bhi.w	8007618 <_dtoa_r+0x468>
 80074de:	2d00      	cmp	r5, #0
 80074e0:	f000 809a 	beq.w	8007618 <_dtoa_r+0x468>
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd32      	ble.n	8007550 <_dtoa_r+0x3a0>
 80074ea:	4ab7      	ldr	r2, [pc, #732]	; (80077c8 <_dtoa_r+0x618>)
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074f8:	9b00      	ldr	r3, [sp, #0]
 80074fa:	05d8      	lsls	r0, r3, #23
 80074fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007500:	d516      	bpl.n	8007530 <_dtoa_r+0x380>
 8007502:	4bb2      	ldr	r3, [pc, #712]	; (80077cc <_dtoa_r+0x61c>)
 8007504:	ec51 0b19 	vmov	r0, r1, d9
 8007508:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800750c:	f7f9 f99e 	bl	800084c <__aeabi_ddiv>
 8007510:	f007 070f 	and.w	r7, r7, #15
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	2503      	movs	r5, #3
 800751a:	4eac      	ldr	r6, [pc, #688]	; (80077cc <_dtoa_r+0x61c>)
 800751c:	b957      	cbnz	r7, 8007534 <_dtoa_r+0x384>
 800751e:	4642      	mov	r2, r8
 8007520:	464b      	mov	r3, r9
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	f7f9 f991 	bl	800084c <__aeabi_ddiv>
 800752a:	4682      	mov	sl, r0
 800752c:	468b      	mov	fp, r1
 800752e:	e028      	b.n	8007582 <_dtoa_r+0x3d2>
 8007530:	2502      	movs	r5, #2
 8007532:	e7f2      	b.n	800751a <_dtoa_r+0x36a>
 8007534:	07f9      	lsls	r1, r7, #31
 8007536:	d508      	bpl.n	800754a <_dtoa_r+0x39a>
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007540:	f7f9 f85a 	bl	80005f8 <__aeabi_dmul>
 8007544:	3501      	adds	r5, #1
 8007546:	4680      	mov	r8, r0
 8007548:	4689      	mov	r9, r1
 800754a:	107f      	asrs	r7, r7, #1
 800754c:	3608      	adds	r6, #8
 800754e:	e7e5      	b.n	800751c <_dtoa_r+0x36c>
 8007550:	f000 809b 	beq.w	800768a <_dtoa_r+0x4da>
 8007554:	9b00      	ldr	r3, [sp, #0]
 8007556:	4f9d      	ldr	r7, [pc, #628]	; (80077cc <_dtoa_r+0x61c>)
 8007558:	425e      	negs	r6, r3
 800755a:	4b9b      	ldr	r3, [pc, #620]	; (80077c8 <_dtoa_r+0x618>)
 800755c:	f006 020f 	and.w	r2, r6, #15
 8007560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	ec51 0b19 	vmov	r0, r1, d9
 800756c:	f7f9 f844 	bl	80005f8 <__aeabi_dmul>
 8007570:	1136      	asrs	r6, r6, #4
 8007572:	4682      	mov	sl, r0
 8007574:	468b      	mov	fp, r1
 8007576:	2300      	movs	r3, #0
 8007578:	2502      	movs	r5, #2
 800757a:	2e00      	cmp	r6, #0
 800757c:	d17a      	bne.n	8007674 <_dtoa_r+0x4c4>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1d3      	bne.n	800752a <_dtoa_r+0x37a>
 8007582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8082 	beq.w	800768e <_dtoa_r+0x4de>
 800758a:	4b91      	ldr	r3, [pc, #580]	; (80077d0 <_dtoa_r+0x620>)
 800758c:	2200      	movs	r2, #0
 800758e:	4650      	mov	r0, sl
 8007590:	4659      	mov	r1, fp
 8007592:	f7f9 faa3 	bl	8000adc <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d079      	beq.n	800768e <_dtoa_r+0x4de>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d076      	beq.n	800768e <_dtoa_r+0x4de>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd36      	ble.n	8007614 <_dtoa_r+0x464>
 80075a6:	9b00      	ldr	r3, [sp, #0]
 80075a8:	4650      	mov	r0, sl
 80075aa:	4659      	mov	r1, fp
 80075ac:	1e5f      	subs	r7, r3, #1
 80075ae:	2200      	movs	r2, #0
 80075b0:	4b88      	ldr	r3, [pc, #544]	; (80077d4 <_dtoa_r+0x624>)
 80075b2:	f7f9 f821 	bl	80005f8 <__aeabi_dmul>
 80075b6:	9e02      	ldr	r6, [sp, #8]
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	3501      	adds	r5, #1
 80075be:	4628      	mov	r0, r5
 80075c0:	f7f8 ffb0 	bl	8000524 <__aeabi_i2d>
 80075c4:	4652      	mov	r2, sl
 80075c6:	465b      	mov	r3, fp
 80075c8:	f7f9 f816 	bl	80005f8 <__aeabi_dmul>
 80075cc:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <_dtoa_r+0x628>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	f7f8 fe5c 	bl	800028c <__adddf3>
 80075d4:	46d0      	mov	r8, sl
 80075d6:	46d9      	mov	r9, fp
 80075d8:	4682      	mov	sl, r0
 80075da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80075de:	2e00      	cmp	r6, #0
 80075e0:	d158      	bne.n	8007694 <_dtoa_r+0x4e4>
 80075e2:	4b7e      	ldr	r3, [pc, #504]	; (80077dc <_dtoa_r+0x62c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f8 fe4d 	bl	8000288 <__aeabi_dsub>
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	4680      	mov	r8, r0
 80075f4:	4689      	mov	r9, r1
 80075f6:	f7f9 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f040 8295 	bne.w	8007b2a <_dtoa_r+0x97a>
 8007600:	4652      	mov	r2, sl
 8007602:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007606:	4640      	mov	r0, r8
 8007608:	4649      	mov	r1, r9
 800760a:	f7f9 fa67 	bl	8000adc <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	f040 8289 	bne.w	8007b26 <_dtoa_r+0x976>
 8007614:	ec5b ab19 	vmov	sl, fp, d9
 8007618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800761a:	2b00      	cmp	r3, #0
 800761c:	f2c0 8148 	blt.w	80078b0 <_dtoa_r+0x700>
 8007620:	9a00      	ldr	r2, [sp, #0]
 8007622:	2a0e      	cmp	r2, #14
 8007624:	f300 8144 	bgt.w	80078b0 <_dtoa_r+0x700>
 8007628:	4b67      	ldr	r3, [pc, #412]	; (80077c8 <_dtoa_r+0x618>)
 800762a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800762e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	f280 80d5 	bge.w	80077e4 <_dtoa_r+0x634>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f300 80d1 	bgt.w	80077e4 <_dtoa_r+0x634>
 8007642:	f040 826f 	bne.w	8007b24 <_dtoa_r+0x974>
 8007646:	4b65      	ldr	r3, [pc, #404]	; (80077dc <_dtoa_r+0x62c>)
 8007648:	2200      	movs	r2, #0
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f8 ffd3 	bl	80005f8 <__aeabi_dmul>
 8007652:	4652      	mov	r2, sl
 8007654:	465b      	mov	r3, fp
 8007656:	f7f9 fa55 	bl	8000b04 <__aeabi_dcmpge>
 800765a:	9e03      	ldr	r6, [sp, #12]
 800765c:	4637      	mov	r7, r6
 800765e:	2800      	cmp	r0, #0
 8007660:	f040 8245 	bne.w	8007aee <_dtoa_r+0x93e>
 8007664:	9d01      	ldr	r5, [sp, #4]
 8007666:	2331      	movs	r3, #49	; 0x31
 8007668:	f805 3b01 	strb.w	r3, [r5], #1
 800766c:	9b00      	ldr	r3, [sp, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	e240      	b.n	8007af6 <_dtoa_r+0x946>
 8007674:	07f2      	lsls	r2, r6, #31
 8007676:	d505      	bpl.n	8007684 <_dtoa_r+0x4d4>
 8007678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767c:	f7f8 ffbc 	bl	80005f8 <__aeabi_dmul>
 8007680:	3501      	adds	r5, #1
 8007682:	2301      	movs	r3, #1
 8007684:	1076      	asrs	r6, r6, #1
 8007686:	3708      	adds	r7, #8
 8007688:	e777      	b.n	800757a <_dtoa_r+0x3ca>
 800768a:	2502      	movs	r5, #2
 800768c:	e779      	b.n	8007582 <_dtoa_r+0x3d2>
 800768e:	9f00      	ldr	r7, [sp, #0]
 8007690:	9e03      	ldr	r6, [sp, #12]
 8007692:	e794      	b.n	80075be <_dtoa_r+0x40e>
 8007694:	9901      	ldr	r1, [sp, #4]
 8007696:	4b4c      	ldr	r3, [pc, #304]	; (80077c8 <_dtoa_r+0x618>)
 8007698:	4431      	add	r1, r6
 800769a:	910d      	str	r1, [sp, #52]	; 0x34
 800769c:	9908      	ldr	r1, [sp, #32]
 800769e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d043      	beq.n	8007732 <_dtoa_r+0x582>
 80076aa:	494d      	ldr	r1, [pc, #308]	; (80077e0 <_dtoa_r+0x630>)
 80076ac:	2000      	movs	r0, #0
 80076ae:	f7f9 f8cd 	bl	800084c <__aeabi_ddiv>
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	9d01      	ldr	r5, [sp, #4]
 80076bc:	4682      	mov	sl, r0
 80076be:	468b      	mov	fp, r1
 80076c0:	4649      	mov	r1, r9
 80076c2:	4640      	mov	r0, r8
 80076c4:	f7f9 fa48 	bl	8000b58 <__aeabi_d2iz>
 80076c8:	4606      	mov	r6, r0
 80076ca:	f7f8 ff2b 	bl	8000524 <__aeabi_i2d>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4640      	mov	r0, r8
 80076d4:	4649      	mov	r1, r9
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	3630      	adds	r6, #48	; 0x30
 80076dc:	f805 6b01 	strb.w	r6, [r5], #1
 80076e0:	4652      	mov	r2, sl
 80076e2:	465b      	mov	r3, fp
 80076e4:	4680      	mov	r8, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	f7f9 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d163      	bne.n	80077b8 <_dtoa_r+0x608>
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	4936      	ldr	r1, [pc, #216]	; (80077d0 <_dtoa_r+0x620>)
 80076f6:	2000      	movs	r0, #0
 80076f8:	f7f8 fdc6 	bl	8000288 <__aeabi_dsub>
 80076fc:	4652      	mov	r2, sl
 80076fe:	465b      	mov	r3, fp
 8007700:	f7f9 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 80b5 	bne.w	8007874 <_dtoa_r+0x6c4>
 800770a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770c:	429d      	cmp	r5, r3
 800770e:	d081      	beq.n	8007614 <_dtoa_r+0x464>
 8007710:	4b30      	ldr	r3, [pc, #192]	; (80077d4 <_dtoa_r+0x624>)
 8007712:	2200      	movs	r2, #0
 8007714:	4650      	mov	r0, sl
 8007716:	4659      	mov	r1, fp
 8007718:	f7f8 ff6e 	bl	80005f8 <__aeabi_dmul>
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <_dtoa_r+0x624>)
 800771e:	4682      	mov	sl, r0
 8007720:	468b      	mov	fp, r1
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	2200      	movs	r2, #0
 8007728:	f7f8 ff66 	bl	80005f8 <__aeabi_dmul>
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	e7c6      	b.n	80076c0 <_dtoa_r+0x510>
 8007732:	4650      	mov	r0, sl
 8007734:	4659      	mov	r1, fp
 8007736:	f7f8 ff5f 	bl	80005f8 <__aeabi_dmul>
 800773a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773c:	9d01      	ldr	r5, [sp, #4]
 800773e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007740:	4682      	mov	sl, r0
 8007742:	468b      	mov	fp, r1
 8007744:	4649      	mov	r1, r9
 8007746:	4640      	mov	r0, r8
 8007748:	f7f9 fa06 	bl	8000b58 <__aeabi_d2iz>
 800774c:	4606      	mov	r6, r0
 800774e:	f7f8 fee9 	bl	8000524 <__aeabi_i2d>
 8007752:	3630      	adds	r6, #48	; 0x30
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	f805 6b01 	strb.w	r6, [r5], #1
 8007764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007766:	429d      	cmp	r5, r3
 8007768:	4680      	mov	r8, r0
 800776a:	4689      	mov	r9, r1
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	d124      	bne.n	80077bc <_dtoa_r+0x60c>
 8007772:	4b1b      	ldr	r3, [pc, #108]	; (80077e0 <_dtoa_r+0x630>)
 8007774:	4650      	mov	r0, sl
 8007776:	4659      	mov	r1, fp
 8007778:	f7f8 fd88 	bl	800028c <__adddf3>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f9 f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d173      	bne.n	8007874 <_dtoa_r+0x6c4>
 800778c:	4652      	mov	r2, sl
 800778e:	465b      	mov	r3, fp
 8007790:	4913      	ldr	r1, [pc, #76]	; (80077e0 <_dtoa_r+0x630>)
 8007792:	2000      	movs	r0, #0
 8007794:	f7f8 fd78 	bl	8000288 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4640      	mov	r0, r8
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f9 f99c 	bl	8000adc <__aeabi_dcmplt>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f43f af35 	beq.w	8007614 <_dtoa_r+0x464>
 80077aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077ac:	1e6b      	subs	r3, r5, #1
 80077ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d0f8      	beq.n	80077aa <_dtoa_r+0x5fa>
 80077b8:	9700      	str	r7, [sp, #0]
 80077ba:	e049      	b.n	8007850 <_dtoa_r+0x6a0>
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <_dtoa_r+0x624>)
 80077be:	f7f8 ff1b 	bl	80005f8 <__aeabi_dmul>
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	e7bd      	b.n	8007744 <_dtoa_r+0x594>
 80077c8:	08009460 	.word	0x08009460
 80077cc:	08009438 	.word	0x08009438
 80077d0:	3ff00000 	.word	0x3ff00000
 80077d4:	40240000 	.word	0x40240000
 80077d8:	401c0000 	.word	0x401c0000
 80077dc:	40140000 	.word	0x40140000
 80077e0:	3fe00000 	.word	0x3fe00000
 80077e4:	9d01      	ldr	r5, [sp, #4]
 80077e6:	4656      	mov	r6, sl
 80077e8:	465f      	mov	r7, fp
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f9 f82b 	bl	800084c <__aeabi_ddiv>
 80077f6:	f7f9 f9af 	bl	8000b58 <__aeabi_d2iz>
 80077fa:	4682      	mov	sl, r0
 80077fc:	f7f8 fe92 	bl	8000524 <__aeabi_i2d>
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	f7f8 fef8 	bl	80005f8 <__aeabi_dmul>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007814:	f7f8 fd38 	bl	8000288 <__aeabi_dsub>
 8007818:	f805 6b01 	strb.w	r6, [r5], #1
 800781c:	9e01      	ldr	r6, [sp, #4]
 800781e:	9f03      	ldr	r7, [sp, #12]
 8007820:	1bae      	subs	r6, r5, r6
 8007822:	42b7      	cmp	r7, r6
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	d135      	bne.n	8007896 <_dtoa_r+0x6e6>
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4642      	mov	r2, r8
 8007830:	464b      	mov	r3, r9
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	f7f9 f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800783a:	b9d0      	cbnz	r0, 8007872 <_dtoa_r+0x6c2>
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8007848:	b110      	cbz	r0, 8007850 <_dtoa_r+0x6a0>
 800784a:	f01a 0f01 	tst.w	sl, #1
 800784e:	d110      	bne.n	8007872 <_dtoa_r+0x6c2>
 8007850:	4620      	mov	r0, r4
 8007852:	ee18 1a10 	vmov	r1, s16
 8007856:	f000 fbed 	bl	8008034 <_Bfree>
 800785a:	2300      	movs	r3, #0
 800785c:	9800      	ldr	r0, [sp, #0]
 800785e:	702b      	strb	r3, [r5, #0]
 8007860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007862:	3001      	adds	r0, #1
 8007864:	6018      	str	r0, [r3, #0]
 8007866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007868:	2b00      	cmp	r3, #0
 800786a:	f43f acf1 	beq.w	8007250 <_dtoa_r+0xa0>
 800786e:	601d      	str	r5, [r3, #0]
 8007870:	e4ee      	b.n	8007250 <_dtoa_r+0xa0>
 8007872:	9f00      	ldr	r7, [sp, #0]
 8007874:	462b      	mov	r3, r5
 8007876:	461d      	mov	r5, r3
 8007878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787c:	2a39      	cmp	r2, #57	; 0x39
 800787e:	d106      	bne.n	800788e <_dtoa_r+0x6de>
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	429a      	cmp	r2, r3
 8007884:	d1f7      	bne.n	8007876 <_dtoa_r+0x6c6>
 8007886:	9901      	ldr	r1, [sp, #4]
 8007888:	2230      	movs	r2, #48	; 0x30
 800788a:	3701      	adds	r7, #1
 800788c:	700a      	strb	r2, [r1, #0]
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	3201      	adds	r2, #1
 8007892:	701a      	strb	r2, [r3, #0]
 8007894:	e790      	b.n	80077b8 <_dtoa_r+0x608>
 8007896:	4ba6      	ldr	r3, [pc, #664]	; (8007b30 <_dtoa_r+0x980>)
 8007898:	2200      	movs	r2, #0
 800789a:	f7f8 fead 	bl	80005f8 <__aeabi_dmul>
 800789e:	2200      	movs	r2, #0
 80078a0:	2300      	movs	r3, #0
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	f7f9 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d09d      	beq.n	80077ea <_dtoa_r+0x63a>
 80078ae:	e7cf      	b.n	8007850 <_dtoa_r+0x6a0>
 80078b0:	9a08      	ldr	r2, [sp, #32]
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	f000 80d7 	beq.w	8007a66 <_dtoa_r+0x8b6>
 80078b8:	9a06      	ldr	r2, [sp, #24]
 80078ba:	2a01      	cmp	r2, #1
 80078bc:	f300 80ba 	bgt.w	8007a34 <_dtoa_r+0x884>
 80078c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	f000 80b2 	beq.w	8007a2c <_dtoa_r+0x87c>
 80078c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078cc:	9e07      	ldr	r6, [sp, #28]
 80078ce:	9d04      	ldr	r5, [sp, #16]
 80078d0:	9a04      	ldr	r2, [sp, #16]
 80078d2:	441a      	add	r2, r3
 80078d4:	9204      	str	r2, [sp, #16]
 80078d6:	9a05      	ldr	r2, [sp, #20]
 80078d8:	2101      	movs	r1, #1
 80078da:	441a      	add	r2, r3
 80078dc:	4620      	mov	r0, r4
 80078de:	9205      	str	r2, [sp, #20]
 80078e0:	f000 fc60 	bl	80081a4 <__i2b>
 80078e4:	4607      	mov	r7, r0
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	dd0c      	ble.n	8007904 <_dtoa_r+0x754>
 80078ea:	9b05      	ldr	r3, [sp, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd09      	ble.n	8007904 <_dtoa_r+0x754>
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	bfa8      	it	ge
 80078f6:	462b      	movge	r3, r5
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	9204      	str	r2, [sp, #16]
 80078fc:	9a05      	ldr	r2, [sp, #20]
 80078fe:	1aed      	subs	r5, r5, r3
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	9305      	str	r3, [sp, #20]
 8007904:	9b07      	ldr	r3, [sp, #28]
 8007906:	b31b      	cbz	r3, 8007950 <_dtoa_r+0x7a0>
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80af 	beq.w	8007a6e <_dtoa_r+0x8be>
 8007910:	2e00      	cmp	r6, #0
 8007912:	dd13      	ble.n	800793c <_dtoa_r+0x78c>
 8007914:	4639      	mov	r1, r7
 8007916:	4632      	mov	r2, r6
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fd03 	bl	8008324 <__pow5mult>
 800791e:	ee18 2a10 	vmov	r2, s16
 8007922:	4601      	mov	r1, r0
 8007924:	4607      	mov	r7, r0
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fc52 	bl	80081d0 <__multiply>
 800792c:	ee18 1a10 	vmov	r1, s16
 8007930:	4680      	mov	r8, r0
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fb7e 	bl	8008034 <_Bfree>
 8007938:	ee08 8a10 	vmov	s16, r8
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	1b9a      	subs	r2, r3, r6
 8007940:	d006      	beq.n	8007950 <_dtoa_r+0x7a0>
 8007942:	ee18 1a10 	vmov	r1, s16
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fcec 	bl	8008324 <__pow5mult>
 800794c:	ee08 0a10 	vmov	s16, r0
 8007950:	2101      	movs	r1, #1
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fc26 	bl	80081a4 <__i2b>
 8007958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	4606      	mov	r6, r0
 800795e:	f340 8088 	ble.w	8007a72 <_dtoa_r+0x8c2>
 8007962:	461a      	mov	r2, r3
 8007964:	4601      	mov	r1, r0
 8007966:	4620      	mov	r0, r4
 8007968:	f000 fcdc 	bl	8008324 <__pow5mult>
 800796c:	9b06      	ldr	r3, [sp, #24]
 800796e:	2b01      	cmp	r3, #1
 8007970:	4606      	mov	r6, r0
 8007972:	f340 8081 	ble.w	8007a78 <_dtoa_r+0x8c8>
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	6933      	ldr	r3, [r6, #16]
 800797c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007980:	6918      	ldr	r0, [r3, #16]
 8007982:	f000 fbbf 	bl	8008104 <__hi0bits>
 8007986:	f1c0 0020 	rsb	r0, r0, #32
 800798a:	9b05      	ldr	r3, [sp, #20]
 800798c:	4418      	add	r0, r3
 800798e:	f010 001f 	ands.w	r0, r0, #31
 8007992:	f000 8092 	beq.w	8007aba <_dtoa_r+0x90a>
 8007996:	f1c0 0320 	rsb	r3, r0, #32
 800799a:	2b04      	cmp	r3, #4
 800799c:	f340 808a 	ble.w	8007ab4 <_dtoa_r+0x904>
 80079a0:	f1c0 001c 	rsb	r0, r0, #28
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	4403      	add	r3, r0
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	9b05      	ldr	r3, [sp, #20]
 80079ac:	4403      	add	r3, r0
 80079ae:	4405      	add	r5, r0
 80079b0:	9305      	str	r3, [sp, #20]
 80079b2:	9b04      	ldr	r3, [sp, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dd07      	ble.n	80079c8 <_dtoa_r+0x818>
 80079b8:	ee18 1a10 	vmov	r1, s16
 80079bc:	461a      	mov	r2, r3
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 fd0a 	bl	80083d8 <__lshift>
 80079c4:	ee08 0a10 	vmov	s16, r0
 80079c8:	9b05      	ldr	r3, [sp, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dd05      	ble.n	80079da <_dtoa_r+0x82a>
 80079ce:	4631      	mov	r1, r6
 80079d0:	461a      	mov	r2, r3
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fd00 	bl	80083d8 <__lshift>
 80079d8:	4606      	mov	r6, r0
 80079da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d06e      	beq.n	8007abe <_dtoa_r+0x90e>
 80079e0:	ee18 0a10 	vmov	r0, s16
 80079e4:	4631      	mov	r1, r6
 80079e6:	f000 fd67 	bl	80084b8 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	da67      	bge.n	8007abe <_dtoa_r+0x90e>
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	ee18 1a10 	vmov	r1, s16
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	220a      	movs	r2, #10
 80079fa:	2300      	movs	r3, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fb3b 	bl	8008078 <__multadd>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	ee08 0a10 	vmov	s16, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 81b1 	beq.w	8007d70 <_dtoa_r+0xbc0>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4639      	mov	r1, r7
 8007a12:	220a      	movs	r2, #10
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fb2f 	bl	8008078 <__multadd>
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	4607      	mov	r7, r0
 8007a20:	f300 808e 	bgt.w	8007b40 <_dtoa_r+0x990>
 8007a24:	9b06      	ldr	r3, [sp, #24]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	dc51      	bgt.n	8007ace <_dtoa_r+0x91e>
 8007a2a:	e089      	b.n	8007b40 <_dtoa_r+0x990>
 8007a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a32:	e74b      	b.n	80078cc <_dtoa_r+0x71c>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1e5e      	subs	r6, r3, #1
 8007a38:	9b07      	ldr	r3, [sp, #28]
 8007a3a:	42b3      	cmp	r3, r6
 8007a3c:	bfbf      	itttt	lt
 8007a3e:	9b07      	ldrlt	r3, [sp, #28]
 8007a40:	9607      	strlt	r6, [sp, #28]
 8007a42:	1af2      	sublt	r2, r6, r3
 8007a44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a46:	bfb6      	itet	lt
 8007a48:	189b      	addlt	r3, r3, r2
 8007a4a:	1b9e      	subge	r6, r3, r6
 8007a4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	bfb8      	it	lt
 8007a52:	2600      	movlt	r6, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfb7      	itett	lt
 8007a58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a60:	1a9d      	sublt	r5, r3, r2
 8007a62:	2300      	movlt	r3, #0
 8007a64:	e734      	b.n	80078d0 <_dtoa_r+0x720>
 8007a66:	9e07      	ldr	r6, [sp, #28]
 8007a68:	9d04      	ldr	r5, [sp, #16]
 8007a6a:	9f08      	ldr	r7, [sp, #32]
 8007a6c:	e73b      	b.n	80078e6 <_dtoa_r+0x736>
 8007a6e:	9a07      	ldr	r2, [sp, #28]
 8007a70:	e767      	b.n	8007942 <_dtoa_r+0x792>
 8007a72:	9b06      	ldr	r3, [sp, #24]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	dc18      	bgt.n	8007aaa <_dtoa_r+0x8fa>
 8007a78:	f1ba 0f00 	cmp.w	sl, #0
 8007a7c:	d115      	bne.n	8007aaa <_dtoa_r+0x8fa>
 8007a7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a82:	b993      	cbnz	r3, 8007aaa <_dtoa_r+0x8fa>
 8007a84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a88:	0d1b      	lsrs	r3, r3, #20
 8007a8a:	051b      	lsls	r3, r3, #20
 8007a8c:	b183      	cbz	r3, 8007ab0 <_dtoa_r+0x900>
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	9b05      	ldr	r3, [sp, #20]
 8007a96:	3301      	adds	r3, #1
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	f04f 0801 	mov.w	r8, #1
 8007a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f af6a 	bne.w	800797a <_dtoa_r+0x7ca>
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	e76f      	b.n	800798a <_dtoa_r+0x7da>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	e7f6      	b.n	8007a9e <_dtoa_r+0x8ee>
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	e7f4      	b.n	8007a9e <_dtoa_r+0x8ee>
 8007ab4:	f43f af7d 	beq.w	80079b2 <_dtoa_r+0x802>
 8007ab8:	4618      	mov	r0, r3
 8007aba:	301c      	adds	r0, #28
 8007abc:	e772      	b.n	80079a4 <_dtoa_r+0x7f4>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dc37      	bgt.n	8007b34 <_dtoa_r+0x984>
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	dd34      	ble.n	8007b34 <_dtoa_r+0x984>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	b96b      	cbnz	r3, 8007aee <_dtoa_r+0x93e>
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 face 	bl	8008078 <__multadd>
 8007adc:	4601      	mov	r1, r0
 8007ade:	4606      	mov	r6, r0
 8007ae0:	ee18 0a10 	vmov	r0, s16
 8007ae4:	f000 fce8 	bl	80084b8 <__mcmp>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f73f adbb 	bgt.w	8007664 <_dtoa_r+0x4b4>
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	9d01      	ldr	r5, [sp, #4]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	4631      	mov	r1, r6
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fa99 	bl	8008034 <_Bfree>
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	f43f aea4 	beq.w	8007850 <_dtoa_r+0x6a0>
 8007b08:	f1b8 0f00 	cmp.w	r8, #0
 8007b0c:	d005      	beq.n	8007b1a <_dtoa_r+0x96a>
 8007b0e:	45b8      	cmp	r8, r7
 8007b10:	d003      	beq.n	8007b1a <_dtoa_r+0x96a>
 8007b12:	4641      	mov	r1, r8
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fa8d 	bl	8008034 <_Bfree>
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 fa89 	bl	8008034 <_Bfree>
 8007b22:	e695      	b.n	8007850 <_dtoa_r+0x6a0>
 8007b24:	2600      	movs	r6, #0
 8007b26:	4637      	mov	r7, r6
 8007b28:	e7e1      	b.n	8007aee <_dtoa_r+0x93e>
 8007b2a:	9700      	str	r7, [sp, #0]
 8007b2c:	4637      	mov	r7, r6
 8007b2e:	e599      	b.n	8007664 <_dtoa_r+0x4b4>
 8007b30:	40240000 	.word	0x40240000
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80ca 	beq.w	8007cd0 <_dtoa_r+0xb20>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	dd05      	ble.n	8007b50 <_dtoa_r+0x9a0>
 8007b44:	4639      	mov	r1, r7
 8007b46:	462a      	mov	r2, r5
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fc45 	bl	80083d8 <__lshift>
 8007b4e:	4607      	mov	r7, r0
 8007b50:	f1b8 0f00 	cmp.w	r8, #0
 8007b54:	d05b      	beq.n	8007c0e <_dtoa_r+0xa5e>
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fa2b 	bl	8007fb4 <_Balloc>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	b928      	cbnz	r0, 8007b6e <_dtoa_r+0x9be>
 8007b62:	4b87      	ldr	r3, [pc, #540]	; (8007d80 <_dtoa_r+0xbd0>)
 8007b64:	4602      	mov	r2, r0
 8007b66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b6a:	f7ff bb3b 	b.w	80071e4 <_dtoa_r+0x34>
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	3202      	adds	r2, #2
 8007b72:	0092      	lsls	r2, r2, #2
 8007b74:	f107 010c 	add.w	r1, r7, #12
 8007b78:	300c      	adds	r0, #12
 8007b7a:	f000 fa0d 	bl	8007f98 <memcpy>
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4629      	mov	r1, r5
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 fc28 	bl	80083d8 <__lshift>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	f103 0901 	add.w	r9, r3, #1
 8007b8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	f00a 0301 	and.w	r3, sl, #1
 8007b9a:	46b8      	mov	r8, r7
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	ee18 0a10 	vmov	r0, s16
 8007ba6:	f7ff fa75 	bl	8007094 <quorem>
 8007baa:	4641      	mov	r1, r8
 8007bac:	9002      	str	r0, [sp, #8]
 8007bae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bb2:	ee18 0a10 	vmov	r0, s16
 8007bb6:	f000 fc7f 	bl	80084b8 <__mcmp>
 8007bba:	463a      	mov	r2, r7
 8007bbc:	9003      	str	r0, [sp, #12]
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fc95 	bl	80084f0 <__mdiff>
 8007bc6:	68c2      	ldr	r2, [r0, #12]
 8007bc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007bcc:	4605      	mov	r5, r0
 8007bce:	bb02      	cbnz	r2, 8007c12 <_dtoa_r+0xa62>
 8007bd0:	4601      	mov	r1, r0
 8007bd2:	ee18 0a10 	vmov	r0, s16
 8007bd6:	f000 fc6f 	bl	80084b8 <__mcmp>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4620      	mov	r0, r4
 8007be0:	9207      	str	r2, [sp, #28]
 8007be2:	f000 fa27 	bl	8008034 <_Bfree>
 8007be6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007bea:	ea43 0102 	orr.w	r1, r3, r2
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	464d      	mov	r5, r9
 8007bf4:	d10f      	bne.n	8007c16 <_dtoa_r+0xa66>
 8007bf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bfa:	d02a      	beq.n	8007c52 <_dtoa_r+0xaa2>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dd02      	ble.n	8007c08 <_dtoa_r+0xa58>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c08:	f88b a000 	strb.w	sl, [fp]
 8007c0c:	e775      	b.n	8007afa <_dtoa_r+0x94a>
 8007c0e:	4638      	mov	r0, r7
 8007c10:	e7ba      	b.n	8007b88 <_dtoa_r+0x9d8>
 8007c12:	2201      	movs	r2, #1
 8007c14:	e7e2      	b.n	8007bdc <_dtoa_r+0xa2c>
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db04      	blt.n	8007c26 <_dtoa_r+0xa76>
 8007c1c:	9906      	ldr	r1, [sp, #24]
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	9904      	ldr	r1, [sp, #16]
 8007c22:	430b      	orrs	r3, r1
 8007c24:	d122      	bne.n	8007c6c <_dtoa_r+0xabc>
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	ddee      	ble.n	8007c08 <_dtoa_r+0xa58>
 8007c2a:	ee18 1a10 	vmov	r1, s16
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 fbd1 	bl	80083d8 <__lshift>
 8007c36:	4631      	mov	r1, r6
 8007c38:	ee08 0a10 	vmov	s16, r0
 8007c3c:	f000 fc3c 	bl	80084b8 <__mcmp>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	dc03      	bgt.n	8007c4c <_dtoa_r+0xa9c>
 8007c44:	d1e0      	bne.n	8007c08 <_dtoa_r+0xa58>
 8007c46:	f01a 0f01 	tst.w	sl, #1
 8007c4a:	d0dd      	beq.n	8007c08 <_dtoa_r+0xa58>
 8007c4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c50:	d1d7      	bne.n	8007c02 <_dtoa_r+0xa52>
 8007c52:	2339      	movs	r3, #57	; 0x39
 8007c54:	f88b 3000 	strb.w	r3, [fp]
 8007c58:	462b      	mov	r3, r5
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c62:	2a39      	cmp	r2, #57	; 0x39
 8007c64:	d071      	beq.n	8007d4a <_dtoa_r+0xb9a>
 8007c66:	3201      	adds	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e746      	b.n	8007afa <_dtoa_r+0x94a>
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	dd07      	ble.n	8007c80 <_dtoa_r+0xad0>
 8007c70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c74:	d0ed      	beq.n	8007c52 <_dtoa_r+0xaa2>
 8007c76:	f10a 0301 	add.w	r3, sl, #1
 8007c7a:	f88b 3000 	strb.w	r3, [fp]
 8007c7e:	e73c      	b.n	8007afa <_dtoa_r+0x94a>
 8007c80:	9b05      	ldr	r3, [sp, #20]
 8007c82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c86:	4599      	cmp	r9, r3
 8007c88:	d047      	beq.n	8007d1a <_dtoa_r+0xb6a>
 8007c8a:	ee18 1a10 	vmov	r1, s16
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f9f0 	bl	8008078 <__multadd>
 8007c98:	45b8      	cmp	r8, r7
 8007c9a:	ee08 0a10 	vmov	s16, r0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	f04f 020a 	mov.w	r2, #10
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	4620      	mov	r0, r4
 8007caa:	d106      	bne.n	8007cba <_dtoa_r+0xb0a>
 8007cac:	f000 f9e4 	bl	8008078 <__multadd>
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	f109 0901 	add.w	r9, r9, #1
 8007cb8:	e772      	b.n	8007ba0 <_dtoa_r+0x9f0>
 8007cba:	f000 f9dd 	bl	8008078 <__multadd>
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f9d6 	bl	8008078 <__multadd>
 8007ccc:	4607      	mov	r7, r0
 8007cce:	e7f1      	b.n	8007cb4 <_dtoa_r+0xb04>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	9302      	str	r3, [sp, #8]
 8007cd4:	9d01      	ldr	r5, [sp, #4]
 8007cd6:	ee18 0a10 	vmov	r0, s16
 8007cda:	4631      	mov	r1, r6
 8007cdc:	f7ff f9da 	bl	8007094 <quorem>
 8007ce0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	f805 ab01 	strb.w	sl, [r5], #1
 8007cea:	1aea      	subs	r2, r5, r3
 8007cec:	9b02      	ldr	r3, [sp, #8]
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	dd09      	ble.n	8007d06 <_dtoa_r+0xb56>
 8007cf2:	ee18 1a10 	vmov	r1, s16
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 f9bc 	bl	8008078 <__multadd>
 8007d00:	ee08 0a10 	vmov	s16, r0
 8007d04:	e7e7      	b.n	8007cd6 <_dtoa_r+0xb26>
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfc8      	it	gt
 8007d0c:	461d      	movgt	r5, r3
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	bfd8      	it	le
 8007d12:	2501      	movle	r5, #1
 8007d14:	441d      	add	r5, r3
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	ee18 1a10 	vmov	r1, s16
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fb59 	bl	80083d8 <__lshift>
 8007d26:	4631      	mov	r1, r6
 8007d28:	ee08 0a10 	vmov	s16, r0
 8007d2c:	f000 fbc4 	bl	80084b8 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dc91      	bgt.n	8007c58 <_dtoa_r+0xaa8>
 8007d34:	d102      	bne.n	8007d3c <_dtoa_r+0xb8c>
 8007d36:	f01a 0f01 	tst.w	sl, #1
 8007d3a:	d18d      	bne.n	8007c58 <_dtoa_r+0xaa8>
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	461d      	mov	r5, r3
 8007d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d44:	2a30      	cmp	r2, #48	; 0x30
 8007d46:	d0fa      	beq.n	8007d3e <_dtoa_r+0xb8e>
 8007d48:	e6d7      	b.n	8007afa <_dtoa_r+0x94a>
 8007d4a:	9a01      	ldr	r2, [sp, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d184      	bne.n	8007c5a <_dtoa_r+0xaaa>
 8007d50:	9b00      	ldr	r3, [sp, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2331      	movs	r3, #49	; 0x31
 8007d58:	7013      	strb	r3, [r2, #0]
 8007d5a:	e6ce      	b.n	8007afa <_dtoa_r+0x94a>
 8007d5c:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <_dtoa_r+0xbd4>)
 8007d5e:	f7ff ba95 	b.w	800728c <_dtoa_r+0xdc>
 8007d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f47f aa6e 	bne.w	8007246 <_dtoa_r+0x96>
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <_dtoa_r+0xbd8>)
 8007d6c:	f7ff ba8e 	b.w	800728c <_dtoa_r+0xdc>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dcae      	bgt.n	8007cd4 <_dtoa_r+0xb24>
 8007d76:	9b06      	ldr	r3, [sp, #24]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	f73f aea8 	bgt.w	8007ace <_dtoa_r+0x91e>
 8007d7e:	e7a9      	b.n	8007cd4 <_dtoa_r+0xb24>
 8007d80:	08009367 	.word	0x08009367
 8007d84:	080092c4 	.word	0x080092c4
 8007d88:	080092e8 	.word	0x080092e8

08007d8c <std>:
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	e9c0 3300 	strd	r3, r3, [r0]
 8007d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d9a:	6083      	str	r3, [r0, #8]
 8007d9c:	8181      	strh	r1, [r0, #12]
 8007d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007da0:	81c2      	strh	r2, [r0, #14]
 8007da2:	6183      	str	r3, [r0, #24]
 8007da4:	4619      	mov	r1, r3
 8007da6:	2208      	movs	r2, #8
 8007da8:	305c      	adds	r0, #92	; 0x5c
 8007daa:	f7fe fce9 	bl	8006780 <memset>
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <std+0x38>)
 8007db0:	6263      	str	r3, [r4, #36]	; 0x24
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <std+0x3c>)
 8007db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <std+0x40>)
 8007db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <std+0x44>)
 8007dbc:	6224      	str	r4, [r4, #32]
 8007dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08008b7d 	.word	0x08008b7d
 8007dc8:	08008b9f 	.word	0x08008b9f
 8007dcc:	08008bd7 	.word	0x08008bd7
 8007dd0:	08008bfb 	.word	0x08008bfb

08007dd4 <_cleanup_r>:
 8007dd4:	4901      	ldr	r1, [pc, #4]	; (8007ddc <_cleanup_r+0x8>)
 8007dd6:	f000 b8af 	b.w	8007f38 <_fwalk_reent>
 8007dda:	bf00      	nop
 8007ddc:	08008f11 	.word	0x08008f11

08007de0 <__sfmoreglue>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	2268      	movs	r2, #104	; 0x68
 8007de4:	1e4d      	subs	r5, r1, #1
 8007de6:	4355      	muls	r5, r2
 8007de8:	460e      	mov	r6, r1
 8007dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dee:	f000 fce7 	bl	80087c0 <_malloc_r>
 8007df2:	4604      	mov	r4, r0
 8007df4:	b140      	cbz	r0, 8007e08 <__sfmoreglue+0x28>
 8007df6:	2100      	movs	r1, #0
 8007df8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dfc:	300c      	adds	r0, #12
 8007dfe:	60a0      	str	r0, [r4, #8]
 8007e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e04:	f7fe fcbc 	bl	8006780 <memset>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}

08007e0c <__sfp_lock_acquire>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__sfp_lock_acquire+0x8>)
 8007e0e:	f000 b8b8 	b.w	8007f82 <__retarget_lock_acquire_recursive>
 8007e12:	bf00      	nop
 8007e14:	200008a5 	.word	0x200008a5

08007e18 <__sfp_lock_release>:
 8007e18:	4801      	ldr	r0, [pc, #4]	; (8007e20 <__sfp_lock_release+0x8>)
 8007e1a:	f000 b8b3 	b.w	8007f84 <__retarget_lock_release_recursive>
 8007e1e:	bf00      	nop
 8007e20:	200008a5 	.word	0x200008a5

08007e24 <__sinit_lock_acquire>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__sinit_lock_acquire+0x8>)
 8007e26:	f000 b8ac 	b.w	8007f82 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	200008a6 	.word	0x200008a6

08007e30 <__sinit_lock_release>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sinit_lock_release+0x8>)
 8007e32:	f000 b8a7 	b.w	8007f84 <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	200008a6 	.word	0x200008a6

08007e3c <__sinit>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f7ff fff0 	bl	8007e24 <__sinit_lock_acquire>
 8007e44:	69a3      	ldr	r3, [r4, #24]
 8007e46:	b11b      	cbz	r3, 8007e50 <__sinit+0x14>
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f7ff bff0 	b.w	8007e30 <__sinit_lock_release>
 8007e50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e54:	6523      	str	r3, [r4, #80]	; 0x50
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <__sinit+0x68>)
 8007e58:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <__sinit+0x6c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	bf04      	itt	eq
 8007e62:	2301      	moveq	r3, #1
 8007e64:	61a3      	streq	r3, [r4, #24]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f820 	bl	8007eac <__sfp>
 8007e6c:	6060      	str	r0, [r4, #4]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f81c 	bl	8007eac <__sfp>
 8007e74:	60a0      	str	r0, [r4, #8]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 f818 	bl	8007eac <__sfp>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	60e0      	str	r0, [r4, #12]
 8007e80:	2104      	movs	r1, #4
 8007e82:	6860      	ldr	r0, [r4, #4]
 8007e84:	f7ff ff82 	bl	8007d8c <std>
 8007e88:	68a0      	ldr	r0, [r4, #8]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2109      	movs	r1, #9
 8007e8e:	f7ff ff7d 	bl	8007d8c <std>
 8007e92:	68e0      	ldr	r0, [r4, #12]
 8007e94:	2202      	movs	r2, #2
 8007e96:	2112      	movs	r1, #18
 8007e98:	f7ff ff78 	bl	8007d8c <std>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	61a3      	str	r3, [r4, #24]
 8007ea0:	e7d2      	b.n	8007e48 <__sinit+0xc>
 8007ea2:	bf00      	nop
 8007ea4:	080092b0 	.word	0x080092b0
 8007ea8:	08007dd5 	.word	0x08007dd5

08007eac <__sfp>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	4607      	mov	r7, r0
 8007eb0:	f7ff ffac 	bl	8007e0c <__sfp_lock_acquire>
 8007eb4:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <__sfp+0x84>)
 8007eb6:	681e      	ldr	r6, [r3, #0]
 8007eb8:	69b3      	ldr	r3, [r6, #24]
 8007eba:	b913      	cbnz	r3, 8007ec2 <__sfp+0x16>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff ffbd 	bl	8007e3c <__sinit>
 8007ec2:	3648      	adds	r6, #72	; 0x48
 8007ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	d503      	bpl.n	8007ed4 <__sfp+0x28>
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	b30b      	cbz	r3, 8007f14 <__sfp+0x68>
 8007ed0:	6836      	ldr	r6, [r6, #0]
 8007ed2:	e7f7      	b.n	8007ec4 <__sfp+0x18>
 8007ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ed8:	b9d5      	cbnz	r5, 8007f10 <__sfp+0x64>
 8007eda:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <__sfp+0x88>)
 8007edc:	60e3      	str	r3, [r4, #12]
 8007ede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee4:	f000 f84c 	bl	8007f80 <__retarget_lock_init_recursive>
 8007ee8:	f7ff ff96 	bl	8007e18 <__sfp_lock_release>
 8007eec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ef4:	6025      	str	r5, [r4, #0]
 8007ef6:	61a5      	str	r5, [r4, #24]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	4629      	mov	r1, r5
 8007efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f00:	f7fe fc3e 	bl	8006780 <memset>
 8007f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f10:	3468      	adds	r4, #104	; 0x68
 8007f12:	e7d9      	b.n	8007ec8 <__sfp+0x1c>
 8007f14:	2104      	movs	r1, #4
 8007f16:	4638      	mov	r0, r7
 8007f18:	f7ff ff62 	bl	8007de0 <__sfmoreglue>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	6030      	str	r0, [r6, #0]
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1d5      	bne.n	8007ed0 <__sfp+0x24>
 8007f24:	f7ff ff78 	bl	8007e18 <__sfp_lock_release>
 8007f28:	230c      	movs	r3, #12
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	e7ee      	b.n	8007f0c <__sfp+0x60>
 8007f2e:	bf00      	nop
 8007f30:	080092b0 	.word	0x080092b0
 8007f34:	ffff0001 	.word	0xffff0001

08007f38 <_fwalk_reent>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	4688      	mov	r8, r1
 8007f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f44:	2700      	movs	r7, #0
 8007f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4e:	d505      	bpl.n	8007f5c <_fwalk_reent+0x24>
 8007f50:	6824      	ldr	r4, [r4, #0]
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d1f7      	bne.n	8007f46 <_fwalk_reent+0xe>
 8007f56:	4638      	mov	r0, r7
 8007f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5c:	89ab      	ldrh	r3, [r5, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d907      	bls.n	8007f72 <_fwalk_reent+0x3a>
 8007f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f66:	3301      	adds	r3, #1
 8007f68:	d003      	beq.n	8007f72 <_fwalk_reent+0x3a>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	47c0      	blx	r8
 8007f70:	4307      	orrs	r7, r0
 8007f72:	3568      	adds	r5, #104	; 0x68
 8007f74:	e7e9      	b.n	8007f4a <_fwalk_reent+0x12>
	...

08007f78 <_localeconv_r>:
 8007f78:	4800      	ldr	r0, [pc, #0]	; (8007f7c <_localeconv_r+0x4>)
 8007f7a:	4770      	bx	lr
 8007f7c:	20000164 	.word	0x20000164

08007f80 <__retarget_lock_init_recursive>:
 8007f80:	4770      	bx	lr

08007f82 <__retarget_lock_acquire_recursive>:
 8007f82:	4770      	bx	lr

08007f84 <__retarget_lock_release_recursive>:
 8007f84:	4770      	bx	lr
	...

08007f88 <malloc>:
 8007f88:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <malloc+0xc>)
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	f000 bc17 	b.w	80087c0 <_malloc_r>
 8007f92:	bf00      	nop
 8007f94:	20000010 	.word	0x20000010

08007f98 <memcpy>:
 8007f98:	440a      	add	r2, r1
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	4770      	bx	lr
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	d1f9      	bne.n	8007fa6 <memcpy+0xe>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <_Balloc>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	b976      	cbnz	r6, 8007fdc <_Balloc+0x28>
 8007fbe:	2010      	movs	r0, #16
 8007fc0:	f7ff ffe2 	bl	8007f88 <malloc>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8007fc8:	b920      	cbnz	r0, 8007fd4 <_Balloc+0x20>
 8007fca:	4b18      	ldr	r3, [pc, #96]	; (800802c <_Balloc+0x78>)
 8007fcc:	4818      	ldr	r0, [pc, #96]	; (8008030 <_Balloc+0x7c>)
 8007fce:	2166      	movs	r1, #102	; 0x66
 8007fd0:	f000 feea 	bl	8008da8 <__assert_func>
 8007fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd8:	6006      	str	r6, [r0, #0]
 8007fda:	60c6      	str	r6, [r0, #12]
 8007fdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fde:	68f3      	ldr	r3, [r6, #12]
 8007fe0:	b183      	cbz	r3, 8008004 <_Balloc+0x50>
 8007fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fea:	b9b8      	cbnz	r0, 800801c <_Balloc+0x68>
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f605 	lsl.w	r6, r1, r5
 8007ff2:	1d72      	adds	r2, r6, #5
 8007ff4:	0092      	lsls	r2, r2, #2
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fb60 	bl	80086bc <_calloc_r>
 8007ffc:	b160      	cbz	r0, 8008018 <_Balloc+0x64>
 8007ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008002:	e00e      	b.n	8008022 <_Balloc+0x6e>
 8008004:	2221      	movs	r2, #33	; 0x21
 8008006:	2104      	movs	r1, #4
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fb57 	bl	80086bc <_calloc_r>
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	60f0      	str	r0, [r6, #12]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e4      	bne.n	8007fe2 <_Balloc+0x2e>
 8008018:	2000      	movs	r0, #0
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	6802      	ldr	r2, [r0, #0]
 800801e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008022:	2300      	movs	r3, #0
 8008024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008028:	e7f7      	b.n	800801a <_Balloc+0x66>
 800802a:	bf00      	nop
 800802c:	080092f5 	.word	0x080092f5
 8008030:	080093d8 	.word	0x080093d8

08008034 <_Bfree>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b976      	cbnz	r6, 800805c <_Bfree+0x28>
 800803e:	2010      	movs	r0, #16
 8008040:	f7ff ffa2 	bl	8007f88 <malloc>
 8008044:	4602      	mov	r2, r0
 8008046:	6268      	str	r0, [r5, #36]	; 0x24
 8008048:	b920      	cbnz	r0, 8008054 <_Bfree+0x20>
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <_Bfree+0x3c>)
 800804c:	4809      	ldr	r0, [pc, #36]	; (8008074 <_Bfree+0x40>)
 800804e:	218a      	movs	r1, #138	; 0x8a
 8008050:	f000 feaa 	bl	8008da8 <__assert_func>
 8008054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008058:	6006      	str	r6, [r0, #0]
 800805a:	60c6      	str	r6, [r0, #12]
 800805c:	b13c      	cbz	r4, 800806e <_Bfree+0x3a>
 800805e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008060:	6862      	ldr	r2, [r4, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008068:	6021      	str	r1, [r4, #0]
 800806a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	080092f5 	.word	0x080092f5
 8008074:	080093d8 	.word	0x080093d8

08008078 <__multadd>:
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	690d      	ldr	r5, [r1, #16]
 800807e:	4607      	mov	r7, r0
 8008080:	460c      	mov	r4, r1
 8008082:	461e      	mov	r6, r3
 8008084:	f101 0c14 	add.w	ip, r1, #20
 8008088:	2000      	movs	r0, #0
 800808a:	f8dc 3000 	ldr.w	r3, [ip]
 800808e:	b299      	uxth	r1, r3
 8008090:	fb02 6101 	mla	r1, r2, r1, r6
 8008094:	0c1e      	lsrs	r6, r3, #16
 8008096:	0c0b      	lsrs	r3, r1, #16
 8008098:	fb02 3306 	mla	r3, r2, r6, r3
 800809c:	b289      	uxth	r1, r1
 800809e:	3001      	adds	r0, #1
 80080a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080a4:	4285      	cmp	r5, r0
 80080a6:	f84c 1b04 	str.w	r1, [ip], #4
 80080aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080ae:	dcec      	bgt.n	800808a <__multadd+0x12>
 80080b0:	b30e      	cbz	r6, 80080f6 <__multadd+0x7e>
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	dc19      	bgt.n	80080ec <__multadd+0x74>
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	4638      	mov	r0, r7
 80080bc:	3101      	adds	r1, #1
 80080be:	f7ff ff79 	bl	8007fb4 <_Balloc>
 80080c2:	4680      	mov	r8, r0
 80080c4:	b928      	cbnz	r0, 80080d2 <__multadd+0x5a>
 80080c6:	4602      	mov	r2, r0
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <__multadd+0x84>)
 80080ca:	480d      	ldr	r0, [pc, #52]	; (8008100 <__multadd+0x88>)
 80080cc:	21b5      	movs	r1, #181	; 0xb5
 80080ce:	f000 fe6b 	bl	8008da8 <__assert_func>
 80080d2:	6922      	ldr	r2, [r4, #16]
 80080d4:	3202      	adds	r2, #2
 80080d6:	f104 010c 	add.w	r1, r4, #12
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	300c      	adds	r0, #12
 80080de:	f7ff ff5b 	bl	8007f98 <memcpy>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff ffa5 	bl	8008034 <_Bfree>
 80080ea:	4644      	mov	r4, r8
 80080ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080f0:	3501      	adds	r5, #1
 80080f2:	615e      	str	r6, [r3, #20]
 80080f4:	6125      	str	r5, [r4, #16]
 80080f6:	4620      	mov	r0, r4
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	08009367 	.word	0x08009367
 8008100:	080093d8 	.word	0x080093d8

08008104 <__hi0bits>:
 8008104:	0c03      	lsrs	r3, r0, #16
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	b9d3      	cbnz	r3, 8008140 <__hi0bits+0x3c>
 800810a:	0400      	lsls	r0, r0, #16
 800810c:	2310      	movs	r3, #16
 800810e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008112:	bf04      	itt	eq
 8008114:	0200      	lsleq	r0, r0, #8
 8008116:	3308      	addeq	r3, #8
 8008118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800811c:	bf04      	itt	eq
 800811e:	0100      	lsleq	r0, r0, #4
 8008120:	3304      	addeq	r3, #4
 8008122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008126:	bf04      	itt	eq
 8008128:	0080      	lsleq	r0, r0, #2
 800812a:	3302      	addeq	r3, #2
 800812c:	2800      	cmp	r0, #0
 800812e:	db05      	blt.n	800813c <__hi0bits+0x38>
 8008130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008134:	f103 0301 	add.w	r3, r3, #1
 8008138:	bf08      	it	eq
 800813a:	2320      	moveq	r3, #32
 800813c:	4618      	mov	r0, r3
 800813e:	4770      	bx	lr
 8008140:	2300      	movs	r3, #0
 8008142:	e7e4      	b.n	800810e <__hi0bits+0xa>

08008144 <__lo0bits>:
 8008144:	6803      	ldr	r3, [r0, #0]
 8008146:	f013 0207 	ands.w	r2, r3, #7
 800814a:	4601      	mov	r1, r0
 800814c:	d00b      	beq.n	8008166 <__lo0bits+0x22>
 800814e:	07da      	lsls	r2, r3, #31
 8008150:	d423      	bmi.n	800819a <__lo0bits+0x56>
 8008152:	0798      	lsls	r0, r3, #30
 8008154:	bf49      	itett	mi
 8008156:	085b      	lsrmi	r3, r3, #1
 8008158:	089b      	lsrpl	r3, r3, #2
 800815a:	2001      	movmi	r0, #1
 800815c:	600b      	strmi	r3, [r1, #0]
 800815e:	bf5c      	itt	pl
 8008160:	600b      	strpl	r3, [r1, #0]
 8008162:	2002      	movpl	r0, #2
 8008164:	4770      	bx	lr
 8008166:	b298      	uxth	r0, r3
 8008168:	b9a8      	cbnz	r0, 8008196 <__lo0bits+0x52>
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	2010      	movs	r0, #16
 800816e:	b2da      	uxtb	r2, r3
 8008170:	b90a      	cbnz	r2, 8008176 <__lo0bits+0x32>
 8008172:	3008      	adds	r0, #8
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	071a      	lsls	r2, r3, #28
 8008178:	bf04      	itt	eq
 800817a:	091b      	lsreq	r3, r3, #4
 800817c:	3004      	addeq	r0, #4
 800817e:	079a      	lsls	r2, r3, #30
 8008180:	bf04      	itt	eq
 8008182:	089b      	lsreq	r3, r3, #2
 8008184:	3002      	addeq	r0, #2
 8008186:	07da      	lsls	r2, r3, #31
 8008188:	d403      	bmi.n	8008192 <__lo0bits+0x4e>
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	f100 0001 	add.w	r0, r0, #1
 8008190:	d005      	beq.n	800819e <__lo0bits+0x5a>
 8008192:	600b      	str	r3, [r1, #0]
 8008194:	4770      	bx	lr
 8008196:	4610      	mov	r0, r2
 8008198:	e7e9      	b.n	800816e <__lo0bits+0x2a>
 800819a:	2000      	movs	r0, #0
 800819c:	4770      	bx	lr
 800819e:	2020      	movs	r0, #32
 80081a0:	4770      	bx	lr
	...

080081a4 <__i2b>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460c      	mov	r4, r1
 80081a8:	2101      	movs	r1, #1
 80081aa:	f7ff ff03 	bl	8007fb4 <_Balloc>
 80081ae:	4602      	mov	r2, r0
 80081b0:	b928      	cbnz	r0, 80081be <__i2b+0x1a>
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <__i2b+0x24>)
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <__i2b+0x28>)
 80081b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081ba:	f000 fdf5 	bl	8008da8 <__assert_func>
 80081be:	2301      	movs	r3, #1
 80081c0:	6144      	str	r4, [r0, #20]
 80081c2:	6103      	str	r3, [r0, #16]
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	bf00      	nop
 80081c8:	08009367 	.word	0x08009367
 80081cc:	080093d8 	.word	0x080093d8

080081d0 <__multiply>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4691      	mov	r9, r2
 80081d6:	690a      	ldr	r2, [r1, #16]
 80081d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081dc:	429a      	cmp	r2, r3
 80081de:	bfb8      	it	lt
 80081e0:	460b      	movlt	r3, r1
 80081e2:	460c      	mov	r4, r1
 80081e4:	bfbc      	itt	lt
 80081e6:	464c      	movlt	r4, r9
 80081e8:	4699      	movlt	r9, r3
 80081ea:	6927      	ldr	r7, [r4, #16]
 80081ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081f0:	68a3      	ldr	r3, [r4, #8]
 80081f2:	6861      	ldr	r1, [r4, #4]
 80081f4:	eb07 060a 	add.w	r6, r7, sl
 80081f8:	42b3      	cmp	r3, r6
 80081fa:	b085      	sub	sp, #20
 80081fc:	bfb8      	it	lt
 80081fe:	3101      	addlt	r1, #1
 8008200:	f7ff fed8 	bl	8007fb4 <_Balloc>
 8008204:	b930      	cbnz	r0, 8008214 <__multiply+0x44>
 8008206:	4602      	mov	r2, r0
 8008208:	4b44      	ldr	r3, [pc, #272]	; (800831c <__multiply+0x14c>)
 800820a:	4845      	ldr	r0, [pc, #276]	; (8008320 <__multiply+0x150>)
 800820c:	f240 115d 	movw	r1, #349	; 0x15d
 8008210:	f000 fdca 	bl	8008da8 <__assert_func>
 8008214:	f100 0514 	add.w	r5, r0, #20
 8008218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800821c:	462b      	mov	r3, r5
 800821e:	2200      	movs	r2, #0
 8008220:	4543      	cmp	r3, r8
 8008222:	d321      	bcc.n	8008268 <__multiply+0x98>
 8008224:	f104 0314 	add.w	r3, r4, #20
 8008228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800822c:	f109 0314 	add.w	r3, r9, #20
 8008230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008234:	9202      	str	r2, [sp, #8]
 8008236:	1b3a      	subs	r2, r7, r4
 8008238:	3a15      	subs	r2, #21
 800823a:	f022 0203 	bic.w	r2, r2, #3
 800823e:	3204      	adds	r2, #4
 8008240:	f104 0115 	add.w	r1, r4, #21
 8008244:	428f      	cmp	r7, r1
 8008246:	bf38      	it	cc
 8008248:	2204      	movcc	r2, #4
 800824a:	9201      	str	r2, [sp, #4]
 800824c:	9a02      	ldr	r2, [sp, #8]
 800824e:	9303      	str	r3, [sp, #12]
 8008250:	429a      	cmp	r2, r3
 8008252:	d80c      	bhi.n	800826e <__multiply+0x9e>
 8008254:	2e00      	cmp	r6, #0
 8008256:	dd03      	ble.n	8008260 <__multiply+0x90>
 8008258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800825c:	2b00      	cmp	r3, #0
 800825e:	d05a      	beq.n	8008316 <__multiply+0x146>
 8008260:	6106      	str	r6, [r0, #16]
 8008262:	b005      	add	sp, #20
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008268:	f843 2b04 	str.w	r2, [r3], #4
 800826c:	e7d8      	b.n	8008220 <__multiply+0x50>
 800826e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008272:	f1ba 0f00 	cmp.w	sl, #0
 8008276:	d024      	beq.n	80082c2 <__multiply+0xf2>
 8008278:	f104 0e14 	add.w	lr, r4, #20
 800827c:	46a9      	mov	r9, r5
 800827e:	f04f 0c00 	mov.w	ip, #0
 8008282:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008286:	f8d9 1000 	ldr.w	r1, [r9]
 800828a:	fa1f fb82 	uxth.w	fp, r2
 800828e:	b289      	uxth	r1, r1
 8008290:	fb0a 110b 	mla	r1, sl, fp, r1
 8008294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008298:	f8d9 2000 	ldr.w	r2, [r9]
 800829c:	4461      	add	r1, ip
 800829e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80082a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082aa:	b289      	uxth	r1, r1
 80082ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082b0:	4577      	cmp	r7, lr
 80082b2:	f849 1b04 	str.w	r1, [r9], #4
 80082b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082ba:	d8e2      	bhi.n	8008282 <__multiply+0xb2>
 80082bc:	9a01      	ldr	r2, [sp, #4]
 80082be:	f845 c002 	str.w	ip, [r5, r2]
 80082c2:	9a03      	ldr	r2, [sp, #12]
 80082c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082c8:	3304      	adds	r3, #4
 80082ca:	f1b9 0f00 	cmp.w	r9, #0
 80082ce:	d020      	beq.n	8008312 <__multiply+0x142>
 80082d0:	6829      	ldr	r1, [r5, #0]
 80082d2:	f104 0c14 	add.w	ip, r4, #20
 80082d6:	46ae      	mov	lr, r5
 80082d8:	f04f 0a00 	mov.w	sl, #0
 80082dc:	f8bc b000 	ldrh.w	fp, [ip]
 80082e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082e4:	fb09 220b 	mla	r2, r9, fp, r2
 80082e8:	4492      	add	sl, r2
 80082ea:	b289      	uxth	r1, r1
 80082ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082f0:	f84e 1b04 	str.w	r1, [lr], #4
 80082f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082f8:	f8be 1000 	ldrh.w	r1, [lr]
 80082fc:	0c12      	lsrs	r2, r2, #16
 80082fe:	fb09 1102 	mla	r1, r9, r2, r1
 8008302:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008306:	4567      	cmp	r7, ip
 8008308:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800830c:	d8e6      	bhi.n	80082dc <__multiply+0x10c>
 800830e:	9a01      	ldr	r2, [sp, #4]
 8008310:	50a9      	str	r1, [r5, r2]
 8008312:	3504      	adds	r5, #4
 8008314:	e79a      	b.n	800824c <__multiply+0x7c>
 8008316:	3e01      	subs	r6, #1
 8008318:	e79c      	b.n	8008254 <__multiply+0x84>
 800831a:	bf00      	nop
 800831c:	08009367 	.word	0x08009367
 8008320:	080093d8 	.word	0x080093d8

08008324 <__pow5mult>:
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008328:	4615      	mov	r5, r2
 800832a:	f012 0203 	ands.w	r2, r2, #3
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	d007      	beq.n	8008344 <__pow5mult+0x20>
 8008334:	4c25      	ldr	r4, [pc, #148]	; (80083cc <__pow5mult+0xa8>)
 8008336:	3a01      	subs	r2, #1
 8008338:	2300      	movs	r3, #0
 800833a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800833e:	f7ff fe9b 	bl	8008078 <__multadd>
 8008342:	4607      	mov	r7, r0
 8008344:	10ad      	asrs	r5, r5, #2
 8008346:	d03d      	beq.n	80083c4 <__pow5mult+0xa0>
 8008348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800834a:	b97c      	cbnz	r4, 800836c <__pow5mult+0x48>
 800834c:	2010      	movs	r0, #16
 800834e:	f7ff fe1b 	bl	8007f88 <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	6270      	str	r0, [r6, #36]	; 0x24
 8008356:	b928      	cbnz	r0, 8008364 <__pow5mult+0x40>
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <__pow5mult+0xac>)
 800835a:	481e      	ldr	r0, [pc, #120]	; (80083d4 <__pow5mult+0xb0>)
 800835c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008360:	f000 fd22 	bl	8008da8 <__assert_func>
 8008364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008368:	6004      	str	r4, [r0, #0]
 800836a:	60c4      	str	r4, [r0, #12]
 800836c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008374:	b94c      	cbnz	r4, 800838a <__pow5mult+0x66>
 8008376:	f240 2171 	movw	r1, #625	; 0x271
 800837a:	4630      	mov	r0, r6
 800837c:	f7ff ff12 	bl	80081a4 <__i2b>
 8008380:	2300      	movs	r3, #0
 8008382:	f8c8 0008 	str.w	r0, [r8, #8]
 8008386:	4604      	mov	r4, r0
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	07eb      	lsls	r3, r5, #31
 8008390:	d50a      	bpl.n	80083a8 <__pow5mult+0x84>
 8008392:	4639      	mov	r1, r7
 8008394:	4622      	mov	r2, r4
 8008396:	4630      	mov	r0, r6
 8008398:	f7ff ff1a 	bl	80081d0 <__multiply>
 800839c:	4639      	mov	r1, r7
 800839e:	4680      	mov	r8, r0
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7ff fe47 	bl	8008034 <_Bfree>
 80083a6:	4647      	mov	r7, r8
 80083a8:	106d      	asrs	r5, r5, #1
 80083aa:	d00b      	beq.n	80083c4 <__pow5mult+0xa0>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	b938      	cbnz	r0, 80083c0 <__pow5mult+0x9c>
 80083b0:	4622      	mov	r2, r4
 80083b2:	4621      	mov	r1, r4
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff ff0b 	bl	80081d0 <__multiply>
 80083ba:	6020      	str	r0, [r4, #0]
 80083bc:	f8c0 9000 	str.w	r9, [r0]
 80083c0:	4604      	mov	r4, r0
 80083c2:	e7e4      	b.n	800838e <__pow5mult+0x6a>
 80083c4:	4638      	mov	r0, r7
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	bf00      	nop
 80083cc:	08009528 	.word	0x08009528
 80083d0:	080092f5 	.word	0x080092f5
 80083d4:	080093d8 	.word	0x080093d8

080083d8 <__lshift>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	6849      	ldr	r1, [r1, #4]
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	4607      	mov	r7, r0
 80083ea:	4691      	mov	r9, r2
 80083ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083f0:	f108 0601 	add.w	r6, r8, #1
 80083f4:	42b3      	cmp	r3, r6
 80083f6:	db0b      	blt.n	8008410 <__lshift+0x38>
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff fddb 	bl	8007fb4 <_Balloc>
 80083fe:	4605      	mov	r5, r0
 8008400:	b948      	cbnz	r0, 8008416 <__lshift+0x3e>
 8008402:	4602      	mov	r2, r0
 8008404:	4b2a      	ldr	r3, [pc, #168]	; (80084b0 <__lshift+0xd8>)
 8008406:	482b      	ldr	r0, [pc, #172]	; (80084b4 <__lshift+0xdc>)
 8008408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800840c:	f000 fccc 	bl	8008da8 <__assert_func>
 8008410:	3101      	adds	r1, #1
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	e7ee      	b.n	80083f4 <__lshift+0x1c>
 8008416:	2300      	movs	r3, #0
 8008418:	f100 0114 	add.w	r1, r0, #20
 800841c:	f100 0210 	add.w	r2, r0, #16
 8008420:	4618      	mov	r0, r3
 8008422:	4553      	cmp	r3, sl
 8008424:	db37      	blt.n	8008496 <__lshift+0xbe>
 8008426:	6920      	ldr	r0, [r4, #16]
 8008428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800842c:	f104 0314 	add.w	r3, r4, #20
 8008430:	f019 091f 	ands.w	r9, r9, #31
 8008434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008438:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800843c:	d02f      	beq.n	800849e <__lshift+0xc6>
 800843e:	f1c9 0e20 	rsb	lr, r9, #32
 8008442:	468a      	mov	sl, r1
 8008444:	f04f 0c00 	mov.w	ip, #0
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	fa02 f209 	lsl.w	r2, r2, r9
 800844e:	ea42 020c 	orr.w	r2, r2, ip
 8008452:	f84a 2b04 	str.w	r2, [sl], #4
 8008456:	f853 2b04 	ldr.w	r2, [r3], #4
 800845a:	4298      	cmp	r0, r3
 800845c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008460:	d8f2      	bhi.n	8008448 <__lshift+0x70>
 8008462:	1b03      	subs	r3, r0, r4
 8008464:	3b15      	subs	r3, #21
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	3304      	adds	r3, #4
 800846c:	f104 0215 	add.w	r2, r4, #21
 8008470:	4290      	cmp	r0, r2
 8008472:	bf38      	it	cc
 8008474:	2304      	movcc	r3, #4
 8008476:	f841 c003 	str.w	ip, [r1, r3]
 800847a:	f1bc 0f00 	cmp.w	ip, #0
 800847e:	d001      	beq.n	8008484 <__lshift+0xac>
 8008480:	f108 0602 	add.w	r6, r8, #2
 8008484:	3e01      	subs	r6, #1
 8008486:	4638      	mov	r0, r7
 8008488:	612e      	str	r6, [r5, #16]
 800848a:	4621      	mov	r1, r4
 800848c:	f7ff fdd2 	bl	8008034 <_Bfree>
 8008490:	4628      	mov	r0, r5
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	f842 0f04 	str.w	r0, [r2, #4]!
 800849a:	3301      	adds	r3, #1
 800849c:	e7c1      	b.n	8008422 <__lshift+0x4a>
 800849e:	3904      	subs	r1, #4
 80084a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084a8:	4298      	cmp	r0, r3
 80084aa:	d8f9      	bhi.n	80084a0 <__lshift+0xc8>
 80084ac:	e7ea      	b.n	8008484 <__lshift+0xac>
 80084ae:	bf00      	nop
 80084b0:	08009367 	.word	0x08009367
 80084b4:	080093d8 	.word	0x080093d8

080084b8 <__mcmp>:
 80084b8:	b530      	push	{r4, r5, lr}
 80084ba:	6902      	ldr	r2, [r0, #16]
 80084bc:	690c      	ldr	r4, [r1, #16]
 80084be:	1b12      	subs	r2, r2, r4
 80084c0:	d10e      	bne.n	80084e0 <__mcmp+0x28>
 80084c2:	f100 0314 	add.w	r3, r0, #20
 80084c6:	3114      	adds	r1, #20
 80084c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084d8:	42a5      	cmp	r5, r4
 80084da:	d003      	beq.n	80084e4 <__mcmp+0x2c>
 80084dc:	d305      	bcc.n	80084ea <__mcmp+0x32>
 80084de:	2201      	movs	r2, #1
 80084e0:	4610      	mov	r0, r2
 80084e2:	bd30      	pop	{r4, r5, pc}
 80084e4:	4283      	cmp	r3, r0
 80084e6:	d3f3      	bcc.n	80084d0 <__mcmp+0x18>
 80084e8:	e7fa      	b.n	80084e0 <__mcmp+0x28>
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	e7f7      	b.n	80084e0 <__mcmp+0x28>

080084f0 <__mdiff>:
 80084f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	4606      	mov	r6, r0
 80084f8:	4611      	mov	r1, r2
 80084fa:	4620      	mov	r0, r4
 80084fc:	4690      	mov	r8, r2
 80084fe:	f7ff ffdb 	bl	80084b8 <__mcmp>
 8008502:	1e05      	subs	r5, r0, #0
 8008504:	d110      	bne.n	8008528 <__mdiff+0x38>
 8008506:	4629      	mov	r1, r5
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff fd53 	bl	8007fb4 <_Balloc>
 800850e:	b930      	cbnz	r0, 800851e <__mdiff+0x2e>
 8008510:	4b3a      	ldr	r3, [pc, #232]	; (80085fc <__mdiff+0x10c>)
 8008512:	4602      	mov	r2, r0
 8008514:	f240 2132 	movw	r1, #562	; 0x232
 8008518:	4839      	ldr	r0, [pc, #228]	; (8008600 <__mdiff+0x110>)
 800851a:	f000 fc45 	bl	8008da8 <__assert_func>
 800851e:	2301      	movs	r3, #1
 8008520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008528:	bfa4      	itt	ge
 800852a:	4643      	movge	r3, r8
 800852c:	46a0      	movge	r8, r4
 800852e:	4630      	mov	r0, r6
 8008530:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008534:	bfa6      	itte	ge
 8008536:	461c      	movge	r4, r3
 8008538:	2500      	movge	r5, #0
 800853a:	2501      	movlt	r5, #1
 800853c:	f7ff fd3a 	bl	8007fb4 <_Balloc>
 8008540:	b920      	cbnz	r0, 800854c <__mdiff+0x5c>
 8008542:	4b2e      	ldr	r3, [pc, #184]	; (80085fc <__mdiff+0x10c>)
 8008544:	4602      	mov	r2, r0
 8008546:	f44f 7110 	mov.w	r1, #576	; 0x240
 800854a:	e7e5      	b.n	8008518 <__mdiff+0x28>
 800854c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008550:	6926      	ldr	r6, [r4, #16]
 8008552:	60c5      	str	r5, [r0, #12]
 8008554:	f104 0914 	add.w	r9, r4, #20
 8008558:	f108 0514 	add.w	r5, r8, #20
 800855c:	f100 0e14 	add.w	lr, r0, #20
 8008560:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008568:	f108 0210 	add.w	r2, r8, #16
 800856c:	46f2      	mov	sl, lr
 800856e:	2100      	movs	r1, #0
 8008570:	f859 3b04 	ldr.w	r3, [r9], #4
 8008574:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008578:	fa1f f883 	uxth.w	r8, r3
 800857c:	fa11 f18b 	uxtah	r1, r1, fp
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	eba1 0808 	sub.w	r8, r1, r8
 8008586:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800858a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800858e:	fa1f f888 	uxth.w	r8, r8
 8008592:	1419      	asrs	r1, r3, #16
 8008594:	454e      	cmp	r6, r9
 8008596:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800859a:	f84a 3b04 	str.w	r3, [sl], #4
 800859e:	d8e7      	bhi.n	8008570 <__mdiff+0x80>
 80085a0:	1b33      	subs	r3, r6, r4
 80085a2:	3b15      	subs	r3, #21
 80085a4:	f023 0303 	bic.w	r3, r3, #3
 80085a8:	3304      	adds	r3, #4
 80085aa:	3415      	adds	r4, #21
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	bf38      	it	cc
 80085b0:	2304      	movcc	r3, #4
 80085b2:	441d      	add	r5, r3
 80085b4:	4473      	add	r3, lr
 80085b6:	469e      	mov	lr, r3
 80085b8:	462e      	mov	r6, r5
 80085ba:	4566      	cmp	r6, ip
 80085bc:	d30e      	bcc.n	80085dc <__mdiff+0xec>
 80085be:	f10c 0203 	add.w	r2, ip, #3
 80085c2:	1b52      	subs	r2, r2, r5
 80085c4:	f022 0203 	bic.w	r2, r2, #3
 80085c8:	3d03      	subs	r5, #3
 80085ca:	45ac      	cmp	ip, r5
 80085cc:	bf38      	it	cc
 80085ce:	2200      	movcc	r2, #0
 80085d0:	441a      	add	r2, r3
 80085d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085d6:	b17b      	cbz	r3, 80085f8 <__mdiff+0x108>
 80085d8:	6107      	str	r7, [r0, #16]
 80085da:	e7a3      	b.n	8008524 <__mdiff+0x34>
 80085dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80085e0:	fa11 f288 	uxtah	r2, r1, r8
 80085e4:	1414      	asrs	r4, r2, #16
 80085e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085ea:	b292      	uxth	r2, r2
 80085ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085f0:	f84e 2b04 	str.w	r2, [lr], #4
 80085f4:	1421      	asrs	r1, r4, #16
 80085f6:	e7e0      	b.n	80085ba <__mdiff+0xca>
 80085f8:	3f01      	subs	r7, #1
 80085fa:	e7ea      	b.n	80085d2 <__mdiff+0xe2>
 80085fc:	08009367 	.word	0x08009367
 8008600:	080093d8 	.word	0x080093d8

08008604 <__d2b>:
 8008604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008608:	4689      	mov	r9, r1
 800860a:	2101      	movs	r1, #1
 800860c:	ec57 6b10 	vmov	r6, r7, d0
 8008610:	4690      	mov	r8, r2
 8008612:	f7ff fccf 	bl	8007fb4 <_Balloc>
 8008616:	4604      	mov	r4, r0
 8008618:	b930      	cbnz	r0, 8008628 <__d2b+0x24>
 800861a:	4602      	mov	r2, r0
 800861c:	4b25      	ldr	r3, [pc, #148]	; (80086b4 <__d2b+0xb0>)
 800861e:	4826      	ldr	r0, [pc, #152]	; (80086b8 <__d2b+0xb4>)
 8008620:	f240 310a 	movw	r1, #778	; 0x30a
 8008624:	f000 fbc0 	bl	8008da8 <__assert_func>
 8008628:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800862c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008630:	bb35      	cbnz	r5, 8008680 <__d2b+0x7c>
 8008632:	2e00      	cmp	r6, #0
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	d028      	beq.n	800868a <__d2b+0x86>
 8008638:	4668      	mov	r0, sp
 800863a:	9600      	str	r6, [sp, #0]
 800863c:	f7ff fd82 	bl	8008144 <__lo0bits>
 8008640:	9900      	ldr	r1, [sp, #0]
 8008642:	b300      	cbz	r0, 8008686 <__d2b+0x82>
 8008644:	9a01      	ldr	r2, [sp, #4]
 8008646:	f1c0 0320 	rsb	r3, r0, #32
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	430b      	orrs	r3, r1
 8008650:	40c2      	lsrs	r2, r0
 8008652:	6163      	str	r3, [r4, #20]
 8008654:	9201      	str	r2, [sp, #4]
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	61a3      	str	r3, [r4, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	bf14      	ite	ne
 800865e:	2202      	movne	r2, #2
 8008660:	2201      	moveq	r2, #1
 8008662:	6122      	str	r2, [r4, #16]
 8008664:	b1d5      	cbz	r5, 800869c <__d2b+0x98>
 8008666:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800866a:	4405      	add	r5, r0
 800866c:	f8c9 5000 	str.w	r5, [r9]
 8008670:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008674:	f8c8 0000 	str.w	r0, [r8]
 8008678:	4620      	mov	r0, r4
 800867a:	b003      	add	sp, #12
 800867c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008684:	e7d5      	b.n	8008632 <__d2b+0x2e>
 8008686:	6161      	str	r1, [r4, #20]
 8008688:	e7e5      	b.n	8008656 <__d2b+0x52>
 800868a:	a801      	add	r0, sp, #4
 800868c:	f7ff fd5a 	bl	8008144 <__lo0bits>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	6163      	str	r3, [r4, #20]
 8008694:	2201      	movs	r2, #1
 8008696:	6122      	str	r2, [r4, #16]
 8008698:	3020      	adds	r0, #32
 800869a:	e7e3      	b.n	8008664 <__d2b+0x60>
 800869c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086a4:	f8c9 0000 	str.w	r0, [r9]
 80086a8:	6918      	ldr	r0, [r3, #16]
 80086aa:	f7ff fd2b 	bl	8008104 <__hi0bits>
 80086ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086b2:	e7df      	b.n	8008674 <__d2b+0x70>
 80086b4:	08009367 	.word	0x08009367
 80086b8:	080093d8 	.word	0x080093d8

080086bc <_calloc_r>:
 80086bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086be:	fba1 2402 	umull	r2, r4, r1, r2
 80086c2:	b94c      	cbnz	r4, 80086d8 <_calloc_r+0x1c>
 80086c4:	4611      	mov	r1, r2
 80086c6:	9201      	str	r2, [sp, #4]
 80086c8:	f000 f87a 	bl	80087c0 <_malloc_r>
 80086cc:	9a01      	ldr	r2, [sp, #4]
 80086ce:	4605      	mov	r5, r0
 80086d0:	b930      	cbnz	r0, 80086e0 <_calloc_r+0x24>
 80086d2:	4628      	mov	r0, r5
 80086d4:	b003      	add	sp, #12
 80086d6:	bd30      	pop	{r4, r5, pc}
 80086d8:	220c      	movs	r2, #12
 80086da:	6002      	str	r2, [r0, #0]
 80086dc:	2500      	movs	r5, #0
 80086de:	e7f8      	b.n	80086d2 <_calloc_r+0x16>
 80086e0:	4621      	mov	r1, r4
 80086e2:	f7fe f84d 	bl	8006780 <memset>
 80086e6:	e7f4      	b.n	80086d2 <_calloc_r+0x16>

080086e8 <_free_r>:
 80086e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ea:	2900      	cmp	r1, #0
 80086ec:	d044      	beq.n	8008778 <_free_r+0x90>
 80086ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f2:	9001      	str	r0, [sp, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f1a1 0404 	sub.w	r4, r1, #4
 80086fa:	bfb8      	it	lt
 80086fc:	18e4      	addlt	r4, r4, r3
 80086fe:	f000 fcdf 	bl	80090c0 <__malloc_lock>
 8008702:	4a1e      	ldr	r2, [pc, #120]	; (800877c <_free_r+0x94>)
 8008704:	9801      	ldr	r0, [sp, #4]
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	b933      	cbnz	r3, 8008718 <_free_r+0x30>
 800870a:	6063      	str	r3, [r4, #4]
 800870c:	6014      	str	r4, [r2, #0]
 800870e:	b003      	add	sp, #12
 8008710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008714:	f000 bcda 	b.w	80090cc <__malloc_unlock>
 8008718:	42a3      	cmp	r3, r4
 800871a:	d908      	bls.n	800872e <_free_r+0x46>
 800871c:	6825      	ldr	r5, [r4, #0]
 800871e:	1961      	adds	r1, r4, r5
 8008720:	428b      	cmp	r3, r1
 8008722:	bf01      	itttt	eq
 8008724:	6819      	ldreq	r1, [r3, #0]
 8008726:	685b      	ldreq	r3, [r3, #4]
 8008728:	1949      	addeq	r1, r1, r5
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	e7ed      	b.n	800870a <_free_r+0x22>
 800872e:	461a      	mov	r2, r3
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	b10b      	cbz	r3, 8008738 <_free_r+0x50>
 8008734:	42a3      	cmp	r3, r4
 8008736:	d9fa      	bls.n	800872e <_free_r+0x46>
 8008738:	6811      	ldr	r1, [r2, #0]
 800873a:	1855      	adds	r5, r2, r1
 800873c:	42a5      	cmp	r5, r4
 800873e:	d10b      	bne.n	8008758 <_free_r+0x70>
 8008740:	6824      	ldr	r4, [r4, #0]
 8008742:	4421      	add	r1, r4
 8008744:	1854      	adds	r4, r2, r1
 8008746:	42a3      	cmp	r3, r4
 8008748:	6011      	str	r1, [r2, #0]
 800874a:	d1e0      	bne.n	800870e <_free_r+0x26>
 800874c:	681c      	ldr	r4, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	6053      	str	r3, [r2, #4]
 8008752:	4421      	add	r1, r4
 8008754:	6011      	str	r1, [r2, #0]
 8008756:	e7da      	b.n	800870e <_free_r+0x26>
 8008758:	d902      	bls.n	8008760 <_free_r+0x78>
 800875a:	230c      	movs	r3, #12
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	e7d6      	b.n	800870e <_free_r+0x26>
 8008760:	6825      	ldr	r5, [r4, #0]
 8008762:	1961      	adds	r1, r4, r5
 8008764:	428b      	cmp	r3, r1
 8008766:	bf04      	itt	eq
 8008768:	6819      	ldreq	r1, [r3, #0]
 800876a:	685b      	ldreq	r3, [r3, #4]
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	bf04      	itt	eq
 8008770:	1949      	addeq	r1, r1, r5
 8008772:	6021      	streq	r1, [r4, #0]
 8008774:	6054      	str	r4, [r2, #4]
 8008776:	e7ca      	b.n	800870e <_free_r+0x26>
 8008778:	b003      	add	sp, #12
 800877a:	bd30      	pop	{r4, r5, pc}
 800877c:	200008a8 	.word	0x200008a8

08008780 <sbrk_aligned>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4e0e      	ldr	r6, [pc, #56]	; (80087bc <sbrk_aligned+0x3c>)
 8008784:	460c      	mov	r4, r1
 8008786:	6831      	ldr	r1, [r6, #0]
 8008788:	4605      	mov	r5, r0
 800878a:	b911      	cbnz	r1, 8008792 <sbrk_aligned+0x12>
 800878c:	f000 f9e6 	bl	8008b5c <_sbrk_r>
 8008790:	6030      	str	r0, [r6, #0]
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f9e1 	bl	8008b5c <_sbrk_r>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d00a      	beq.n	80087b4 <sbrk_aligned+0x34>
 800879e:	1cc4      	adds	r4, r0, #3
 80087a0:	f024 0403 	bic.w	r4, r4, #3
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d007      	beq.n	80087b8 <sbrk_aligned+0x38>
 80087a8:	1a21      	subs	r1, r4, r0
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f9d6 	bl	8008b5c <_sbrk_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d101      	bne.n	80087b8 <sbrk_aligned+0x38>
 80087b4:	f04f 34ff 	mov.w	r4, #4294967295
 80087b8:	4620      	mov	r0, r4
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	200008ac 	.word	0x200008ac

080087c0 <_malloc_r>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	1ccd      	adds	r5, r1, #3
 80087c6:	f025 0503 	bic.w	r5, r5, #3
 80087ca:	3508      	adds	r5, #8
 80087cc:	2d0c      	cmp	r5, #12
 80087ce:	bf38      	it	cc
 80087d0:	250c      	movcc	r5, #12
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	4607      	mov	r7, r0
 80087d6:	db01      	blt.n	80087dc <_malloc_r+0x1c>
 80087d8:	42a9      	cmp	r1, r5
 80087da:	d905      	bls.n	80087e8 <_malloc_r+0x28>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	2600      	movs	r6, #0
 80087e2:	4630      	mov	r0, r6
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	4e2e      	ldr	r6, [pc, #184]	; (80088a4 <_malloc_r+0xe4>)
 80087ea:	f000 fc69 	bl	80090c0 <__malloc_lock>
 80087ee:	6833      	ldr	r3, [r6, #0]
 80087f0:	461c      	mov	r4, r3
 80087f2:	bb34      	cbnz	r4, 8008842 <_malloc_r+0x82>
 80087f4:	4629      	mov	r1, r5
 80087f6:	4638      	mov	r0, r7
 80087f8:	f7ff ffc2 	bl	8008780 <sbrk_aligned>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	4604      	mov	r4, r0
 8008800:	d14d      	bne.n	800889e <_malloc_r+0xde>
 8008802:	6834      	ldr	r4, [r6, #0]
 8008804:	4626      	mov	r6, r4
 8008806:	2e00      	cmp	r6, #0
 8008808:	d140      	bne.n	800888c <_malloc_r+0xcc>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	4631      	mov	r1, r6
 800880e:	4638      	mov	r0, r7
 8008810:	eb04 0803 	add.w	r8, r4, r3
 8008814:	f000 f9a2 	bl	8008b5c <_sbrk_r>
 8008818:	4580      	cmp	r8, r0
 800881a:	d13a      	bne.n	8008892 <_malloc_r+0xd2>
 800881c:	6821      	ldr	r1, [r4, #0]
 800881e:	3503      	adds	r5, #3
 8008820:	1a6d      	subs	r5, r5, r1
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	4629      	mov	r1, r5
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff ffa5 	bl	8008780 <sbrk_aligned>
 8008836:	3001      	adds	r0, #1
 8008838:	d02b      	beq.n	8008892 <_malloc_r+0xd2>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	442b      	add	r3, r5
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	e00e      	b.n	8008860 <_malloc_r+0xa0>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	1b52      	subs	r2, r2, r5
 8008846:	d41e      	bmi.n	8008886 <_malloc_r+0xc6>
 8008848:	2a0b      	cmp	r2, #11
 800884a:	d916      	bls.n	800887a <_malloc_r+0xba>
 800884c:	1961      	adds	r1, r4, r5
 800884e:	42a3      	cmp	r3, r4
 8008850:	6025      	str	r5, [r4, #0]
 8008852:	bf18      	it	ne
 8008854:	6059      	strne	r1, [r3, #4]
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	bf08      	it	eq
 800885a:	6031      	streq	r1, [r6, #0]
 800885c:	5162      	str	r2, [r4, r5]
 800885e:	604b      	str	r3, [r1, #4]
 8008860:	4638      	mov	r0, r7
 8008862:	f104 060b 	add.w	r6, r4, #11
 8008866:	f000 fc31 	bl	80090cc <__malloc_unlock>
 800886a:	f026 0607 	bic.w	r6, r6, #7
 800886e:	1d23      	adds	r3, r4, #4
 8008870:	1af2      	subs	r2, r6, r3
 8008872:	d0b6      	beq.n	80087e2 <_malloc_r+0x22>
 8008874:	1b9b      	subs	r3, r3, r6
 8008876:	50a3      	str	r3, [r4, r2]
 8008878:	e7b3      	b.n	80087e2 <_malloc_r+0x22>
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	42a3      	cmp	r3, r4
 800887e:	bf0c      	ite	eq
 8008880:	6032      	streq	r2, [r6, #0]
 8008882:	605a      	strne	r2, [r3, #4]
 8008884:	e7ec      	b.n	8008860 <_malloc_r+0xa0>
 8008886:	4623      	mov	r3, r4
 8008888:	6864      	ldr	r4, [r4, #4]
 800888a:	e7b2      	b.n	80087f2 <_malloc_r+0x32>
 800888c:	4634      	mov	r4, r6
 800888e:	6876      	ldr	r6, [r6, #4]
 8008890:	e7b9      	b.n	8008806 <_malloc_r+0x46>
 8008892:	230c      	movs	r3, #12
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	4638      	mov	r0, r7
 8008898:	f000 fc18 	bl	80090cc <__malloc_unlock>
 800889c:	e7a1      	b.n	80087e2 <_malloc_r+0x22>
 800889e:	6025      	str	r5, [r4, #0]
 80088a0:	e7de      	b.n	8008860 <_malloc_r+0xa0>
 80088a2:	bf00      	nop
 80088a4:	200008a8 	.word	0x200008a8

080088a8 <__sfputc_r>:
 80088a8:	6893      	ldr	r3, [r2, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	b410      	push	{r4}
 80088b0:	6093      	str	r3, [r2, #8]
 80088b2:	da08      	bge.n	80088c6 <__sfputc_r+0x1e>
 80088b4:	6994      	ldr	r4, [r2, #24]
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	db01      	blt.n	80088be <__sfputc_r+0x16>
 80088ba:	290a      	cmp	r1, #10
 80088bc:	d103      	bne.n	80088c6 <__sfputc_r+0x1e>
 80088be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c2:	f000 b99f 	b.w	8008c04 <__swbuf_r>
 80088c6:	6813      	ldr	r3, [r2, #0]
 80088c8:	1c58      	adds	r0, r3, #1
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	7019      	strb	r1, [r3, #0]
 80088ce:	4608      	mov	r0, r1
 80088d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <__sfputs_r>:
 80088d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	18d5      	adds	r5, r2, r3
 80088e0:	42ac      	cmp	r4, r5
 80088e2:	d101      	bne.n	80088e8 <__sfputs_r+0x12>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e007      	b.n	80088f8 <__sfputs_r+0x22>
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	463a      	mov	r2, r7
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ffda 	bl	80088a8 <__sfputc_r>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d1f3      	bne.n	80088e0 <__sfputs_r+0xa>
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088fc <_vfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	460d      	mov	r5, r1
 8008902:	b09d      	sub	sp, #116	; 0x74
 8008904:	4614      	mov	r4, r2
 8008906:	4698      	mov	r8, r3
 8008908:	4606      	mov	r6, r0
 800890a:	b118      	cbz	r0, 8008914 <_vfiprintf_r+0x18>
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	b90b      	cbnz	r3, 8008914 <_vfiprintf_r+0x18>
 8008910:	f7ff fa94 	bl	8007e3c <__sinit>
 8008914:	4b89      	ldr	r3, [pc, #548]	; (8008b3c <_vfiprintf_r+0x240>)
 8008916:	429d      	cmp	r5, r3
 8008918:	d11b      	bne.n	8008952 <_vfiprintf_r+0x56>
 800891a:	6875      	ldr	r5, [r6, #4]
 800891c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d405      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d402      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892a:	f7ff fb2a 	bl	8007f82 <__retarget_lock_acquire_recursive>
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	071b      	lsls	r3, r3, #28
 8008932:	d501      	bpl.n	8008938 <_vfiprintf_r+0x3c>
 8008934:	692b      	ldr	r3, [r5, #16]
 8008936:	b9eb      	cbnz	r3, 8008974 <_vfiprintf_r+0x78>
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f9c6 	bl	8008ccc <__swsetup_r>
 8008940:	b1c0      	cbz	r0, 8008974 <_vfiprintf_r+0x78>
 8008942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008944:	07dc      	lsls	r4, r3, #31
 8008946:	d50e      	bpl.n	8008966 <_vfiprintf_r+0x6a>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	b01d      	add	sp, #116	; 0x74
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	4b7b      	ldr	r3, [pc, #492]	; (8008b40 <_vfiprintf_r+0x244>)
 8008954:	429d      	cmp	r5, r3
 8008956:	d101      	bne.n	800895c <_vfiprintf_r+0x60>
 8008958:	68b5      	ldr	r5, [r6, #8]
 800895a:	e7df      	b.n	800891c <_vfiprintf_r+0x20>
 800895c:	4b79      	ldr	r3, [pc, #484]	; (8008b44 <_vfiprintf_r+0x248>)
 800895e:	429d      	cmp	r5, r3
 8008960:	bf08      	it	eq
 8008962:	68f5      	ldreq	r5, [r6, #12]
 8008964:	e7da      	b.n	800891c <_vfiprintf_r+0x20>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	0598      	lsls	r0, r3, #22
 800896a:	d4ed      	bmi.n	8008948 <_vfiprintf_r+0x4c>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f7ff fb09 	bl	8007f84 <__retarget_lock_release_recursive>
 8008972:	e7e9      	b.n	8008948 <_vfiprintf_r+0x4c>
 8008974:	2300      	movs	r3, #0
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	2320      	movs	r3, #32
 800897a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800897e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008982:	2330      	movs	r3, #48	; 0x30
 8008984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b48 <_vfiprintf_r+0x24c>
 8008988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800898c:	f04f 0901 	mov.w	r9, #1
 8008990:	4623      	mov	r3, r4
 8008992:	469a      	mov	sl, r3
 8008994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008998:	b10a      	cbz	r2, 800899e <_vfiprintf_r+0xa2>
 800899a:	2a25      	cmp	r2, #37	; 0x25
 800899c:	d1f9      	bne.n	8008992 <_vfiprintf_r+0x96>
 800899e:	ebba 0b04 	subs.w	fp, sl, r4
 80089a2:	d00b      	beq.n	80089bc <_vfiprintf_r+0xc0>
 80089a4:	465b      	mov	r3, fp
 80089a6:	4622      	mov	r2, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff93 	bl	80088d6 <__sfputs_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f000 80aa 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b8:	445a      	add	r2, fp
 80089ba:	9209      	str	r2, [sp, #36]	; 0x24
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80a2 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295
 80089cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d0:	f10a 0a01 	add.w	sl, sl, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089dc:	931a      	str	r3, [sp, #104]	; 0x68
 80089de:	4654      	mov	r4, sl
 80089e0:	2205      	movs	r2, #5
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	4858      	ldr	r0, [pc, #352]	; (8008b48 <_vfiprintf_r+0x24c>)
 80089e8:	f7f7 fbfa 	bl	80001e0 <memchr>
 80089ec:	9a04      	ldr	r2, [sp, #16]
 80089ee:	b9d8      	cbnz	r0, 8008a28 <_vfiprintf_r+0x12c>
 80089f0:	06d1      	lsls	r1, r2, #27
 80089f2:	bf44      	itt	mi
 80089f4:	2320      	movmi	r3, #32
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	0713      	lsls	r3, r2, #28
 80089fc:	bf44      	itt	mi
 80089fe:	232b      	movmi	r3, #43	; 0x2b
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0a:	d015      	beq.n	8008a38 <_vfiprintf_r+0x13c>
 8008a0c:	9a07      	ldr	r2, [sp, #28]
 8008a0e:	4654      	mov	r4, sl
 8008a10:	2000      	movs	r0, #0
 8008a12:	f04f 0c0a 	mov.w	ip, #10
 8008a16:	4621      	mov	r1, r4
 8008a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1c:	3b30      	subs	r3, #48	; 0x30
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d94e      	bls.n	8008ac0 <_vfiprintf_r+0x1c4>
 8008a22:	b1b0      	cbz	r0, 8008a52 <_vfiprintf_r+0x156>
 8008a24:	9207      	str	r2, [sp, #28]
 8008a26:	e014      	b.n	8008a52 <_vfiprintf_r+0x156>
 8008a28:	eba0 0308 	sub.w	r3, r0, r8
 8008a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	46a2      	mov	sl, r4
 8008a36:	e7d2      	b.n	80089de <_vfiprintf_r+0xe2>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d19      	adds	r1, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9103      	str	r1, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbb      	ittet	lt
 8008a44:	425b      	neglt	r3, r3
 8008a46:	f042 0202 	orrlt.w	r2, r2, #2
 8008a4a:	9307      	strge	r3, [sp, #28]
 8008a4c:	9307      	strlt	r3, [sp, #28]
 8008a4e:	bfb8      	it	lt
 8008a50:	9204      	strlt	r2, [sp, #16]
 8008a52:	7823      	ldrb	r3, [r4, #0]
 8008a54:	2b2e      	cmp	r3, #46	; 0x2e
 8008a56:	d10c      	bne.n	8008a72 <_vfiprintf_r+0x176>
 8008a58:	7863      	ldrb	r3, [r4, #1]
 8008a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5c:	d135      	bne.n	8008aca <_vfiprintf_r+0x1ce>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	9203      	str	r2, [sp, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bfb8      	it	lt
 8008a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a6e:	3402      	adds	r4, #2
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b58 <_vfiprintf_r+0x25c>
 8008a76:	7821      	ldrb	r1, [r4, #0]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f7f7 fbb0 	bl	80001e0 <memchr>
 8008a80:	b140      	cbz	r0, 8008a94 <_vfiprintf_r+0x198>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	eba0 000a 	sub.w	r0, r0, sl
 8008a88:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4303      	orrs	r3, r0
 8008a90:	3401      	adds	r4, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a98:	482c      	ldr	r0, [pc, #176]	; (8008b4c <_vfiprintf_r+0x250>)
 8008a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a9e:	2206      	movs	r2, #6
 8008aa0:	f7f7 fb9e 	bl	80001e0 <memchr>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d03f      	beq.n	8008b28 <_vfiprintf_r+0x22c>
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <_vfiprintf_r+0x254>)
 8008aaa:	bb1b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x1f8>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	443b      	add	r3, r7
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	e767      	b.n	8008990 <_vfiprintf_r+0x94>
 8008ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e7a5      	b.n	8008a16 <_vfiprintf_r+0x11a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	3401      	adds	r4, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008adc:	3a30      	subs	r2, #48	; 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d903      	bls.n	8008aea <_vfiprintf_r+0x1ee>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c5      	beq.n	8008a72 <_vfiprintf_r+0x176>
 8008ae6:	9105      	str	r1, [sp, #20]
 8008ae8:	e7c3      	b.n	8008a72 <_vfiprintf_r+0x176>
 8008aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7f0      	b.n	8008ad6 <_vfiprintf_r+0x1da>
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <_vfiprintf_r+0x258>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7fd fee6 	bl	80068d0 <_printf_float>
 8008b04:	4607      	mov	r7, r0
 8008b06:	1c78      	adds	r0, r7, #1
 8008b08:	d1d6      	bne.n	8008ab8 <_vfiprintf_r+0x1bc>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0c:	07d9      	lsls	r1, r3, #31
 8008b0e:	d405      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	059a      	lsls	r2, r3, #22
 8008b14:	d402      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b18:	f7ff fa34 	bl	8007f84 <__retarget_lock_release_recursive>
 8008b1c:	89ab      	ldrh	r3, [r5, #12]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	f53f af12 	bmi.w	8008948 <_vfiprintf_r+0x4c>
 8008b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b26:	e711      	b.n	800894c <_vfiprintf_r+0x50>
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_vfiprintf_r+0x258>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7fe f970 	bl	8006e18 <_printf_i>
 8008b38:	e7e4      	b.n	8008b04 <_vfiprintf_r+0x208>
 8008b3a:	bf00      	nop
 8008b3c:	08009398 	.word	0x08009398
 8008b40:	080093b8 	.word	0x080093b8
 8008b44:	08009378 	.word	0x08009378
 8008b48:	08009534 	.word	0x08009534
 8008b4c:	0800953e 	.word	0x0800953e
 8008b50:	080068d1 	.word	0x080068d1
 8008b54:	080088d7 	.word	0x080088d7
 8008b58:	0800953a 	.word	0x0800953a

08008b5c <_sbrk_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d06      	ldr	r5, [pc, #24]	; (8008b78 <_sbrk_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7f9 fa00 	bl	8001f6c <_sbrk>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_sbrk_r+0x1a>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_sbrk_r+0x1a>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200008b0 	.word	0x200008b0

08008b7c <__sread>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	460c      	mov	r4, r1
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	f000 faa8 	bl	80090d8 <_read_r>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	bfab      	itete	ge
 8008b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b90:	181b      	addge	r3, r3, r0
 8008b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b96:	bfac      	ite	ge
 8008b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9a:	81a3      	strhlt	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__swrite>:
 8008b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	461f      	mov	r7, r3
 8008ba4:	898b      	ldrh	r3, [r1, #12]
 8008ba6:	05db      	lsls	r3, r3, #23
 8008ba8:	4605      	mov	r5, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	4616      	mov	r6, r2
 8008bae:	d505      	bpl.n	8008bbc <__swrite+0x1e>
 8008bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f000 f9f8 	bl	8008fac <_lseek_r>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	4632      	mov	r2, r6
 8008bca:	463b      	mov	r3, r7
 8008bcc:	4628      	mov	r0, r5
 8008bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd2:	f000 b869 	b.w	8008ca8 <_write_r>

08008bd6 <__sseek>:
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f000 f9e5 	bl	8008fac <_lseek_r>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	bf15      	itete	ne
 8008be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf2:	81a3      	strheq	r3, [r4, #12]
 8008bf4:	bf18      	it	ne
 8008bf6:	81a3      	strhne	r3, [r4, #12]
 8008bf8:	bd10      	pop	{r4, pc}

08008bfa <__sclose>:
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 b8f1 	b.w	8008de4 <_close_r>
	...

08008c04 <__swbuf_r>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	460e      	mov	r6, r1
 8008c08:	4614      	mov	r4, r2
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b118      	cbz	r0, 8008c16 <__swbuf_r+0x12>
 8008c0e:	6983      	ldr	r3, [r0, #24]
 8008c10:	b90b      	cbnz	r3, 8008c16 <__swbuf_r+0x12>
 8008c12:	f7ff f913 	bl	8007e3c <__sinit>
 8008c16:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <__swbuf_r+0x98>)
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d12b      	bne.n	8008c74 <__swbuf_r+0x70>
 8008c1c:	686c      	ldr	r4, [r5, #4]
 8008c1e:	69a3      	ldr	r3, [r4, #24]
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	071a      	lsls	r2, r3, #28
 8008c26:	d52f      	bpl.n	8008c88 <__swbuf_r+0x84>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b36b      	cbz	r3, 8008c88 <__swbuf_r+0x84>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	1ac0      	subs	r0, r0, r3
 8008c32:	6963      	ldr	r3, [r4, #20]
 8008c34:	b2f6      	uxtb	r6, r6
 8008c36:	4283      	cmp	r3, r0
 8008c38:	4637      	mov	r7, r6
 8008c3a:	dc04      	bgt.n	8008c46 <__swbuf_r+0x42>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f966 	bl	8008f10 <_fflush_r>
 8008c44:	bb30      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	701e      	strb	r6, [r3, #0]
 8008c54:	6963      	ldr	r3, [r4, #20]
 8008c56:	3001      	adds	r0, #1
 8008c58:	4283      	cmp	r3, r0
 8008c5a:	d004      	beq.n	8008c66 <__swbuf_r+0x62>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d506      	bpl.n	8008c70 <__swbuf_r+0x6c>
 8008c62:	2e0a      	cmp	r6, #10
 8008c64:	d104      	bne.n	8008c70 <__swbuf_r+0x6c>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 f951 	bl	8008f10 <_fflush_r>
 8008c6e:	b988      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c70:	4638      	mov	r0, r7
 8008c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <__swbuf_r+0x9c>)
 8008c76:	429c      	cmp	r4, r3
 8008c78:	d101      	bne.n	8008c7e <__swbuf_r+0x7a>
 8008c7a:	68ac      	ldr	r4, [r5, #8]
 8008c7c:	e7cf      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <__swbuf_r+0xa0>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	bf08      	it	eq
 8008c84:	68ec      	ldreq	r4, [r5, #12]
 8008c86:	e7ca      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f81e 	bl	8008ccc <__swsetup_r>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d0cb      	beq.n	8008c2c <__swbuf_r+0x28>
 8008c94:	f04f 37ff 	mov.w	r7, #4294967295
 8008c98:	e7ea      	b.n	8008c70 <__swbuf_r+0x6c>
 8008c9a:	bf00      	nop
 8008c9c:	08009398 	.word	0x08009398
 8008ca0:	080093b8 	.word	0x080093b8
 8008ca4:	08009378 	.word	0x08009378

08008ca8 <_write_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d07      	ldr	r5, [pc, #28]	; (8008cc8 <_write_r+0x20>)
 8008cac:	4604      	mov	r4, r0
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f7f9 f907 	bl	8001eca <_write>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_write_r+0x1e>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_write_r+0x1e>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	200008b0 	.word	0x200008b0

08008ccc <__swsetup_r>:
 8008ccc:	4b32      	ldr	r3, [pc, #200]	; (8008d98 <__swsetup_r+0xcc>)
 8008cce:	b570      	push	{r4, r5, r6, lr}
 8008cd0:	681d      	ldr	r5, [r3, #0]
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	b125      	cbz	r5, 8008ce2 <__swsetup_r+0x16>
 8008cd8:	69ab      	ldr	r3, [r5, #24]
 8008cda:	b913      	cbnz	r3, 8008ce2 <__swsetup_r+0x16>
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f7ff f8ad 	bl	8007e3c <__sinit>
 8008ce2:	4b2e      	ldr	r3, [pc, #184]	; (8008d9c <__swsetup_r+0xd0>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d10f      	bne.n	8008d08 <__swsetup_r+0x3c>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cf0:	0719      	lsls	r1, r3, #28
 8008cf2:	d42c      	bmi.n	8008d4e <__swsetup_r+0x82>
 8008cf4:	06dd      	lsls	r5, r3, #27
 8008cf6:	d411      	bmi.n	8008d1c <__swsetup_r+0x50>
 8008cf8:	2309      	movs	r3, #9
 8008cfa:	6033      	str	r3, [r6, #0]
 8008cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	e03e      	b.n	8008d86 <__swsetup_r+0xba>
 8008d08:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <__swsetup_r+0xd4>)
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	d101      	bne.n	8008d12 <__swsetup_r+0x46>
 8008d0e:	68ac      	ldr	r4, [r5, #8]
 8008d10:	e7eb      	b.n	8008cea <__swsetup_r+0x1e>
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <__swsetup_r+0xd8>)
 8008d14:	429c      	cmp	r4, r3
 8008d16:	bf08      	it	eq
 8008d18:	68ec      	ldreq	r4, [r5, #12]
 8008d1a:	e7e6      	b.n	8008cea <__swsetup_r+0x1e>
 8008d1c:	0758      	lsls	r0, r3, #29
 8008d1e:	d512      	bpl.n	8008d46 <__swsetup_r+0x7a>
 8008d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d22:	b141      	cbz	r1, 8008d36 <__swsetup_r+0x6a>
 8008d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d28:	4299      	cmp	r1, r3
 8008d2a:	d002      	beq.n	8008d32 <__swsetup_r+0x66>
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7ff fcdb 	bl	80086e8 <_free_r>
 8008d32:	2300      	movs	r3, #0
 8008d34:	6363      	str	r3, [r4, #52]	; 0x34
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6063      	str	r3, [r4, #4]
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f043 0308 	orr.w	r3, r3, #8
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	b94b      	cbnz	r3, 8008d66 <__swsetup_r+0x9a>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5c:	d003      	beq.n	8008d66 <__swsetup_r+0x9a>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f95b 	bl	800901c <__smakebuf_r>
 8008d66:	89a0      	ldrh	r0, [r4, #12]
 8008d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d6c:	f010 0301 	ands.w	r3, r0, #1
 8008d70:	d00a      	beq.n	8008d88 <__swsetup_r+0xbc>
 8008d72:	2300      	movs	r3, #0
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	6963      	ldr	r3, [r4, #20]
 8008d78:	425b      	negs	r3, r3
 8008d7a:	61a3      	str	r3, [r4, #24]
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	b943      	cbnz	r3, 8008d92 <__swsetup_r+0xc6>
 8008d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d84:	d1ba      	bne.n	8008cfc <__swsetup_r+0x30>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	0781      	lsls	r1, r0, #30
 8008d8a:	bf58      	it	pl
 8008d8c:	6963      	ldrpl	r3, [r4, #20]
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	e7f4      	b.n	8008d7c <__swsetup_r+0xb0>
 8008d92:	2000      	movs	r0, #0
 8008d94:	e7f7      	b.n	8008d86 <__swsetup_r+0xba>
 8008d96:	bf00      	nop
 8008d98:	20000010 	.word	0x20000010
 8008d9c:	08009398 	.word	0x08009398
 8008da0:	080093b8 	.word	0x080093b8
 8008da4:	08009378 	.word	0x08009378

08008da8 <__assert_func>:
 8008da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008daa:	4614      	mov	r4, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <__assert_func+0x2c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4605      	mov	r5, r0
 8008db4:	68d8      	ldr	r0, [r3, #12]
 8008db6:	b14c      	cbz	r4, 8008dcc <__assert_func+0x24>
 8008db8:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <__assert_func+0x30>)
 8008dba:	9100      	str	r1, [sp, #0]
 8008dbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dc0:	4906      	ldr	r1, [pc, #24]	; (8008ddc <__assert_func+0x34>)
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	f000 f8e0 	bl	8008f88 <fiprintf>
 8008dc8:	f000 f9a5 	bl	8009116 <abort>
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <__assert_func+0x38>)
 8008dce:	461c      	mov	r4, r3
 8008dd0:	e7f3      	b.n	8008dba <__assert_func+0x12>
 8008dd2:	bf00      	nop
 8008dd4:	20000010 	.word	0x20000010
 8008dd8:	08009545 	.word	0x08009545
 8008ddc:	08009552 	.word	0x08009552
 8008de0:	08009580 	.word	0x08009580

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_close_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f9 f887 	bl	8001f02 <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	200008b0 	.word	0x200008b0

08008e04 <__sflush_r>:
 8008e04:	898a      	ldrh	r2, [r1, #12]
 8008e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	0710      	lsls	r0, r2, #28
 8008e0e:	460c      	mov	r4, r1
 8008e10:	d458      	bmi.n	8008ec4 <__sflush_r+0xc0>
 8008e12:	684b      	ldr	r3, [r1, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dc05      	bgt.n	8008e24 <__sflush_r+0x20>
 8008e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dc02      	bgt.n	8008e24 <__sflush_r+0x20>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	d0f9      	beq.n	8008e1e <__sflush_r+0x1a>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e30:	682f      	ldr	r7, [r5, #0]
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	d032      	beq.n	8008e9c <__sflush_r+0x98>
 8008e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	075a      	lsls	r2, r3, #29
 8008e3c:	d505      	bpl.n	8008e4a <__sflush_r+0x46>
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	1ac0      	subs	r0, r0, r3
 8008e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e44:	b10b      	cbz	r3, 8008e4a <__sflush_r+0x46>
 8008e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e48:	1ac0      	subs	r0, r0, r3
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e50:	6a21      	ldr	r1, [r4, #32]
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b0      	blx	r6
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	d106      	bne.n	8008e6a <__sflush_r+0x66>
 8008e5c:	6829      	ldr	r1, [r5, #0]
 8008e5e:	291d      	cmp	r1, #29
 8008e60:	d82c      	bhi.n	8008ebc <__sflush_r+0xb8>
 8008e62:	4a2a      	ldr	r2, [pc, #168]	; (8008f0c <__sflush_r+0x108>)
 8008e64:	40ca      	lsrs	r2, r1
 8008e66:	07d6      	lsls	r6, r2, #31
 8008e68:	d528      	bpl.n	8008ebc <__sflush_r+0xb8>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	6062      	str	r2, [r4, #4]
 8008e6e:	04d9      	lsls	r1, r3, #19
 8008e70:	6922      	ldr	r2, [r4, #16]
 8008e72:	6022      	str	r2, [r4, #0]
 8008e74:	d504      	bpl.n	8008e80 <__sflush_r+0x7c>
 8008e76:	1c42      	adds	r2, r0, #1
 8008e78:	d101      	bne.n	8008e7e <__sflush_r+0x7a>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	b903      	cbnz	r3, 8008e80 <__sflush_r+0x7c>
 8008e7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e82:	602f      	str	r7, [r5, #0]
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d0ca      	beq.n	8008e1e <__sflush_r+0x1a>
 8008e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	d002      	beq.n	8008e96 <__sflush_r+0x92>
 8008e90:	4628      	mov	r0, r5
 8008e92:	f7ff fc29 	bl	80086e8 <_free_r>
 8008e96:	2000      	movs	r0, #0
 8008e98:	6360      	str	r0, [r4, #52]	; 0x34
 8008e9a:	e7c1      	b.n	8008e20 <__sflush_r+0x1c>
 8008e9c:	6a21      	ldr	r1, [r4, #32]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	1c41      	adds	r1, r0, #1
 8008ea6:	d1c7      	bne.n	8008e38 <__sflush_r+0x34>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0c4      	beq.n	8008e38 <__sflush_r+0x34>
 8008eae:	2b1d      	cmp	r3, #29
 8008eb0:	d001      	beq.n	8008eb6 <__sflush_r+0xb2>
 8008eb2:	2b16      	cmp	r3, #22
 8008eb4:	d101      	bne.n	8008eba <__sflush_r+0xb6>
 8008eb6:	602f      	str	r7, [r5, #0]
 8008eb8:	e7b1      	b.n	8008e1e <__sflush_r+0x1a>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7ad      	b.n	8008e20 <__sflush_r+0x1c>
 8008ec4:	690f      	ldr	r7, [r1, #16]
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d0a9      	beq.n	8008e1e <__sflush_r+0x1a>
 8008eca:	0793      	lsls	r3, r2, #30
 8008ecc:	680e      	ldr	r6, [r1, #0]
 8008ece:	bf08      	it	eq
 8008ed0:	694b      	ldreq	r3, [r1, #20]
 8008ed2:	600f      	str	r7, [r1, #0]
 8008ed4:	bf18      	it	ne
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	eba6 0807 	sub.w	r8, r6, r7
 8008edc:	608b      	str	r3, [r1, #8]
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	dd9c      	ble.n	8008e1e <__sflush_r+0x1a>
 8008ee4:	6a21      	ldr	r1, [r4, #32]
 8008ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee8:	4643      	mov	r3, r8
 8008eea:	463a      	mov	r2, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b0      	blx	r6
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dc06      	bgt.n	8008f02 <__sflush_r+0xfe>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e78e      	b.n	8008e20 <__sflush_r+0x1c>
 8008f02:	4407      	add	r7, r0
 8008f04:	eba8 0800 	sub.w	r8, r8, r0
 8008f08:	e7e9      	b.n	8008ede <__sflush_r+0xda>
 8008f0a:	bf00      	nop
 8008f0c:	20400001 	.word	0x20400001

08008f10 <_fflush_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	690b      	ldr	r3, [r1, #16]
 8008f14:	4605      	mov	r5, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	b913      	cbnz	r3, 8008f20 <_fflush_r+0x10>
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	b118      	cbz	r0, 8008f2a <_fflush_r+0x1a>
 8008f22:	6983      	ldr	r3, [r0, #24]
 8008f24:	b90b      	cbnz	r3, 8008f2a <_fflush_r+0x1a>
 8008f26:	f7fe ff89 	bl	8007e3c <__sinit>
 8008f2a:	4b14      	ldr	r3, [pc, #80]	; (8008f7c <_fflush_r+0x6c>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d11b      	bne.n	8008f68 <_fflush_r+0x58>
 8008f30:	686c      	ldr	r4, [r5, #4]
 8008f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0ef      	beq.n	8008f1a <_fflush_r+0xa>
 8008f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f3c:	07d0      	lsls	r0, r2, #31
 8008f3e:	d404      	bmi.n	8008f4a <_fflush_r+0x3a>
 8008f40:	0599      	lsls	r1, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_fflush_r+0x3a>
 8008f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f46:	f7ff f81c 	bl	8007f82 <__retarget_lock_acquire_recursive>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7ff ff59 	bl	8008e04 <__sflush_r>
 8008f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f54:	07da      	lsls	r2, r3, #31
 8008f56:	4605      	mov	r5, r0
 8008f58:	d4e0      	bmi.n	8008f1c <_fflush_r+0xc>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	059b      	lsls	r3, r3, #22
 8008f5e:	d4dd      	bmi.n	8008f1c <_fflush_r+0xc>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f7ff f80f 	bl	8007f84 <__retarget_lock_release_recursive>
 8008f66:	e7d9      	b.n	8008f1c <_fflush_r+0xc>
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <_fflush_r+0x70>)
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d101      	bne.n	8008f72 <_fflush_r+0x62>
 8008f6e:	68ac      	ldr	r4, [r5, #8]
 8008f70:	e7df      	b.n	8008f32 <_fflush_r+0x22>
 8008f72:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <_fflush_r+0x74>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	bf08      	it	eq
 8008f78:	68ec      	ldreq	r4, [r5, #12]
 8008f7a:	e7da      	b.n	8008f32 <_fflush_r+0x22>
 8008f7c:	08009398 	.word	0x08009398
 8008f80:	080093b8 	.word	0x080093b8
 8008f84:	08009378 	.word	0x08009378

08008f88 <fiprintf>:
 8008f88:	b40e      	push	{r1, r2, r3}
 8008f8a:	b503      	push	{r0, r1, lr}
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	4805      	ldr	r0, [pc, #20]	; (8008fa8 <fiprintf+0x20>)
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	6800      	ldr	r0, [r0, #0]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	f7ff fcaf 	bl	80088fc <_vfiprintf_r>
 8008f9e:	b002      	add	sp, #8
 8008fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa4:	b003      	add	sp, #12
 8008fa6:	4770      	bx	lr
 8008fa8:	20000010 	.word	0x20000010

08008fac <_lseek_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_lseek_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f8 ffc8 	bl	8001f50 <_lseek>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_lseek_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_lseek_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	200008b0 	.word	0x200008b0

08008fd0 <__swhatbuf_r>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	460e      	mov	r6, r1
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	b096      	sub	sp, #88	; 0x58
 8008fdc:	4614      	mov	r4, r2
 8008fde:	461d      	mov	r5, r3
 8008fe0:	da08      	bge.n	8008ff4 <__swhatbuf_r+0x24>
 8008fe2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	061a      	lsls	r2, r3, #24
 8008fec:	d410      	bmi.n	8009010 <__swhatbuf_r+0x40>
 8008fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff2:	e00e      	b.n	8009012 <__swhatbuf_r+0x42>
 8008ff4:	466a      	mov	r2, sp
 8008ff6:	f000 f895 	bl	8009124 <_fstat_r>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	dbf1      	blt.n	8008fe2 <__swhatbuf_r+0x12>
 8008ffe:	9a01      	ldr	r2, [sp, #4]
 8009000:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009004:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009008:	425a      	negs	r2, r3
 800900a:	415a      	adcs	r2, r3
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	e7ee      	b.n	8008fee <__swhatbuf_r+0x1e>
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	2000      	movs	r0, #0
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	b016      	add	sp, #88	; 0x58
 8009018:	bd70      	pop	{r4, r5, r6, pc}
	...

0800901c <__smakebuf_r>:
 800901c:	898b      	ldrh	r3, [r1, #12]
 800901e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009020:	079d      	lsls	r5, r3, #30
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	d507      	bpl.n	8009038 <__smakebuf_r+0x1c>
 8009028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	2301      	movs	r3, #1
 8009032:	6163      	str	r3, [r4, #20]
 8009034:	b002      	add	sp, #8
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	ab01      	add	r3, sp, #4
 800903a:	466a      	mov	r2, sp
 800903c:	f7ff ffc8 	bl	8008fd0 <__swhatbuf_r>
 8009040:	9900      	ldr	r1, [sp, #0]
 8009042:	4605      	mov	r5, r0
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff fbbb 	bl	80087c0 <_malloc_r>
 800904a:	b948      	cbnz	r0, 8009060 <__smakebuf_r+0x44>
 800904c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009050:	059a      	lsls	r2, r3, #22
 8009052:	d4ef      	bmi.n	8009034 <__smakebuf_r+0x18>
 8009054:	f023 0303 	bic.w	r3, r3, #3
 8009058:	f043 0302 	orr.w	r3, r3, #2
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	e7e3      	b.n	8009028 <__smakebuf_r+0xc>
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <__smakebuf_r+0x7c>)
 8009062:	62b3      	str	r3, [r6, #40]	; 0x28
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	9b00      	ldr	r3, [sp, #0]
 8009070:	6163      	str	r3, [r4, #20]
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	6120      	str	r0, [r4, #16]
 8009076:	b15b      	cbz	r3, 8009090 <__smakebuf_r+0x74>
 8009078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907c:	4630      	mov	r0, r6
 800907e:	f000 f863 	bl	8009148 <_isatty_r>
 8009082:	b128      	cbz	r0, 8009090 <__smakebuf_r+0x74>
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	f023 0303 	bic.w	r3, r3, #3
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	81a3      	strh	r3, [r4, #12]
 8009090:	89a0      	ldrh	r0, [r4, #12]
 8009092:	4305      	orrs	r5, r0
 8009094:	81a5      	strh	r5, [r4, #12]
 8009096:	e7cd      	b.n	8009034 <__smakebuf_r+0x18>
 8009098:	08007dd5 	.word	0x08007dd5

0800909c <__ascii_mbtowc>:
 800909c:	b082      	sub	sp, #8
 800909e:	b901      	cbnz	r1, 80090a2 <__ascii_mbtowc+0x6>
 80090a0:	a901      	add	r1, sp, #4
 80090a2:	b142      	cbz	r2, 80090b6 <__ascii_mbtowc+0x1a>
 80090a4:	b14b      	cbz	r3, 80090ba <__ascii_mbtowc+0x1e>
 80090a6:	7813      	ldrb	r3, [r2, #0]
 80090a8:	600b      	str	r3, [r1, #0]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	1e10      	subs	r0, r2, #0
 80090ae:	bf18      	it	ne
 80090b0:	2001      	movne	r0, #1
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	4610      	mov	r0, r2
 80090b8:	e7fb      	b.n	80090b2 <__ascii_mbtowc+0x16>
 80090ba:	f06f 0001 	mvn.w	r0, #1
 80090be:	e7f8      	b.n	80090b2 <__ascii_mbtowc+0x16>

080090c0 <__malloc_lock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_lock+0x8>)
 80090c2:	f7fe bf5e 	b.w	8007f82 <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	200008a4 	.word	0x200008a4

080090cc <__malloc_unlock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__malloc_unlock+0x8>)
 80090ce:	f7fe bf59 	b.w	8007f84 <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	200008a4 	.word	0x200008a4

080090d8 <_read_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d07      	ldr	r5, [pc, #28]	; (80090f8 <_read_r+0x20>)
 80090dc:	4604      	mov	r4, r0
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7f8 fed2 	bl	8001e90 <_read>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_read_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_read_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	200008b0 	.word	0x200008b0

080090fc <__ascii_wctomb>:
 80090fc:	b149      	cbz	r1, 8009112 <__ascii_wctomb+0x16>
 80090fe:	2aff      	cmp	r2, #255	; 0xff
 8009100:	bf85      	ittet	hi
 8009102:	238a      	movhi	r3, #138	; 0x8a
 8009104:	6003      	strhi	r3, [r0, #0]
 8009106:	700a      	strbls	r2, [r1, #0]
 8009108:	f04f 30ff 	movhi.w	r0, #4294967295
 800910c:	bf98      	it	ls
 800910e:	2001      	movls	r0, #1
 8009110:	4770      	bx	lr
 8009112:	4608      	mov	r0, r1
 8009114:	4770      	bx	lr

08009116 <abort>:
 8009116:	b508      	push	{r3, lr}
 8009118:	2006      	movs	r0, #6
 800911a:	f000 f84d 	bl	80091b8 <raise>
 800911e:	2001      	movs	r0, #1
 8009120:	f7f8 feac 	bl	8001e7c <_exit>

08009124 <_fstat_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d07      	ldr	r5, [pc, #28]	; (8009144 <_fstat_r+0x20>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	4611      	mov	r1, r2
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	f7f8 fef2 	bl	8001f1a <_fstat>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	d102      	bne.n	8009140 <_fstat_r+0x1c>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	b103      	cbz	r3, 8009140 <_fstat_r+0x1c>
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	bd38      	pop	{r3, r4, r5, pc}
 8009142:	bf00      	nop
 8009144:	200008b0 	.word	0x200008b0

08009148 <_isatty_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4d06      	ldr	r5, [pc, #24]	; (8009164 <_isatty_r+0x1c>)
 800914c:	2300      	movs	r3, #0
 800914e:	4604      	mov	r4, r0
 8009150:	4608      	mov	r0, r1
 8009152:	602b      	str	r3, [r5, #0]
 8009154:	f7f8 fef1 	bl	8001f3a <_isatty>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_isatty_r+0x1a>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_isatty_r+0x1a>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	200008b0 	.word	0x200008b0

08009168 <_raise_r>:
 8009168:	291f      	cmp	r1, #31
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	460d      	mov	r5, r1
 8009170:	d904      	bls.n	800917c <_raise_r+0x14>
 8009172:	2316      	movs	r3, #22
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800917e:	b112      	cbz	r2, 8009186 <_raise_r+0x1e>
 8009180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009184:	b94b      	cbnz	r3, 800919a <_raise_r+0x32>
 8009186:	4620      	mov	r0, r4
 8009188:	f000 f830 	bl	80091ec <_getpid_r>
 800918c:	462a      	mov	r2, r5
 800918e:	4601      	mov	r1, r0
 8009190:	4620      	mov	r0, r4
 8009192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009196:	f000 b817 	b.w	80091c8 <_kill_r>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00a      	beq.n	80091b4 <_raise_r+0x4c>
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	d103      	bne.n	80091aa <_raise_r+0x42>
 80091a2:	2316      	movs	r3, #22
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7e7      	b.n	800917a <_raise_r+0x12>
 80091aa:	2400      	movs	r4, #0
 80091ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091b0:	4628      	mov	r0, r5
 80091b2:	4798      	blx	r3
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7e0      	b.n	800917a <_raise_r+0x12>

080091b8 <raise>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <raise+0xc>)
 80091ba:	4601      	mov	r1, r0
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f7ff bfd3 	b.w	8009168 <_raise_r>
 80091c2:	bf00      	nop
 80091c4:	20000010 	.word	0x20000010

080091c8 <_kill_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d07      	ldr	r5, [pc, #28]	; (80091e8 <_kill_r+0x20>)
 80091cc:	2300      	movs	r3, #0
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f7f8 fe41 	bl	8001e5c <_kill>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d102      	bne.n	80091e4 <_kill_r+0x1c>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b103      	cbz	r3, 80091e4 <_kill_r+0x1c>
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	200008b0 	.word	0x200008b0

080091ec <_getpid_r>:
 80091ec:	f7f8 be2e 	b.w	8001e4c <_getpid>

080091f0 <_init>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	bf00      	nop
 80091f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f6:	bc08      	pop	{r3}
 80091f8:	469e      	mov	lr, r3
 80091fa:	4770      	bx	lr

080091fc <_fini>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr
